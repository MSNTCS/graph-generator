# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _snap
else:
    import _snap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _snap.SWIG_PyInstanceMethod_New
_swig_new_static_method = _snap.SWIG_PyStaticMethod_New

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SNAP_ALL = _snap.SNAP_ALL

Version = "5.0.0"

print_array = _snap.print_array
PyTFltV = _snap.PyTFltV
PyToTIntV = _snap.PyToTIntV
count = _snap.count
TIntVToPy = _snap.TIntVToPy
lUndef = _snap.lUndef

lUs = _snap.lUs

lSi = _snap.lSi

WrNotify = _snap.WrNotify
SaveToErrLog = _snap.SaveToErrLog
ExeStop = _snap.ExeStop
loUndef = _snap.loUndef

loNot = _snap.loNot

loAnd = _snap.loAnd

loOr = _snap.loOr

roUndef = _snap.roUndef

roLs = _snap.roLs

roLEq = _snap.roLEq

roEq = _snap.roEq

roNEq = _snap.roNEq

roGEq = _snap.roGEq

roGt = _snap.roGt

class TCRef(object):
    r"""Proxy of C++ TCRef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TCRef self) -> TCRef"""
        _snap.TCRef_swiginit(self, _snap.new_TCRef())
    __swig_destroy__ = _snap.delete_TCRef
    MkRef = _swig_new_instance_method(_snap.TCRef_MkRef)
    UnRef = _swig_new_instance_method(_snap.TCRef_UnRef)
    NoRef = _swig_new_instance_method(_snap.TCRef_NoRef)
    GetRefs = _swig_new_instance_method(_snap.TCRef_GetRefs)

# Register TCRef in _snap:
_snap.TCRef_swigregister(TCRef)

class TSStr(object):
    r"""Proxy of C++ TSStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TSStr self) -> TSStr
        __init__(TSStr self, TSStr SStr) -> TSStr

        Parameters
        ----------
        SStr: TSStr const &

        __init__(TSStr self, char const * _Bf) -> TSStr

        Parameters
        ----------
        _Bf: char const *

        """
        _snap.TSStr_swiginit(self, _snap.new_TSStr(*args))
    __swig_destroy__ = _snap.delete_TSStr
    CStr = _swig_new_instance_method(_snap.TSStr_CStr)
    Empty = _swig_new_instance_method(_snap.TSStr_Empty)
    Len = _swig_new_instance_method(_snap.TSStr_Len)

# Register TSStr in _snap:
_snap.TSStr_swigregister(TSStr)

class TConv_Pt64Ints32(object):
    r"""Proxy of C++ TConv_Pt64Ints32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TConv_Pt64Ints32 self) -> TConv_Pt64Ints32
        __init__(TConv_Pt64Ints32 self, void * Pt) -> TConv_Pt64Ints32

        Parameters
        ----------
        Pt: void *

        __init__(TConv_Pt64Ints32 self, uint const & Ms, uint const & Ls) -> TConv_Pt64Ints32

        Parameters
        ----------
        Ms: uint const &
        Ls: uint const &

        """
        _snap.TConv_Pt64Ints32_swiginit(self, _snap.new_TConv_Pt64Ints32(*args))
    PutPt = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutPt)
    GetPt = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetPt)
    PutUInt64 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutUInt64)
    GetUInt64 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetUInt64)
    PutMsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutMsUInt32)
    GetMsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetMsUInt32)
    PutLsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutLsUInt32)
    GetLsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetLsUInt32)
    __swig_destroy__ = _snap.delete_TConv_Pt64Ints32

# Register TConv_Pt64Ints32 in _snap:
_snap.TConv_Pt64Ints32_swigregister(TConv_Pt64Ints32)

class TPairHashImpl1(object):
    r"""Proxy of C++ TPairHashImpl1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetHashCd = _swig_new_static_method(_snap.TPairHashImpl1_GetHashCd)

    def __init__(self):
        r"""__init__(TPairHashImpl1 self) -> TPairHashImpl1"""
        _snap.TPairHashImpl1_swiginit(self, _snap.new_TPairHashImpl1())
    __swig_destroy__ = _snap.delete_TPairHashImpl1

# Register TPairHashImpl1 in _snap:
_snap.TPairHashImpl1_swigregister(TPairHashImpl1)
TPairHashImpl1_GetHashCd = _snap.TPairHashImpl1_GetHashCd

class TPairHashImpl2(object):
    r"""Proxy of C++ TPairHashImpl2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetHashCd = _swig_new_static_method(_snap.TPairHashImpl2_GetHashCd)

    def __init__(self):
        r"""__init__(TPairHashImpl2 self) -> TPairHashImpl2"""
        _snap.TPairHashImpl2_swiginit(self, _snap.new_TPairHashImpl2())
    __swig_destroy__ = _snap.delete_TPairHashImpl2

# Register TPairHashImpl2 in _snap:
_snap.TPairHashImpl2_swigregister(TPairHashImpl2)
TPairHashImpl2_GetHashCd = _snap.TPairHashImpl2_GetHashCd

class TRnd(object):
    r"""Proxy of C++ TRnd class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TRnd self, int const & _Seed=1, int const & Steps=0) -> TRnd

        Parameters
        ----------
        _Seed: int const &
        Steps: int const &

        __init__(TRnd self, TSIn SIn) -> TRnd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TRnd_swiginit(self, _snap.new_TRnd(*args))
    Save = _swig_new_instance_method(_snap.TRnd_Save)
    __eq__ = _swig_new_instance_method(_snap.TRnd___eq__)
    GetUniDev = _swig_new_instance_method(_snap.TRnd_GetUniDev)
    GetUniDevInt = _swig_new_instance_method(_snap.TRnd_GetUniDevInt)
    GetUniDevUInt = _swig_new_instance_method(_snap.TRnd_GetUniDevUInt)
    GetUniDevInt64 = _swig_new_instance_method(_snap.TRnd_GetUniDevInt64)
    GetUniDevUInt64 = _swig_new_instance_method(_snap.TRnd_GetUniDevUInt64)
    GetNrmDev = _swig_new_instance_method(_snap.TRnd_GetNrmDev)
    GetExpDev = _swig_new_instance_method(_snap.TRnd_GetExpDev)
    GetGammaDev = _swig_new_instance_method(_snap.TRnd_GetGammaDev)
    GetPoissonDev = _swig_new_instance_method(_snap.TRnd_GetPoissonDev)
    GetBinomialDev = _swig_new_instance_method(_snap.TRnd_GetBinomialDev)
    GetGeoDev = _swig_new_instance_method(_snap.TRnd_GetGeoDev)
    GetPowerDev = _swig_new_instance_method(_snap.TRnd_GetPowerDev)
    GetRayleigh = _swig_new_instance_method(_snap.TRnd_GetRayleigh)
    GetWeibull = _swig_new_instance_method(_snap.TRnd_GetWeibull)
    PutSeed = _swig_new_instance_method(_snap.TRnd_PutSeed)
    GetSeed = _swig_new_instance_method(_snap.TRnd_GetSeed)
    Randomize = _swig_new_instance_method(_snap.TRnd_Randomize)
    Move = _swig_new_instance_method(_snap.TRnd_Move)
    Check = _swig_new_instance_method(_snap.TRnd_Check)
    GetUniDevStep = _swig_new_static_method(_snap.TRnd_GetUniDevStep)
    GetNrmDevStep = _swig_new_static_method(_snap.TRnd_GetNrmDevStep)
    GetExpDevStep = _swig_new_static_method(_snap.TRnd_GetExpDevStep)
    LoadTxt = _swig_new_static_method(_snap.TRnd_LoadTxt)
    SaveTxt = _swig_new_instance_method(_snap.TRnd_SaveTxt)
    __swig_destroy__ = _snap.delete_TRnd

# Register TRnd in _snap:
_snap.TRnd_swigregister(TRnd)
cvar = _snap.cvar
TRnd.RndSeed = _snap.cvar.TRnd_RndSeed
TRnd_GetUniDevStep = _snap.TRnd_GetUniDevStep
TRnd_GetNrmDevStep = _snap.TRnd_GetNrmDevStep
TRnd_GetExpDevStep = _snap.TRnd_GetExpDevStep
TRnd_LoadTxt = _snap.TRnd_LoadTxt

class TMem(object):
    r"""Proxy of C++ TMem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.TMem_New)
    __swig_destroy__ = _snap.delete_TMem

    def __init__(self, *args):
        r"""
        __init__(TMem self, int const & _MxBfL=0) -> TMem

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TMem self, void const * _Bf, int const & _BfL) -> TMem

        Parameters
        ----------
        _Bf: void const *
        _BfL: int const &

        __init__(TMem self, TMem Mem) -> TMem

        Parameters
        ----------
        Mem: TMem const &

        __init__(TMem self, TStr Str) -> TMem

        Parameters
        ----------
        Str: TStr const &

        __init__(TMem self, TSIn SIn) -> TMem

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TMem_swiginit(self, _snap.new_TMem(*args))
    Save = _swig_new_instance_method(_snap.TMem_Save)
    __call__ = _swig_new_instance_method(_snap.TMem___call__)
    __iadd__ = _swig_new_instance_method(_snap.TMem___iadd__)
    GetMemUsed = _swig_new_instance_method(_snap.TMem_GetMemUsed)
    Gen = _swig_new_instance_method(_snap.TMem_Gen)
    GenZeros = _swig_new_instance_method(_snap.TMem_GenZeros)
    Reserve = _swig_new_instance_method(_snap.TMem_Reserve)
    Del = _swig_new_instance_method(_snap.TMem_Del)
    Clr = _swig_new_instance_method(_snap.TMem_Clr)
    Len = _swig_new_instance_method(_snap.TMem_Len)
    Empty = _swig_new_instance_method(_snap.TMem_Empty)
    Trunc = _swig_new_instance_method(_snap.TMem_Trunc)
    Push = _swig_new_instance_method(_snap.TMem_Push)
    Pop = _swig_new_instance_method(_snap.TMem_Pop)
    DoFitStr = _swig_new_instance_method(_snap.TMem_DoFitStr)
    AddBf = _swig_new_instance_method(_snap.TMem_AddBf)
    GetBf = _swig_new_instance_method(_snap.TMem_GetBf)
    GetAsStr = _swig_new_instance_method(_snap.TMem_GetAsStr)
    GetSIn = _swig_new_instance_method(_snap.TMem_GetSIn)
    LoadMem = _swig_new_static_method(_snap.TMem_LoadMem)
    SaveMem = _swig_new_instance_method(_snap.TMem_SaveMem)

# Register TMem in _snap:
_snap.TMem_swigregister(TMem)
TMem_New = _snap.TMem_New
TMem_LoadMem = _snap.TMem_LoadMem

class TMemIn(object):
    r"""Proxy of C++ TMemIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Mem, _BfC=0):
        r"""
        __init__(TMemIn self, TMem _Mem, int const & _BfC=0) -> TMemIn

        Parameters
        ----------
        _Mem: TMem const &
        _BfC: int const &

        """
        _snap.TMemIn_swiginit(self, _snap.new_TMemIn(_Mem, _BfC))
    New = _swig_new_static_method(_snap.TMemIn_New)
    __swig_destroy__ = _snap.delete_TMemIn
    Eof = _swig_new_instance_method(_snap.TMemIn_Eof)
    Len = _swig_new_instance_method(_snap.TMemIn_Len)
    GetCh = _swig_new_instance_method(_snap.TMemIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TMemIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TMemIn_GetBf)
    Reset = _swig_new_instance_method(_snap.TMemIn_Reset)
    GetNextLnBf = _swig_new_instance_method(_snap.TMemIn_GetNextLnBf)

# Register TMemIn in _snap:
_snap.TMemIn_swigregister(TMemIn)
TMemIn_New = _snap.TMemIn_New

class TMemOut(object):
    r"""Proxy of C++ TMemOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Mem):
        r"""
        __init__(TMemOut self, PMem const & _Mem) -> TMemOut

        Parameters
        ----------
        _Mem: PMem const &

        """
        _snap.TMemOut_swiginit(self, _snap.new_TMemOut(_Mem))
    New = _swig_new_static_method(_snap.TMemOut_New)
    __swig_destroy__ = _snap.delete_TMemOut
    PutCh = _swig_new_instance_method(_snap.TMemOut_PutCh)
    PutBf = _swig_new_instance_method(_snap.TMemOut_PutBf)
    Flush = _swig_new_instance_method(_snap.TMemOut_Flush)

# Register TMemOut in _snap:
_snap.TMemOut_swigregister(TMemOut)
TMemOut_New = _snap.TMemOut_New

class TChA(object):
    r"""Proxy of C++ TChA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TChA

    def __init__(self, *args):
        r"""
        __init__(TChA self, int const & _MxBfL=256) -> TChA

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TChA self, char const * CStr) -> TChA

        Parameters
        ----------
        CStr: char const *

        __init__(TChA self, char const * CStr, int const & StrLen) -> TChA

        Parameters
        ----------
        CStr: char const *
        StrLen: int const &

        __init__(TChA self, TChA ChA) -> TChA

        Parameters
        ----------
        ChA: TChA const &

        __init__(TChA self, TStr Str) -> TChA

        Parameters
        ----------
        Str: TStr const &

        __init__(TChA self, TMem Mem) -> TChA

        Parameters
        ----------
        Mem: TMem const &

        __init__(TChA self, TSIn SIn) -> TChA

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChA_swiginit(self, _snap.new_TChA(*args))
    Load = _swig_new_instance_method(_snap.TChA_Load)
    Save = _swig_new_instance_method(_snap.TChA_Save)
    __eq__ = _swig_new_instance_method(_snap.TChA___eq__)
    __ne__ = _swig_new_instance_method(_snap.TChA___ne__)
    __lt__ = _swig_new_instance_method(_snap.TChA___lt__)
    __iadd__ = _swig_new_instance_method(_snap.TChA___iadd__)
    GetMemUsed = _swig_new_instance_method(_snap.TChA_GetMemUsed)
    __call__ = _swig_new_instance_method(_snap.TChA___call__)
    CStr = _swig_new_instance_method(_snap.TChA_CStr)
    Clr = _swig_new_instance_method(_snap.TChA_Clr)
    Len = _swig_new_instance_method(_snap.TChA_Len)
    Empty = _swig_new_instance_method(_snap.TChA_Empty)
    Ins = _swig_new_instance_method(_snap.TChA_Ins)
    Del = _swig_new_instance_method(_snap.TChA_Del)
    DelLastCh = _swig_new_instance_method(_snap.TChA_DelLastCh)
    Push = _swig_new_instance_method(_snap.TChA_Push)
    Pop = _swig_new_instance_method(_snap.TChA_Pop)
    Trunc = _swig_new_instance_method(_snap.TChA_Trunc)
    Reverse = _swig_new_instance_method(_snap.TChA_Reverse)
    AddCh = _swig_new_instance_method(_snap.TChA_AddCh)
    AddChTo = _swig_new_instance_method(_snap.TChA_AddChTo)
    AddBf = _swig_new_instance_method(_snap.TChA_AddBf)
    PutCh = _swig_new_instance_method(_snap.TChA_PutCh)
    GetCh = _swig_new_instance_method(_snap.TChA_GetCh)
    LastCh = _swig_new_instance_method(_snap.TChA_LastCh)
    LastLastCh = _swig_new_instance_method(_snap.TChA_LastLastCh)
    GetSubStr = _swig_new_instance_method(_snap.TChA_GetSubStr)
    CountCh = _swig_new_instance_method(_snap.TChA_CountCh)
    SearchCh = _swig_new_instance_method(_snap.TChA_SearchCh)
    SearchChBack = _swig_new_instance_method(_snap.TChA_SearchChBack)
    SearchStr = _swig_new_instance_method(_snap.TChA_SearchStr)
    IsStrIn = _swig_new_instance_method(_snap.TChA_IsStrIn)
    IsPrefix = _swig_new_instance_method(_snap.TChA_IsPrefix)
    IsSuffix = _swig_new_instance_method(_snap.TChA_IsSuffix)
    IsChIn = _swig_new_instance_method(_snap.TChA_IsChIn)
    ChangeCh = _swig_new_instance_method(_snap.TChA_ChangeCh)
    ToUc = _swig_new_instance_method(_snap.TChA_ToUc)
    ToLc = _swig_new_instance_method(_snap.TChA_ToLc)
    ToTrunc = _swig_new_instance_method(_snap.TChA_ToTrunc)
    CompressWs = _swig_new_instance_method(_snap.TChA_CompressWs)
    Swap = _swig_new_instance_method(_snap.TChA_Swap)
    GetPrimHashCd = _swig_new_instance_method(_snap.TChA_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TChA_GetSecHashCd)
    LoadTxt = _swig_new_static_method(_snap.TChA_LoadTxt)
    SaveTxt = _swig_new_instance_method(_snap.TChA_SaveTxt)

# Register TChA in _snap:
_snap.TChA_swigregister(TChA)
TChA_LoadTxt = _snap.TChA_LoadTxt

class TChAIn(object):
    r"""Proxy of C++ TChAIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, ChA, _BfC=0):
        r"""
        __init__(TChAIn self, TChA ChA, int const & _BfC=0) -> TChAIn

        Parameters
        ----------
        ChA: TChA const &
        _BfC: int const &

        """
        _snap.TChAIn_swiginit(self, _snap.new_TChAIn(ChA, _BfC))
    New = _swig_new_static_method(_snap.TChAIn_New)
    __swig_destroy__ = _snap.delete_TChAIn
    Eof = _swig_new_instance_method(_snap.TChAIn_Eof)
    Len = _swig_new_instance_method(_snap.TChAIn_Len)
    GetCh = _swig_new_instance_method(_snap.TChAIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TChAIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TChAIn_GetBf)
    Reset = _swig_new_instance_method(_snap.TChAIn_Reset)
    GetNextLnBf = _swig_new_instance_method(_snap.TChAIn_GetNextLnBf)

# Register TChAIn in _snap:
_snap.TChAIn_swigregister(TChAIn)
TChAIn_New = _snap.TChAIn_New

class TRStr(object):
    r"""Proxy of C++ TRStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Bf = property(_snap.TRStr_Bf_get, _snap.TRStr_Bf_set, doc=r"""Bf : p.char""")
    Refs = property(_snap.TRStr_Refs_get, _snap.TRStr_Refs_set, doc=r"""Refs : int""")
    __swig_destroy__ = _snap.delete_TRStr

    def __init__(self, *args):
        r"""
        __init__(TRStr self) -> TRStr
        __init__(TRStr self, int const & Len) -> TRStr

        Parameters
        ----------
        Len: int const &

        __init__(TRStr self, char const * CStr) -> TRStr

        Parameters
        ----------
        CStr: char const *

        __init__(TRStr self, char const * CStr, int const & MxLen) -> TRStr

        Parameters
        ----------
        CStr: char const *
        MxLen: int const &

        __init__(TRStr self, char const * CStr1, char const * CStr2) -> TRStr

        Parameters
        ----------
        CStr1: char const *
        CStr2: char const *

        __init__(TRStr self, char const & Ch) -> TRStr

        Parameters
        ----------
        Ch: char const &

        __init__(TRStr self, char const & Ch1, char const & Ch2) -> TRStr

        Parameters
        ----------
        Ch1: char const &
        Ch2: char const &

        __init__(TRStr self, TSIn SIn, bool const & IsSmall) -> TRStr

        Parameters
        ----------
        SIn: TSIn &
        IsSmall: bool const &

        """
        _snap.TRStr_swiginit(self, _snap.new_TRStr(*args))
    Save = _swig_new_instance_method(_snap.TRStr_Save)
    GetMemUsed = _swig_new_instance_method(_snap.TRStr_GetMemUsed)
    MkRef = _swig_new_instance_method(_snap.TRStr_MkRef)
    UnRef = _swig_new_instance_method(_snap.TRStr_UnRef)
    CStr = _swig_new_instance_method(_snap.TRStr_CStr)
    Empty = _swig_new_instance_method(_snap.TRStr_Empty)
    Len = _swig_new_instance_method(_snap.TRStr_Len)
    PutCh = _swig_new_instance_method(_snap.TRStr_PutCh)
    GetCh = _swig_new_instance_method(_snap.TRStr_GetCh)
    IsUc = _swig_new_instance_method(_snap.TRStr_IsUc)
    ToUc = _swig_new_instance_method(_snap.TRStr_ToUc)
    IsLc = _swig_new_instance_method(_snap.TRStr_IsLc)
    ToLc = _swig_new_instance_method(_snap.TRStr_ToLc)
    ToCap = _swig_new_instance_method(_snap.TRStr_ToCap)
    ConvUsFromYuAscii = _swig_new_instance_method(_snap.TRStr_ConvUsFromYuAscii)
    CmpI = _swig_new_static_method(_snap.TRStr_CmpI)
    GetPrimHashCd = _swig_new_instance_method(_snap.TRStr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TRStr_GetSecHashCd)
    GetNullRStr = _swig_new_static_method(_snap.TRStr_GetNullRStr)

# Register TRStr in _snap:
_snap.TRStr_swigregister(TRStr)
TRStr_CmpI = _snap.TRStr_CmpI
TRStr_GetNullRStr = _snap.TRStr_GetNullRStr

class TStr(object):
    r"""Proxy of C++ TStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStr

    def __init__(self, *args):
        r"""
        __init__(TStr self) -> TStr
        __init__(TStr self, TStr Str) -> TStr

        Parameters
        ----------
        Str: TStr const &

        __init__(TStr self, TChA ChA) -> TStr

        Parameters
        ----------
        ChA: TChA const &

        __init__(TStr self, TSStr SStr) -> TStr

        Parameters
        ----------
        SStr: TSStr const &

        __init__(TStr self, char const * CStr) -> TStr

        Parameters
        ----------
        CStr: char const *

        __init__(TStr self, char const & Ch) -> TStr

        Parameters
        ----------
        Ch: char const &

        __init__(TStr self, TMem Mem) -> TStr

        Parameters
        ----------
        Mem: TMem const &

        __init__(TStr self, PSIn const & SIn) -> TStr

        Parameters
        ----------
        SIn: PSIn const &

        __init__(TStr self, TSIn SIn, bool const & IsSmall=False) -> TStr

        Parameters
        ----------
        SIn: TSIn &
        IsSmall: bool const &

        """
        _snap.TStr_swiginit(self, _snap.new_TStr(*args))
    Load = _swig_new_instance_method(_snap.TStr_Load)
    Save = _swig_new_instance_method(_snap.TStr_Save)
    __iadd__ = _swig_new_instance_method(_snap.TStr___iadd__)
    __eq__ = _swig_new_instance_method(_snap.TStr___eq__)
    __ne__ = _swig_new_instance_method(_snap.TStr___ne__)
    __lt__ = _swig_new_instance_method(_snap.TStr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStr_GetMemUsed)
    CStr = _swig_new_instance_method(_snap.TStr_CStr)
    PutCh = _swig_new_instance_method(_snap.TStr_PutCh)
    GetCh = _swig_new_instance_method(_snap.TStr_GetCh)
    LastCh = _swig_new_instance_method(_snap.TStr_LastCh)
    Clr = _swig_new_instance_method(_snap.TStr_Clr)
    Len = _swig_new_instance_method(_snap.TStr_Len)
    Empty = _swig_new_instance_method(_snap.TStr_Empty)
    IsUc = _swig_new_instance_method(_snap.TStr_IsUc)
    ToUc = _swig_new_instance_method(_snap.TStr_ToUc)
    GetUc = _swig_new_instance_method(_snap.TStr_GetUc)
    CmpI = _swig_new_instance_method(_snap.TStr_CmpI)
    EqI = _swig_new_instance_method(_snap.TStr_EqI)
    IsLc = _swig_new_instance_method(_snap.TStr_IsLc)
    ToLc = _swig_new_instance_method(_snap.TStr_ToLc)
    GetLc = _swig_new_instance_method(_snap.TStr_GetLc)
    ToCap = _swig_new_instance_method(_snap.TStr_ToCap)
    GetCap = _swig_new_instance_method(_snap.TStr_GetCap)
    ToTrunc = _swig_new_instance_method(_snap.TStr_ToTrunc)
    GetTrunc = _swig_new_instance_method(_snap.TStr_GetTrunc)
    ConvUsFromYuAscii = _swig_new_instance_method(_snap.TStr_ConvUsFromYuAscii)
    GetUsFromYuAscii = _swig_new_instance_method(_snap.TStr_GetUsFromYuAscii)
    ToHex = _swig_new_instance_method(_snap.TStr_ToHex)
    GetHex = _swig_new_instance_method(_snap.TStr_GetHex)
    FromHex = _swig_new_instance_method(_snap.TStr_FromHex)
    GetFromHex = _swig_new_instance_method(_snap.TStr_GetFromHex)
    GetSubStr = _swig_new_instance_method(_snap.TStr_GetSubStr)
    InsStr = _swig_new_instance_method(_snap.TStr_InsStr)
    DelChAll = _swig_new_instance_method(_snap.TStr_DelChAll)
    DelSubStr = _swig_new_instance_method(_snap.TStr_DelSubStr)
    DelStr = _swig_new_instance_method(_snap.TStr_DelStr)
    LeftOf = _swig_new_instance_method(_snap.TStr_LeftOf)
    LeftOfLast = _swig_new_instance_method(_snap.TStr_LeftOfLast)
    RightOf = _swig_new_instance_method(_snap.TStr_RightOf)
    RightOfLast = _swig_new_instance_method(_snap.TStr_RightOfLast)
    SplitOnCh = _swig_new_instance_method(_snap.TStr_SplitOnCh)
    SplitOnLastCh = _swig_new_instance_method(_snap.TStr_SplitOnLastCh)
    SplitOnAllCh = _swig_new_instance_method(_snap.TStr_SplitOnAllCh)
    SplitOnAllAnyCh = _swig_new_instance_method(_snap.TStr_SplitOnAllAnyCh)
    SplitOnWs = _swig_new_instance_method(_snap.TStr_SplitOnWs)
    SplitOnNonAlNum = _swig_new_instance_method(_snap.TStr_SplitOnNonAlNum)
    SplitOnStr = _swig_new_instance_method(_snap.TStr_SplitOnStr)
    Mid = _swig_new_instance_method(_snap.TStr_Mid)
    Left = _swig_new_instance_method(_snap.TStr_Left)
    Right = _swig_new_instance_method(_snap.TStr_Right)
    Slice = _swig_new_instance_method(_snap.TStr_Slice)
    __call__ = _swig_new_instance_method(_snap.TStr___call__)
    CountCh = _swig_new_instance_method(_snap.TStr_CountCh)
    SearchCh = _swig_new_instance_method(_snap.TStr_SearchCh)
    SearchChBack = _swig_new_instance_method(_snap.TStr_SearchChBack)
    SearchStr = _swig_new_instance_method(_snap.TStr_SearchStr)
    IsChIn = _swig_new_instance_method(_snap.TStr_IsChIn)
    IsStrIn = _swig_new_instance_method(_snap.TStr_IsStrIn)
    IsPrefix = _swig_new_instance_method(_snap.TStr_IsPrefix)
    IsSuffix = _swig_new_instance_method(_snap.TStr_IsSuffix)
    ChangeCh = _swig_new_instance_method(_snap.TStr_ChangeCh)
    ChangeChAll = _swig_new_instance_method(_snap.TStr_ChangeChAll)
    ChangeStr = _swig_new_instance_method(_snap.TStr_ChangeStr)
    ChangeStrAll = _swig_new_instance_method(_snap.TStr_ChangeStrAll)
    Reverse = _swig_new_instance_method(_snap.TStr_Reverse)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStr_GetSecHashCd)
    IsBool = _swig_new_instance_method(_snap.TStr_IsBool)
    IsInt = _swig_new_instance_method(_snap.TStr_IsInt)
    GetInt = _swig_new_instance_method(_snap.TStr_GetInt)
    IsUInt = _swig_new_instance_method(_snap.TStr_IsUInt)
    GetUInt = _swig_new_instance_method(_snap.TStr_GetUInt)
    IsInt64 = _swig_new_instance_method(_snap.TStr_IsInt64)
    GetInt64 = _swig_new_instance_method(_snap.TStr_GetInt64)
    IsUInt64 = _swig_new_instance_method(_snap.TStr_IsUInt64)
    GetUInt64 = _swig_new_instance_method(_snap.TStr_GetUInt64)
    IsHexInt = _swig_new_instance_method(_snap.TStr_IsHexInt)
    GetHexInt = _swig_new_instance_method(_snap.TStr_GetHexInt)
    IsHexInt64 = _swig_new_instance_method(_snap.TStr_IsHexInt64)
    GetHexInt64 = _swig_new_instance_method(_snap.TStr_GetHexInt64)
    IsFlt = _swig_new_instance_method(_snap.TStr_IsFlt)
    GetFlt = _swig_new_instance_method(_snap.TStr_GetFlt)
    IsWord = _swig_new_instance_method(_snap.TStr_IsWord)
    IsWs = _swig_new_instance_method(_snap.TStr_IsWs)
    IsWcMatch = _swig_new_instance_method(_snap.TStr_IsWcMatch)
    GetWcMatch = _swig_new_instance_method(_snap.TStr_GetWcMatch)
    GetFPath = _swig_new_instance_method(_snap.TStr_GetFPath)
    GetFBase = _swig_new_instance_method(_snap.TStr_GetFBase)
    GetFMid = _swig_new_instance_method(_snap.TStr_GetFMid)
    GetFExt = _swig_new_instance_method(_snap.TStr_GetFExt)
    GetNrFPath = _swig_new_static_method(_snap.TStr_GetNrFPath)
    GetNrFMid = _swig_new_static_method(_snap.TStr_GetNrFMid)
    GetNrFExt = _swig_new_static_method(_snap.TStr_GetNrFExt)
    GetNrNumFExt = _swig_new_static_method(_snap.TStr_GetNrNumFExt)
    GetNrFNm = _swig_new_static_method(_snap.TStr_GetNrFNm)
    GetNrAbsFPath = _swig_new_static_method(_snap.TStr_GetNrAbsFPath)
    IsAbsFPath = _swig_new_static_method(_snap.TStr_IsAbsFPath)
    PutFExt = _swig_new_static_method(_snap.TStr_PutFExt)
    PutFExtIfEmpty = _swig_new_static_method(_snap.TStr_PutFExtIfEmpty)
    PutFBase = _swig_new_static_method(_snap.TStr_PutFBase)
    PutFBaseIfEmpty = _swig_new_static_method(_snap.TStr_PutFBaseIfEmpty)
    AddToFMid = _swig_new_static_method(_snap.TStr_AddToFMid)
    GetNumFNm = _swig_new_static_method(_snap.TStr_GetNumFNm)
    GetFNmStr = _swig_new_static_method(_snap.TStr_GetFNmStr)
    LoadTxt = _swig_new_static_method(_snap.TStr_LoadTxt)
    SaveTxt = _swig_new_instance_method(_snap.TStr_SaveTxt)
    GetChStr = _swig_new_static_method(_snap.TStr_GetChStr)
    GetDChStr = _swig_new_static_method(_snap.TStr_GetDChStr)
    GetStr = _swig_new_static_method(_snap.TStr_GetStr)
    Fmt = _swig_new_static_method(_snap.TStr_Fmt)
    GetSpaceStr = _swig_new_static_method(_snap.TStr_GetSpaceStr)
    GetCStr = _swig_new_instance_method(_snap.TStr_GetCStr)
    MkClone = _swig_new_static_method(_snap.TStr_MkClone)
    GetNullStr = _swig_new_static_method(_snap.TStr_GetNullStr)

# Register TStr in _snap:
_snap.TStr_swigregister(TStr)
TStr_GetNrFPath = _snap.TStr_GetNrFPath
TStr_GetNrFMid = _snap.TStr_GetNrFMid
TStr_GetNrFExt = _snap.TStr_GetNrFExt
TStr_GetNrNumFExt = _snap.TStr_GetNrNumFExt
TStr_GetNrFNm = _snap.TStr_GetNrFNm
TStr_GetNrAbsFPath = _snap.TStr_GetNrAbsFPath
TStr_IsAbsFPath = _snap.TStr_IsAbsFPath
TStr_PutFExt = _snap.TStr_PutFExt
TStr_PutFExtIfEmpty = _snap.TStr_PutFExtIfEmpty
TStr_PutFBase = _snap.TStr_PutFBase
TStr_PutFBaseIfEmpty = _snap.TStr_PutFBaseIfEmpty
TStr_AddToFMid = _snap.TStr_AddToFMid
TStr_GetNumFNm = _snap.TStr_GetNumFNm
TStr_GetFNmStr = _snap.TStr_GetFNmStr
TStr_LoadTxt = _snap.TStr_LoadTxt
TStr_GetChStr = _snap.TStr_GetChStr
TStr_GetDChStr = _snap.TStr_GetDChStr
TStr_GetStr = _snap.TStr_GetStr
TStr_Fmt = _snap.TStr_Fmt
TStr_GetSpaceStr = _snap.TStr_GetSpaceStr
TStr_MkClone = _snap.TStr_MkClone
TStr_GetNullStr = _snap.TStr_GetNullStr

class TStrIn(object):
    r"""Proxy of C++ TStrIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Str):
        r"""
        __init__(TStrIn self, TStr _Str) -> TStrIn

        Parameters
        ----------
        _Str: TStr const &

        """
        _snap.TStrIn_swiginit(self, _snap.new_TStrIn(_Str))
    New = _swig_new_static_method(_snap.TStrIn_New)
    __swig_destroy__ = _snap.delete_TStrIn
    Eof = _swig_new_instance_method(_snap.TStrIn_Eof)
    Len = _swig_new_instance_method(_snap.TStrIn_Len)
    GetCh = _swig_new_instance_method(_snap.TStrIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TStrIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TStrIn_GetBf)
    Reset = _swig_new_instance_method(_snap.TStrIn_Reset)
    GetNextLnBf = _swig_new_instance_method(_snap.TStrIn_GetNextLnBf)

# Register TStrIn in _snap:
_snap.TStrIn_swigregister(TStrIn)
TStrIn_New = _snap.TStrIn_New

class TDbStr(object):
    r"""Proxy of C++ TDbStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Str1 = property(_snap.TDbStr_Str1_get, _snap.TDbStr_Str1_set, doc=r"""Str1 : TStr""")
    Str2 = property(_snap.TDbStr_Str2_get, _snap.TDbStr_Str2_set, doc=r"""Str2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TDbStr self) -> TDbStr
        __init__(TDbStr self, TDbStr DbStr) -> TDbStr

        Parameters
        ----------
        DbStr: TDbStr const &

        __init__(TDbStr self, TStr _Str1) -> TDbStr

        Parameters
        ----------
        _Str1: TStr const &

        __init__(TDbStr self, TStr _Str1, TStr _Str2) -> TDbStr

        Parameters
        ----------
        _Str1: TStr const &
        _Str2: TStr const &

        __init__(TDbStr self, TSIn SIn) -> TDbStr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TDbStr_swiginit(self, _snap.new_TDbStr(*args))
    Save = _swig_new_instance_method(_snap.TDbStr_Save)
    __eq__ = _swig_new_instance_method(_snap.TDbStr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TDbStr___lt__)
    GetStr = _swig_new_instance_method(_snap.TDbStr_GetStr)
    GetPrimHashCd = _swig_new_instance_method(_snap.TDbStr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TDbStr_GetSecHashCd)
    Empty = _swig_new_instance_method(_snap.TDbStr_Empty)
    Filled = _swig_new_instance_method(_snap.TDbStr_Filled)
    __swig_destroy__ = _snap.delete_TDbStr

# Register TDbStr in _snap:
_snap.TDbStr_swigregister(TDbStr)

class TStrPool(object):
    r"""Proxy of C++ TStrPool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPool self, uint const & MxBfLen=0, uint const & _GrowBy=16*1024*1024) -> TStrPool

        Parameters
        ----------
        MxBfLen: uint const &
        _GrowBy: uint const &

        __init__(TStrPool self, TSIn SIn, bool LoadCompact=True) -> TStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        __init__(TStrPool self, TStrPool Pool) -> TStrPool

        Parameters
        ----------
        Pool: TStrPool const &

        """
        _snap.TStrPool_swiginit(self, _snap.new_TStrPool(*args))
    __swig_destroy__ = _snap.delete_TStrPool
    New = _swig_new_static_method(_snap.TStrPool_New)
    Load = _swig_new_static_method(_snap.TStrPool_Load)
    Save = _swig_new_instance_method(_snap.TStrPool_Save)
    Len = _swig_new_instance_method(_snap.TStrPool_Len)
    Size = _swig_new_instance_method(_snap.TStrPool_Size)
    Empty = _swig_new_instance_method(_snap.TStrPool_Empty)
    __call__ = _swig_new_instance_method(_snap.TStrPool___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPool_GetMemUsed)
    AddStr = _swig_new_instance_method(_snap.TStrPool_AddStr)
    GetStr = _swig_new_instance_method(_snap.TStrPool_GetStr)
    GetCStr = _swig_new_instance_method(_snap.TStrPool_GetCStr)
    Clr = _swig_new_instance_method(_snap.TStrPool_Clr)
    Cmp = _swig_new_instance_method(_snap.TStrPool_Cmp)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrPool_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrPool_GetSecHashCd)
    LoadShM = _swig_new_static_method(_snap.TStrPool_LoadShM)

# Register TStrPool in _snap:
_snap.TStrPool_swigregister(TStrPool)
TStrPool_New = _snap.TStrPool_New
TStrPool_Load = _snap.TStrPool_Load
TStrPool_LoadShM = _snap.TStrPool_LoadShM

class TStrPool64(object):
    r"""Proxy of C++ TStrPool64 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPool64 self, ::TSize _MxBfL=0, ::TSize _GrowBy=16*1024*1024) -> TStrPool64

        Parameters
        ----------
        _MxBfL: ::TSize
        _GrowBy: ::TSize

        __init__(TStrPool64 self, TStrPool64 StrPool) -> TStrPool64

        Parameters
        ----------
        StrPool: TStrPool64 const &

        __init__(TStrPool64 self, TSIn SIn, bool LoadCompact=True) -> TStrPool64

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        """
        _snap.TStrPool64_swiginit(self, _snap.new_TStrPool64(*args))
    __swig_destroy__ = _snap.delete_TStrPool64
    Save = _swig_new_instance_method(_snap.TStrPool64_Save)
    New = _swig_new_static_method(_snap.TStrPool64_New)
    Load = _swig_new_static_method(_snap.TStrPool64_Load)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPool64_GetMemUsed)
    Empty = _swig_new_instance_method(_snap.TStrPool64_Empty)
    Len = _swig_new_instance_method(_snap.TStrPool64_Len)
    Reserved = _swig_new_instance_method(_snap.TStrPool64_Reserved)
    Clr = _swig_new_instance_method(_snap.TStrPool64_Clr)
    Cmp = _swig_new_instance_method(_snap.TStrPool64_Cmp)
    AddStr = _swig_new_instance_method(_snap.TStrPool64_AddStr)
    GetStr = _swig_new_instance_method(_snap.TStrPool64_GetStr)

# Register TStrPool64 in _snap:
_snap.TStrPool64_swigregister(TStrPool64)
TStrPool64_New = _snap.TStrPool64_New
TStrPool64_Load = _snap.TStrPool64_Load

class TVoid(object):
    r"""Proxy of C++ TVoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TVoid self) -> TVoid
        __init__(TVoid self, TSIn arg2) -> TVoid

        Parameters
        ----------
        arg2: TSIn &

        """
        _snap.TVoid_swiginit(self, _snap.new_TVoid(*args))
    Save = _swig_new_instance_method(_snap.TVoid_Save)
    __eq__ = _swig_new_instance_method(_snap.TVoid___eq__)
    __lt__ = _swig_new_instance_method(_snap.TVoid___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TVoid_GetMemUsed)
    __swig_destroy__ = _snap.delete_TVoid

# Register TVoid in _snap:
_snap.TVoid_swigregister(TVoid)

class TBool(object):
    r"""Proxy of C++ TBool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TBool_Val_get, _snap.TBool_Val_set, doc=r"""Val : bool""")
    Rnd = property(_snap.TBool_Rnd_get, _snap.TBool_Rnd_set, doc=r"""Rnd : TRnd""")

    def __nonzero__(self):
        return _snap.TBool___nonzero__(self)
    __bool__ = __nonzero__



    def __init__(self, *args):
        r"""
        __init__(TBool self) -> TBool
        __init__(TBool self, bool const & _Val) -> TBool

        Parameters
        ----------
        _Val: bool const &

        __init__(TBool self, TSIn SIn) -> TBool

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBool_swiginit(self, _snap.new_TBool(*args))
    Load = _swig_new_instance_method(_snap.TBool_Load)
    Save = _swig_new_instance_method(_snap.TBool_Save)
    __eq__ = _swig_new_instance_method(_snap.TBool___eq__)
    __lt__ = _swig_new_instance_method(_snap.TBool___lt__)
    __call__ = _swig_new_instance_method(_snap.TBool___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TBool_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TBool_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TBool_GetSecHashCd)
    GetRnd = _swig_new_static_method(_snap.TBool_GetRnd)
    GetStr = _swig_new_static_method(_snap.TBool_GetStr)
    GetYNStr = _swig_new_static_method(_snap.TBool_GetYNStr)
    GetYesNoStr = _swig_new_static_method(_snap.TBool_GetYesNoStr)
    Get01Str = _swig_new_static_method(_snap.TBool_Get01Str)
    IsValStr = _swig_new_static_method(_snap.TBool_IsValStr)
    GetValFromStr = _swig_new_static_method(_snap.TBool_GetValFromStr)
    __swig_destroy__ = _snap.delete_TBool

# Register TBool in _snap:
_snap.TBool_swigregister(TBool)
TBool.Mn = _snap.cvar.TBool_Mn
TBool.Mx = _snap.cvar.TBool_Mx
TBool.Vals = _snap.cvar.TBool_Vals
TBool.FalseStr = _snap.cvar.TBool_FalseStr
TBool.TrueStr = _snap.cvar.TBool_TrueStr
TBool.NStr = _snap.cvar.TBool_NStr
TBool.YStr = _snap.cvar.TBool_YStr
TBool.NoStr = _snap.cvar.TBool_NoStr
TBool.YesStr = _snap.cvar.TBool_YesStr
TBool_GetRnd = _snap.TBool_GetRnd
TBool_GetStr = _snap.TBool_GetStr
TBool_GetYNStr = _snap.TBool_GetYNStr
TBool_GetYesNoStr = _snap.TBool_GetYesNoStr
TBool_Get01Str = _snap.TBool_Get01Str
TBool_IsValStr = _snap.TBool_IsValStr
TBool_GetValFromStr = _snap.TBool_GetValFromStr

class TCh(object):
    r"""Proxy of C++ TCh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TCh_Val_get, _snap.TCh_Val_set, doc=r"""Val : char""")

    def __init__(self, *args):
        r"""
        __init__(TCh self) -> TCh
        __init__(TCh self, char const & _Val) -> TCh

        Parameters
        ----------
        _Val: char const &

        __init__(TCh self, TSIn SIn) -> TCh

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TCh_swiginit(self, _snap.new_TCh(*args))
    Load = _swig_new_instance_method(_snap.TCh_Load)
    Save = _swig_new_instance_method(_snap.TCh_Save)
    __eq__ = _swig_new_instance_method(_snap.TCh___eq__)
    __lt__ = _swig_new_instance_method(_snap.TCh___lt__)
    __call__ = _swig_new_instance_method(_snap.TCh___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TCh_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TCh_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TCh_GetSecHashCd)
    IsHashCh = _swig_new_static_method(_snap.TCh_IsHashCh)
    IsWs = _swig_new_static_method(_snap.TCh_IsWs)
    IsAlpha = _swig_new_static_method(_snap.TCh_IsAlpha)
    IsNum = _swig_new_static_method(_snap.TCh_IsNum)
    IsAlNum = _swig_new_static_method(_snap.TCh_IsAlNum)
    GetNum = _swig_new_static_method(_snap.TCh_GetNum)
    IsHex = _swig_new_static_method(_snap.TCh_IsHex)
    GetHex = _swig_new_static_method(_snap.TCh_GetHex)
    GetHexCh = _swig_new_static_method(_snap.TCh_GetHexCh)
    IsUc = _swig_new_static_method(_snap.TCh_IsUc)
    GetUc = _swig_new_static_method(_snap.TCh_GetUc)
    GetUsFromYuAscii = _swig_new_static_method(_snap.TCh_GetUsFromYuAscii)
    GetStr = _swig_new_static_method(_snap.TCh_GetStr)
    __swig_destroy__ = _snap.delete_TCh

# Register TCh in _snap:
_snap.TCh_swigregister(TCh)
TCh.Mn = _snap.cvar.TCh_Mn
TCh.Mx = _snap.cvar.TCh_Mx
TCh.Vals = _snap.cvar.TCh_Vals
TCh.NullCh = _snap.cvar.TCh_NullCh
TCh.TabCh = _snap.cvar.TCh_TabCh
TCh.LfCh = _snap.cvar.TCh_LfCh
TCh.CrCh = _snap.cvar.TCh_CrCh
TCh.EofCh = _snap.cvar.TCh_EofCh
TCh.HashCh = _snap.cvar.TCh_HashCh
TCh_IsHashCh = _snap.TCh_IsHashCh
TCh_IsWs = _snap.TCh_IsWs
TCh_IsAlpha = _snap.TCh_IsAlpha
TCh_IsNum = _snap.TCh_IsNum
TCh_IsAlNum = _snap.TCh_IsAlNum
TCh_GetNum = _snap.TCh_GetNum
TCh_IsHex = _snap.TCh_IsHex
TCh_GetHex = _snap.TCh_GetHex
TCh_GetHexCh = _snap.TCh_GetHexCh
TCh_IsUc = _snap.TCh_IsUc
TCh_GetUc = _snap.TCh_GetUc
TCh_GetUsFromYuAscii = _snap.TCh_GetUsFromYuAscii
TCh_GetStr = _snap.TCh_GetStr

class TUCh(object):
    r"""Proxy of C++ TUCh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TUCh_Val_get, _snap.TUCh_Val_set, doc=r"""Val : uchar""")

    def __init__(self, *args):
        r"""
        __init__(TUCh self) -> TUCh
        __init__(TUCh self, uchar const & _Val) -> TUCh

        Parameters
        ----------
        _Val: uchar const &

        __init__(TUCh self, TSIn SIn) -> TUCh

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUCh_swiginit(self, _snap.new_TUCh(*args))
    Save = _swig_new_instance_method(_snap.TUCh_Save)
    __eq__ = _swig_new_instance_method(_snap.TUCh___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUCh___lt__)
    __call__ = _swig_new_instance_method(_snap.TUCh___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TUCh_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUCh_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUCh_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TUCh

# Register TUCh in _snap:
_snap.TUCh_swigregister(TUCh)
TUCh.Mn = _snap.cvar.TUCh_Mn
TUCh.Mx = _snap.cvar.TUCh_Mx
TUCh.Vals = _snap.cvar.TUCh_Vals

class TSInt(object):
    r"""Proxy of C++ TSInt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TSInt_Val_get, _snap.TSInt_Val_set, doc=r"""Val : int16""")

    def __init__(self, *args):
        r"""
        __init__(TSInt self) -> TSInt
        __init__(TSInt self, int16 const & _Val) -> TSInt

        Parameters
        ----------
        _Val: int16 const &

        __init__(TSInt self, TSIn SIn) -> TSInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TSInt_swiginit(self, _snap.new_TSInt(*args))
    Load = _swig_new_instance_method(_snap.TSInt_Load)
    Save = _swig_new_instance_method(_snap.TSInt_Save)
    GetPrimHashCd = _swig_new_instance_method(_snap.TSInt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TSInt_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TSInt

# Register TSInt in _snap:
_snap.TSInt_swigregister(TSInt)

class TInt(object):
    r"""Proxy of C++ TInt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TInt_Val_get, _snap.TInt_Val_set, doc=r"""Val : int""")
    Rnd = property(_snap.TInt_Rnd_get, _snap.TInt_Rnd_set, doc=r"""Rnd : TRnd""")

    def __init__(self, *args):
        r"""
        __init__(TInt self) -> TInt
        __init__(TInt self, int const & _Val) -> TInt

        Parameters
        ----------
        _Val: int const &

        __init__(TInt self, TSIn SIn) -> TInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TInt_swiginit(self, _snap.new_TInt(*args))
    Load = _swig_new_instance_method(_snap.TInt_Load)
    Save = _swig_new_instance_method(_snap.TInt_Save)
    __eq__ = _swig_new_instance_method(_snap.TInt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TInt___ne__)
    __lt__ = _swig_new_instance_method(_snap.TInt___lt__)
    __call__ = _swig_new_instance_method(_snap.TInt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TInt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TInt___isub__)
    GetMemUsed = _swig_new_instance_method(_snap.TInt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TInt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TInt_GetSecHashCd)
    Abs = _swig_new_static_method(_snap.TInt_Abs)
    Sign = _swig_new_static_method(_snap.TInt_Sign)
    Swap = _swig_new_static_method(_snap.TInt_Swap)
    GetRnd = _swig_new_static_method(_snap.TInt_GetRnd)
    IsOdd = _swig_new_static_method(_snap.TInt_IsOdd)
    IsEven = _swig_new_static_method(_snap.TInt_IsEven)
    GetMn = _swig_new_static_method(_snap.TInt_GetMn)
    GetMx = _swig_new_static_method(_snap.TInt_GetMx)
    GetInRng = _swig_new_static_method(_snap.TInt_GetInRng)
    GetHexStr = _swig_new_static_method(_snap.TInt_GetHexStr)
    GetKiloStr = _swig_new_static_method(_snap.TInt_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TInt_GetMegaStr)
    SaveFrugalInt = _swig_new_static_method(_snap.TInt_SaveFrugalInt)
    LoadFrugalInt = _swig_new_static_method(_snap.TInt_LoadFrugalInt)
    TestFrugalInt = _swig_new_static_method(_snap.TInt_TestFrugalInt)
    SaveFrugalIntV = _swig_new_static_method(_snap.TInt_SaveFrugalIntV)
    LoadFrugalIntV = _swig_new_static_method(_snap.TInt_LoadFrugalIntV)
    __swig_destroy__ = _snap.delete_TInt

# Register TInt in _snap:
_snap.TInt_swigregister(TInt)
TInt.Mn = _snap.cvar.TInt_Mn
TInt.Mx = _snap.cvar.TInt_Mx
TInt.Kilo = _snap.cvar.TInt_Kilo
TInt.Mega = _snap.cvar.TInt_Mega
TInt.Giga = _snap.cvar.TInt_Giga
TInt_Abs = _snap.TInt_Abs
TInt_Sign = _snap.TInt_Sign
TInt_Swap = _snap.TInt_Swap
TInt_GetRnd = _snap.TInt_GetRnd
TInt_IsOdd = _snap.TInt_IsOdd
TInt_IsEven = _snap.TInt_IsEven
TInt_GetMn = _snap.TInt_GetMn
TInt_GetMx = _snap.TInt_GetMx
TInt_GetInRng = _snap.TInt_GetInRng
TInt_GetHexStr = _snap.TInt_GetHexStr
TInt_GetKiloStr = _snap.TInt_GetKiloStr
TInt_GetMegaStr = _snap.TInt_GetMegaStr
TInt_SaveFrugalInt = _snap.TInt_SaveFrugalInt
TInt_LoadFrugalInt = _snap.TInt_LoadFrugalInt
TInt_TestFrugalInt = _snap.TInt_TestFrugalInt
TInt_SaveFrugalIntV = _snap.TInt_SaveFrugalIntV
TInt_LoadFrugalIntV = _snap.TInt_LoadFrugalIntV

class TUInt(object):
    r"""Proxy of C++ TUInt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TUInt_Val_get, _snap.TUInt_Val_set, doc=r"""Val : uint""")
    Rnd = property(_snap.TUInt_Rnd_get, _snap.TUInt_Rnd_set, doc=r"""Rnd : TRnd""")

    def __init__(self, *args):
        r"""
        __init__(TUInt self) -> TUInt
        __init__(TUInt self, uint const & _Val) -> TUInt

        Parameters
        ----------
        _Val: uint const &

        __init__(TUInt self, TSIn SIn) -> TUInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt_swiginit(self, _snap.new_TUInt(*args))
    Load = _swig_new_instance_method(_snap.TUInt_Load)
    Save = _swig_new_instance_method(_snap.TUInt_Save)
    __call__ = _swig_new_instance_method(_snap.TUInt___call__)
    __invert__ = _swig_new_instance_method(_snap.TUInt___invert__)
    __iand__ = _swig_new_instance_method(_snap.TUInt___iand__)
    __ior__ = _swig_new_instance_method(_snap.TUInt___ior__)
    __ixor__ = _swig_new_instance_method(_snap.TUInt___ixor__)
    __irshift__ = _swig_new_instance_method(_snap.TUInt___irshift__)
    __ilshift__ = _swig_new_instance_method(_snap.TUInt___ilshift__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt_GetSecHashCd)
    GetRnd = _swig_new_static_method(_snap.TUInt_GetRnd)
    GetStr = _swig_new_static_method(_snap.TUInt_GetStr)
    GetKiloStr = _swig_new_static_method(_snap.TUInt_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TUInt_GetMegaStr)
    JavaUIntToCppUInt = _swig_new_static_method(_snap.TUInt_JavaUIntToCppUInt)
    IsIpStr = _swig_new_static_method(_snap.TUInt_IsIpStr)
    GetUIntFromIpStr = _swig_new_static_method(_snap.TUInt_GetUIntFromIpStr)
    GetStrFromIpUInt = _swig_new_static_method(_snap.TUInt_GetStrFromIpUInt)
    IsIpv6Str = _swig_new_static_method(_snap.TUInt_IsIpv6Str)
    __swig_destroy__ = _snap.delete_TUInt

# Register TUInt in _snap:
_snap.TUInt_swigregister(TUInt)
TUInt.Mn = _snap.cvar.TUInt_Mn
TUInt.Mx = _snap.cvar.TUInt_Mx
TUInt_GetRnd = _snap.TUInt_GetRnd
TUInt_GetStr = _snap.TUInt_GetStr
TUInt_GetKiloStr = _snap.TUInt_GetKiloStr
TUInt_GetMegaStr = _snap.TUInt_GetMegaStr
TUInt_JavaUIntToCppUInt = _snap.TUInt_JavaUIntToCppUInt
TUInt_IsIpStr = _snap.TUInt_IsIpStr
TUInt_GetUIntFromIpStr = _snap.TUInt_GetUIntFromIpStr
TUInt_GetStrFromIpUInt = _snap.TUInt_GetStrFromIpUInt
TUInt_IsIpv6Str = _snap.TUInt_IsIpv6Str

class TUInt64(object):
    r"""Proxy of C++ TUInt64 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TUInt64_Val_get, _snap.TUInt64_Val_set, doc=r"""Val : uint64""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64 self) -> TUInt64
        __init__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters
        ----------
        Int: TUInt64 const &

        __init__(TUInt64 self, uint64 const & Int) -> TUInt64

        Parameters
        ----------
        Int: uint64 const &

        __init__(TUInt64 self, uint const & MsVal, uint const & LsVal) -> TUInt64

        Parameters
        ----------
        MsVal: uint const &
        LsVal: uint const &

        __init__(TUInt64 self, void * Pt) -> TUInt64

        Parameters
        ----------
        Pt: void *

        __init__(TUInt64 self, TSIn SIn) -> TUInt64

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64_swiginit(self, _snap.new_TUInt64(*args))
    Load = _swig_new_instance_method(_snap.TUInt64_Load)
    Save = _swig_new_instance_method(_snap.TUInt64_Save)
    __iadd__ = _swig_new_instance_method(_snap.TUInt64___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TUInt64___isub__)
    __imul__ = _swig_new_instance_method(_snap.TUInt64___imul__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64_GetSecHashCd)
    GetMsVal = _swig_new_instance_method(_snap.TUInt64_GetMsVal)
    GetLsVal = _swig_new_instance_method(_snap.TUInt64_GetLsVal)
    GetStr = _swig_new_static_method(_snap.TUInt64_GetStr)
    GetHexStr = _swig_new_static_method(_snap.TUInt64_GetHexStr)
    GetKiloStr = _swig_new_static_method(_snap.TUInt64_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TUInt64_GetMegaStr)
    __swig_destroy__ = _snap.delete_TUInt64

# Register TUInt64 in _snap:
_snap.TUInt64_swigregister(TUInt64)
TUInt64.Mn = _snap.cvar.TUInt64_Mn
TUInt64.Mx = _snap.cvar.TUInt64_Mx
TUInt64_GetStr = _snap.TUInt64_GetStr
TUInt64_GetHexStr = _snap.TUInt64_GetHexStr
TUInt64_GetKiloStr = _snap.TUInt64_GetKiloStr
TUInt64_GetMegaStr = _snap.TUInt64_GetMegaStr

class TFlt(object):
    r"""Proxy of C++ TFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TFlt_Val_get, _snap.TFlt_Val_set, doc=r"""Val : double""")
    Rnd = property(_snap.TFlt_Rnd_get, _snap.TFlt_Rnd_set, doc=r"""Rnd : TRnd""")

    def __init__(self, *args):
        r"""
        __init__(TFlt self) -> TFlt
        __init__(TFlt self, double const & _Val) -> TFlt

        Parameters
        ----------
        _Val: double const &

        __init__(TFlt self, TSIn SIn) -> TFlt

        Parameters
        ----------
        SIn: TSIn &

        __init__(TFlt self, TSIn SIn, bool const & IsTxt) -> TFlt

        Parameters
        ----------
        SIn: TSIn &
        IsTxt: bool const &

        """
        _snap.TFlt_swiginit(self, _snap.new_TFlt(*args))
    Load = _swig_new_instance_method(_snap.TFlt_Load)
    Save = _swig_new_instance_method(_snap.TFlt_Save)
    __eq__ = _swig_new_instance_method(_snap.TFlt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TFlt___ne__)
    __call__ = _swig_new_instance_method(_snap.TFlt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TFlt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TFlt___isub__)
    __imul__ = _swig_new_instance_method(_snap.TFlt___imul__)

    def __itruediv__(self, *args):
        return _snap.TFlt___itruediv__(self, *args)
    __idiv__ = __itruediv__


    GetMemUsed = _swig_new_instance_method(_snap.TFlt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFlt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFlt_GetSecHashCd)
    Abs = _swig_new_static_method(_snap.TFlt_Abs)
    Sign = _swig_new_static_method(_snap.TFlt_Sign)
    Round = _swig_new_static_method(_snap.TFlt_Round)
    GetRnd = _swig_new_static_method(_snap.TFlt_GetRnd)
    Eq6 = _swig_new_static_method(_snap.TFlt_Eq6)
    GetMn = _swig_new_static_method(_snap.TFlt_GetMn)
    GetMx = _swig_new_static_method(_snap.TFlt_GetMx)
    GetInRng = _swig_new_static_method(_snap.TFlt_GetInRng)
    IsNum = _swig_new_instance_method(_snap.TFlt_IsNum)
    IsNan = _swig_new_instance_method(_snap.TFlt_IsNan)
    GetStr = _swig_new_static_method(_snap.TFlt_GetStr)
    GetPrcStr = _swig_new_static_method(_snap.TFlt_GetPrcStr)
    GetKiloStr = _swig_new_static_method(_snap.TFlt_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TFlt_GetMegaStr)
    GetGigaStr = _swig_new_static_method(_snap.TFlt_GetGigaStr)
    __swig_destroy__ = _snap.delete_TFlt

# Register TFlt in _snap:
_snap.TFlt_swigregister(TFlt)
TFlt.Mn = _snap.cvar.TFlt_Mn
TFlt.Mx = _snap.cvar.TFlt_Mx
TFlt.NInf = _snap.cvar.TFlt_NInf
TFlt.PInf = _snap.cvar.TFlt_PInf
TFlt.Eps = _snap.cvar.TFlt_Eps
TFlt.EpsHalf = _snap.cvar.TFlt_EpsHalf
TFlt_Abs = _snap.TFlt_Abs
TFlt_Sign = _snap.TFlt_Sign
TFlt_Round = _snap.TFlt_Round
TFlt_GetRnd = _snap.TFlt_GetRnd
TFlt_Eq6 = _snap.TFlt_Eq6
TFlt_GetMn = _snap.TFlt_GetMn
TFlt_GetMx = _snap.TFlt_GetMx
TFlt_GetInRng = _snap.TFlt_GetInRng
TFlt_GetStr = _snap.TFlt_GetStr
TFlt_GetPrcStr = _snap.TFlt_GetPrcStr
TFlt_GetKiloStr = _snap.TFlt_GetKiloStr
TFlt_GetMegaStr = _snap.TFlt_GetMegaStr
TFlt_GetGigaStr = _snap.TFlt_GetGigaStr

class TAscFlt(TFlt):
    r"""Proxy of C++ TAscFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAscFlt self) -> TAscFlt
        __init__(TAscFlt self, double const & Val) -> TAscFlt

        Parameters
        ----------
        Val: double const &

        __init__(TAscFlt self, TSIn SIn) -> TAscFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFlt_swiginit(self, _snap.new_TAscFlt(*args))
    Save = _swig_new_instance_method(_snap.TAscFlt_Save)
    __swig_destroy__ = _snap.delete_TAscFlt

# Register TAscFlt in _snap:
_snap.TAscFlt_swigregister(TAscFlt)

class TSFlt(object):
    r"""Proxy of C++ TSFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TSFlt_Val_get, _snap.TSFlt_Val_set, doc=r"""Val : sdouble""")

    def __init__(self, *args):
        r"""
        __init__(TSFlt self) -> TSFlt
        __init__(TSFlt self, sdouble const & _Val) -> TSFlt

        Parameters
        ----------
        _Val: sdouble const &

        __init__(TSFlt self, TSIn SIn) -> TSFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TSFlt_swiginit(self, _snap.new_TSFlt(*args))
    Save = _swig_new_instance_method(_snap.TSFlt_Save)
    __eq__ = _swig_new_instance_method(_snap.TSFlt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TSFlt___ne__)
    __lt__ = _swig_new_instance_method(_snap.TSFlt___lt__)
    __call__ = _swig_new_instance_method(_snap.TSFlt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TSFlt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TSFlt___isub__)
    __imul__ = _swig_new_instance_method(_snap.TSFlt___imul__)

    def __itruediv__(self, *args):
        return _snap.TSFlt___itruediv__(self, *args)
    __idiv__ = __itruediv__


    GetMemUsed = _swig_new_instance_method(_snap.TSFlt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TSFlt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TSFlt_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TSFlt

# Register TSFlt in _snap:
_snap.TSFlt_swigregister(TSFlt)
TSFlt.Mn = _snap.cvar.TSFlt_Mn
TSFlt.Mx = _snap.cvar.TSFlt_Mx

class TLFlt(object):
    r"""Proxy of C++ TLFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TLFlt_Val_get, _snap.TLFlt_Val_set, doc=r"""Val : ldouble""")

    def __init__(self, *args):
        r"""
        __init__(TLFlt self) -> TLFlt
        __init__(TLFlt self, ldouble const & _Val) -> TLFlt

        Parameters
        ----------
        _Val: ldouble const &

        __init__(TLFlt self, TSIn SIn) -> TLFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TLFlt_swiginit(self, _snap.new_TLFlt(*args))
    Save = _swig_new_instance_method(_snap.TLFlt_Save)
    __eq__ = _swig_new_instance_method(_snap.TLFlt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TLFlt___ne__)
    __lt__ = _swig_new_instance_method(_snap.TLFlt___lt__)
    __call__ = _swig_new_instance_method(_snap.TLFlt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TLFlt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TLFlt___isub__)
    GetMemUsed = _swig_new_instance_method(_snap.TLFlt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TLFlt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TLFlt_GetSecHashCd)
    GetStr = _swig_new_static_method(_snap.TLFlt_GetStr)
    __swig_destroy__ = _snap.delete_TLFlt

# Register TLFlt in _snap:
_snap.TLFlt_swigregister(TLFlt)
TLFlt.Mn = _snap.cvar.TLFlt_Mn
TLFlt.Mx = _snap.cvar.TLFlt_Mx
TLFlt_GetStr = _snap.TLFlt_GetStr

class TFltRect(object):
    r"""Proxy of C++ TFltRect class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MnX = property(_snap.TFltRect_MnX_get, _snap.TFltRect_MnX_set, doc=r"""MnX : TFlt""")
    MnY = property(_snap.TFltRect_MnY_get, _snap.TFltRect_MnY_set, doc=r"""MnY : TFlt""")
    MxX = property(_snap.TFltRect_MxX_get, _snap.TFltRect_MxX_set, doc=r"""MxX : TFlt""")
    MxY = property(_snap.TFltRect_MxY_get, _snap.TFltRect_MxY_set, doc=r"""MxY : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TFltRect self) -> TFltRect
        __init__(TFltRect self, TFltRect FltRect) -> TFltRect

        Parameters
        ----------
        FltRect: TFltRect const &

        __init__(TFltRect self, double const & _MnX, double const & _MnY, double const & _MxX, double const & _MxY) -> TFltRect

        Parameters
        ----------
        _MnX: double const &
        _MnY: double const &
        _MxX: double const &
        _MxY: double const &

        __init__(TFltRect self, TSIn SIn) -> TFltRect

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltRect_swiginit(self, _snap.new_TFltRect(*args))
    Save = _swig_new_instance_method(_snap.TFltRect_Save)
    GetMnX = _swig_new_instance_method(_snap.TFltRect_GetMnX)
    GetMnY = _swig_new_instance_method(_snap.TFltRect_GetMnY)
    GetMxX = _swig_new_instance_method(_snap.TFltRect_GetMxX)
    GetMxY = _swig_new_instance_method(_snap.TFltRect_GetMxY)
    GetXLen = _swig_new_instance_method(_snap.TFltRect_GetXLen)
    GetYLen = _swig_new_instance_method(_snap.TFltRect_GetYLen)
    GetXCenter = _swig_new_instance_method(_snap.TFltRect_GetXCenter)
    GetYCenter = _swig_new_instance_method(_snap.TFltRect_GetYCenter)
    IsXYIn = _swig_new_instance_method(_snap.TFltRect_IsXYIn)
    Intersection = _swig_new_static_method(_snap.TFltRect_Intersection)
    GetStr = _swig_new_instance_method(_snap.TFltRect_GetStr)
    __swig_destroy__ = _snap.delete_TFltRect

# Register TFltRect in _snap:
_snap.TFltRect_swigregister(TFltRect)
TFltRect_Intersection = _snap.TFltRect_Intersection

class TCs(object):
    r"""Proxy of C++ TCs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCs self) -> TCs
        __init__(TCs self, TCs Cs) -> TCs

        Parameters
        ----------
        Cs: TCs const &

        __init__(TCs self, int const & Int) -> TCs

        Parameters
        ----------
        Int: int const &

        """
        _snap.TCs_swiginit(self, _snap.new_TCs(*args))
    __eq__ = _swig_new_instance_method(_snap.TCs___eq__)
    __iadd__ = _swig_new_instance_method(_snap.TCs___iadd__)
    Get = _swig_new_instance_method(_snap.TCs_Get)
    GetCsFromBf = _swig_new_static_method(_snap.TCs_GetCsFromBf)
    __swig_destroy__ = _snap.delete_TCs

# Register TCs in _snap:
_snap.TCs_swigregister(TCs)
TCs_GetCsFromBf = _snap.TCs_GetCsFromBf

class TSOutMnp(object):
    r"""Proxy of C++ TSOutMnp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_snap.TSOutMnp___call__)
    __swig_destroy__ = _snap.delete_TSOutMnp

# Register TSOutMnp in _snap:
_snap.TSOutMnp_swigregister(TSOutMnp)

class TSBase(object):
    r"""Proxy of C++ TSBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Nm):
        r"""
        __init__(TSBase self, TSStr Nm) -> TSBase

        Parameters
        ----------
        Nm: TSStr const &

        """
        _snap.TSBase_swiginit(self, _snap.new_TSBase(Nm))
    __swig_destroy__ = _snap.delete_TSBase
    GetSNm = _swig_new_instance_method(_snap.TSBase_GetSNm)

# Register TSBase in _snap:
_snap.TSBase_swigregister(TSBase)

class TSIn(TSBase):
    r"""Proxy of C++ TSIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSIn
    Eof = _swig_new_instance_method(_snap.TSIn_Eof)
    Len = _swig_new_instance_method(_snap.TSIn_Len)
    GetCh = _swig_new_instance_method(_snap.TSIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TSIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TSIn_GetBf)
    GetNextLnBf = _swig_new_instance_method(_snap.TSIn_GetNextLnBf)
    Reset = _swig_new_instance_method(_snap.TSIn_Reset)
    IsFastMode = _swig_new_instance_method(_snap.TSIn_IsFastMode)
    SetFastMode = _swig_new_instance_method(_snap.TSIn_SetFastMode)
    LoadCs = _swig_new_instance_method(_snap.TSIn_LoadCs)
    LoadBf = _swig_new_instance_method(_snap.TSIn_LoadBf)
    LoadNewBf = _swig_new_instance_method(_snap.TSIn_LoadNewBf)
    Load = _swig_new_instance_method(_snap.TSIn_Load)
    __rshift__ = _swig_new_instance_method(_snap.TSIn___rshift__)
    GetNextLn = _swig_new_instance_method(_snap.TSIn_GetNextLn)

# Register TSIn in _snap:
_snap.TSIn_swigregister(TSIn)
TSIn.StdIn = _snap.cvar.TSIn_StdIn

class TSOut(TSBase):
    r"""Proxy of C++ TSOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSOut
    EnableLnTrunc = _swig_new_instance_method(_snap.TSOut_EnableLnTrunc)
    DisableLnTrunc = _swig_new_instance_method(_snap.TSOut_DisableLnTrunc)
    PutBf = _swig_new_instance_method(_snap.TSOut_PutBf)
    Flush = _swig_new_instance_method(_snap.TSOut_Flush)
    GetFileId = _swig_new_instance_method(_snap.TSOut_GetFileId)
    PutMem = _swig_new_instance_method(_snap.TSOut_PutMem)
    PutCh = _swig_new_instance_method(_snap.TSOut_PutCh)
    PutBool = _swig_new_instance_method(_snap.TSOut_PutBool)
    PutInt = _swig_new_instance_method(_snap.TSOut_PutInt)
    PutUInt = _swig_new_instance_method(_snap.TSOut_PutUInt)
    PutFlt = _swig_new_instance_method(_snap.TSOut_PutFlt)
    PutStr = _swig_new_instance_method(_snap.TSOut_PutStr)
    PutStrLn = _swig_new_instance_method(_snap.TSOut_PutStrLn)
    PutStrFmt = _swig_new_instance_method(_snap.TSOut_PutStrFmt)
    PutStrFmtLn = _swig_new_instance_method(_snap.TSOut_PutStrFmtLn)
    PutIndent = _swig_new_instance_method(_snap.TSOut_PutIndent)
    PutLn = _swig_new_instance_method(_snap.TSOut_PutLn)
    PutDosLn = _swig_new_instance_method(_snap.TSOut_PutDosLn)
    PutSep = _swig_new_instance_method(_snap.TSOut_PutSep)
    PutSepLn = _swig_new_instance_method(_snap.TSOut_PutSepLn)
    SaveCs = _swig_new_instance_method(_snap.TSOut_SaveCs)
    SaveBf = _swig_new_instance_method(_snap.TSOut_SaveBf)
    Save = _swig_new_instance_method(_snap.TSOut_Save)
    __lshift__ = _swig_new_instance_method(_snap.TSOut___lshift__)

# Register TSOut in _snap:
_snap.TSOut_swigregister(TSOut)
TSOut.StdOut = _snap.cvar.TSOut_StdOut

class TSInOut(TSIn, TSOut):
    r"""Proxy of C++ TSInOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSInOut
    SetPos = _swig_new_instance_method(_snap.TSInOut_SetPos)
    MovePos = _swig_new_instance_method(_snap.TSInOut_MovePos)
    GetPos = _swig_new_instance_method(_snap.TSInOut_GetPos)
    GetSize = _swig_new_instance_method(_snap.TSInOut_GetSize)
    Clr = _swig_new_instance_method(_snap.TSInOut_Clr)

# Register TSInOut in _snap:
_snap.TSInOut_swigregister(TSInOut)

class TStdIn(TSIn):
    r"""Proxy of C++ TStdIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdIn self) -> TStdIn"""
        _snap.TStdIn_swiginit(self, _snap.new_TStdIn())
    New = _swig_new_static_method(_snap.TStdIn_New)
    __swig_destroy__ = _snap.delete_TStdIn

# Register TStdIn in _snap:
_snap.TStdIn_swigregister(TStdIn)
TStdIn_New = _snap.TStdIn_New

class TStdOut(TSOut):
    r"""Proxy of C++ TStdOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdOut self) -> TStdOut"""
        _snap.TStdOut_swiginit(self, _snap.new_TStdOut())
    New = _swig_new_static_method(_snap.TStdOut_New)
    __swig_destroy__ = _snap.delete_TStdOut

# Register TStdOut in _snap:
_snap.TStdOut_swigregister(TStdOut)
TStdOut_New = _snap.TStdOut_New

class TFIn(TSIn):
    r"""Proxy of C++ TFIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFIn self, TStr FNm) -> TFIn

        Parameters
        ----------
        FNm: TStr const &

        __init__(TFIn self, TStr FNm, bool & OpenedP) -> TFIn

        Parameters
        ----------
        FNm: TStr const &
        OpenedP: bool &

        """
        _snap.TFIn_swiginit(self, _snap.new_TFIn(*args))
    New = _swig_new_static_method(_snap.TFIn_New)
    __swig_destroy__ = _snap.delete_TFIn

# Register TFIn in _snap:
_snap.TFIn_swigregister(TFIn)
TFIn_New = _snap.TFIn_New

class TFOut(TSOut):
    r"""Proxy of C++ TFOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFOut self, TStr _FNm, bool const & Append=False) -> TFOut

        Parameters
        ----------
        _FNm: TStr const &
        Append: bool const &

        __init__(TFOut self, TStr _FNm, bool const & Append, bool & OpenedP) -> TFOut

        Parameters
        ----------
        _FNm: TStr const &
        Append: bool const &
        OpenedP: bool &

        """
        _snap.TFOut_swiginit(self, _snap.new_TFOut(*args))
    New = _swig_new_static_method(_snap.TFOut_New)
    __swig_destroy__ = _snap.delete_TFOut

# Register TFOut in _snap:
_snap.TFOut_swigregister(TFOut)
TFOut_New = _snap.TFOut_New

faUndef = _snap.faUndef

faCreate = _snap.faCreate

faUpdate = _snap.faUpdate

faAppend = _snap.faAppend

faRdOnly = _snap.faRdOnly

faRestore = _snap.faRestore

class TShMIn(TSIn):
    r"""Proxy of C++ TShMIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TShMIn self, TStr Str) -> TShMIn

        Parameters
        ----------
        Str: TStr const &

        __init__(TShMIn self, void * _Bf, TSize const & _BfL) -> TShMIn

        Parameters
        ----------
        _Bf: void *
        _BfL: TSize const &

        """
        _snap.TShMIn_swiginit(self, _snap.new_TShMIn(*args))
    __swig_destroy__ = _snap.delete_TShMIn
    getCursor = _swig_new_instance_method(_snap.TShMIn_getCursor)
    LoadAndAdvance = _swig_new_instance_method(_snap.TShMIn_LoadAndAdvance)
    AdvanceCursor = _swig_new_instance_method(_snap.TShMIn_AdvanceCursor)
    CloseMapping = _swig_new_instance_method(_snap.TShMIn_CloseMapping)

# Register TShMIn in _snap:
_snap.TShMIn_swigregister(TShMIn)

class TMIn(TSIn):
    r"""Proxy of C++ TMIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMIn self, void const * _Bf, uint64 const & _BfL, bool const & TakeBf=False) -> TMIn

        Parameters
        ----------
        _Bf: void const *
        _BfL: uint64 const &
        TakeBf: bool const &

        __init__(TMIn self, TSIn SIn) -> TMIn

        Parameters
        ----------
        SIn: TSIn &

        __init__(TMIn self, char const * CStr) -> TMIn

        Parameters
        ----------
        CStr: char const *

        __init__(TMIn self, TStr Str, bool FromFile) -> TMIn

        Parameters
        ----------
        Str: TStr const &
        FromFile: bool

        __init__(TMIn self, TChA ChA) -> TMIn

        Parameters
        ----------
        ChA: TChA const &

        """
        _snap.TMIn_swiginit(self, _snap.new_TMIn(*args))
    New = _swig_new_static_method(_snap.TMIn_New)
    __swig_destroy__ = _snap.delete_TMIn
    GetBfC = _swig_new_instance_method(_snap.TMIn_GetBfC)
    GetBfL = _swig_new_instance_method(_snap.TMIn_GetBfL)
    SetBfC = _swig_new_instance_method(_snap.TMIn_SetBfC)
    CountNewLinesInRange = _swig_new_instance_method(_snap.TMIn_CountNewLinesInRange)
    GetLineStartPos = _swig_new_instance_method(_snap.TMIn_GetLineStartPos)
    GetLineEndPos = _swig_new_instance_method(_snap.TMIn_GetLineEndPos)
    GetLine = _swig_new_instance_method(_snap.TMIn_GetLine)
    SkipCommentLines = _swig_new_instance_method(_snap.TMIn_SkipCommentLines)
    GetBfAddr = _swig_new_instance_method(_snap.TMIn_GetBfAddr)

# Register TMIn in _snap:
_snap.TMIn_swigregister(TMIn)
TMIn_New = _snap.TMIn_New

class TMOut(TSOut):
    r"""Proxy of C++ TMOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.TMOut_New)

    def __init__(self, *args):
        r"""
        __init__(TMOut self, int const & _MxBfL=1024) -> TMOut

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TMOut self, char * _Bf, int const & _MxBfL) -> TMOut

        Parameters
        ----------
        _Bf: char *
        _MxBfL: int const &

        """
        _snap.TMOut_swiginit(self, _snap.new_TMOut(*args))
    __swig_destroy__ = _snap.delete_TMOut
    AppendBf = _swig_new_instance_method(_snap.TMOut_AppendBf)
    Len = _swig_new_instance_method(_snap.TMOut_Len)
    Clr = _swig_new_instance_method(_snap.TMOut_Clr)
    GetCh = _swig_new_instance_method(_snap.TMOut_GetCh)
    GetAsStr = _swig_new_instance_method(_snap.TMOut_GetAsStr)
    CutBf = _swig_new_instance_method(_snap.TMOut_CutBf)
    GetSIn = _swig_new_instance_method(_snap.TMOut_GetSIn)
    GetBfAddr = _swig_new_instance_method(_snap.TMOut_GetBfAddr)
    IsCrLfLn = _swig_new_instance_method(_snap.TMOut_IsCrLfLn)
    GetCrLfLn = _swig_new_instance_method(_snap.TMOut_GetCrLfLn)
    IsEolnLn = _swig_new_instance_method(_snap.TMOut_IsEolnLn)
    GetEolnLn = _swig_new_instance_method(_snap.TMOut_GetEolnLn)
    MkEolnLn = _swig_new_instance_method(_snap.TMOut_MkEolnLn)

# Register TMOut in _snap:
_snap.TMOut_swigregister(TMOut)
TMOut_New = _snap.TMOut_New

class TChRet(object):
    r"""Proxy of C++ TChRet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _SIn, _EofCh=0):
        r"""
        __init__(TChRet self, PSIn const & _SIn, char const & _EofCh=0) -> TChRet

        Parameters
        ----------
        _SIn: PSIn const &
        _EofCh: char const &

        """
        _snap.TChRet_swiginit(self, _snap.new_TChRet(_SIn, _EofCh))
    Eof = _swig_new_instance_method(_snap.TChRet_Eof)
    GetCh = _swig_new_instance_method(_snap.TChRet_GetCh)
    __call__ = _swig_new_instance_method(_snap.TChRet___call__)
    __swig_destroy__ = _snap.delete_TChRet

# Register TChRet in _snap:
_snap.TChRet_swigregister(TChRet)

class TLnRet(object):
    r"""Proxy of C++ TLnRet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _SIn):
        r"""
        __init__(TLnRet self, PSIn const & _SIn) -> TLnRet

        Parameters
        ----------
        _SIn: PSIn const &

        """
        _snap.TLnRet_swiginit(self, _snap.new_TLnRet(_SIn))
    NextLn = _swig_new_instance_method(_snap.TLnRet_NextLn)
    __swig_destroy__ = _snap.delete_TLnRet

# Register TLnRet in _snap:
_snap.TLnRet_swigregister(TLnRet)

class TFile(object):
    r"""Proxy of C++ TFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Exists = _swig_new_static_method(_snap.TFile_Exists)
    Del = _swig_new_static_method(_snap.TFile_Del)
    DelWc = _swig_new_static_method(_snap.TFile_DelWc)
    Rename = _swig_new_static_method(_snap.TFile_Rename)
    GetUniqueFNm = _swig_new_static_method(_snap.TFile_GetUniqueFNm)

    def __init__(self):
        r"""__init__(TFile self) -> TFile"""
        _snap.TFile_swiginit(self, _snap.new_TFile())
    __swig_destroy__ = _snap.delete_TFile

# Register TFile in _snap:
_snap.TFile_swigregister(TFile)
TFile.TxtFExt = _snap.cvar.TFile_TxtFExt
TFile.HtmlFExt = _snap.cvar.TFile_HtmlFExt
TFile.HtmFExt = _snap.cvar.TFile_HtmFExt
TFile.GifFExt = _snap.cvar.TFile_GifFExt
TFile.JarFExt = _snap.cvar.TFile_JarFExt
TFile_Exists = _snap.TFile_Exists
TFile_Del = _snap.TFile_Del
TFile_DelWc = _snap.TFile_DelWc
TFile_Rename = _snap.TFile_Rename
TFile_GetUniqueFNm = _snap.TFile_GetUniqueFNm

InfoNotify = _snap.InfoNotify
WarnNotify = _snap.WarnNotify
ErrNotify = _snap.ErrNotify
StatNotify = _snap.StatNotify
ntInfo = _snap.ntInfo

ntWarn = _snap.ntWarn

ntErr = _snap.ntErr

ntStat = _snap.ntStat

class TNotify(object):
    r"""Proxy of C++ TNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TNotify self) -> TNotify"""
        _snap.TNotify_swiginit(self, _snap.new_TNotify())
    __swig_destroy__ = _snap.delete_TNotify
    OnNotifyFmt = _swig_new_instance_method(_snap.TNotify_OnNotifyFmt)
    OnStatusFmt = _swig_new_instance_method(_snap.TNotify_OnStatusFmt)
    OnLnFmt = _swig_new_instance_method(_snap.TNotify_OnLnFmt)
    OnTxtFmt = _swig_new_instance_method(_snap.TNotify_OnTxtFmt)
    GetTypeStr = _swig_new_static_method(_snap.TNotify_GetTypeStr)
    OnNotify = _swig_new_static_method(_snap.TNotify_OnNotify)
    OnStatus = _swig_new_static_method(_snap.TNotify_OnStatus)
    OnLn = _swig_new_static_method(_snap.TNotify_OnLn)
    OnTxt = _swig_new_static_method(_snap.TNotify_OnTxt)
    DfOnNotify = _swig_new_static_method(_snap.TNotify_DfOnNotify)

# Register TNotify in _snap:
_snap.TNotify_swigregister(TNotify)
TNotify_GetTypeStr = _snap.TNotify_GetTypeStr
TNotify_OnNotify = _snap.TNotify_OnNotify
TNotify_OnStatus = _snap.TNotify_OnStatus
TNotify_OnLn = _snap.TNotify_OnLn
TNotify_OnTxt = _snap.TNotify_OnTxt
TNotify_DfOnNotify = _snap.TNotify_DfOnNotify
TNotify.NullNotify = _snap.cvar.TNotify_NullNotify
TNotify.StdNotify = _snap.cvar.TNotify_StdNotify
TNotify.StdErrNotify = _snap.cvar.TNotify_StdErrNotify

class TNullNotify(TNotify):
    r"""Proxy of C++ TNullNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TNullNotify self) -> TNullNotify"""
        _snap.TNullNotify_swiginit(self, _snap.new_TNullNotify())
    New = _swig_new_static_method(_snap.TNullNotify_New)
    __swig_destroy__ = _snap.delete_TNullNotify

# Register TNullNotify in _snap:
_snap.TNullNotify_swigregister(TNullNotify)
TNullNotify_New = _snap.TNullNotify_New

class TCallbackNotify(TNotify):
    r"""Proxy of C++ TCallbackNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _CallbackF):
        r"""
        __init__(TCallbackNotify self, TCallbackF const & _CallbackF) -> TCallbackNotify

        Parameters
        ----------
        _CallbackF: TCallbackF const &

        """
        _snap.TCallbackNotify_swiginit(self, _snap.new_TCallbackNotify(_CallbackF))
    New = _swig_new_static_method(_snap.TCallbackNotify_New)
    __swig_destroy__ = _snap.delete_TCallbackNotify

# Register TCallbackNotify in _snap:
_snap.TCallbackNotify_swigregister(TCallbackNotify)
TCallbackNotify_New = _snap.TCallbackNotify_New

class TNativeCallbackNotify(TNotify):
    r"""Proxy of C++ TNativeCallbackNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _CallbackF):
        r"""
        __init__(TNativeCallbackNotify self, TNativeCallbackF const & _CallbackF) -> TNativeCallbackNotify

        Parameters
        ----------
        _CallbackF: TNativeCallbackF const &

        """
        _snap.TNativeCallbackNotify_swiginit(self, _snap.new_TNativeCallbackNotify(_CallbackF))
    New = _swig_new_static_method(_snap.TNativeCallbackNotify_New)
    __swig_destroy__ = _snap.delete_TNativeCallbackNotify

# Register TNativeCallbackNotify in _snap:
_snap.TNativeCallbackNotify_swigregister(TNativeCallbackNotify)
TNativeCallbackNotify_New = _snap.TNativeCallbackNotify_New

class TStdNotify(TNotify):
    r"""Proxy of C++ TStdNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdNotify self) -> TStdNotify"""
        _snap.TStdNotify_swiginit(self, _snap.new_TStdNotify())
    New = _swig_new_static_method(_snap.TStdNotify_New)
    __swig_destroy__ = _snap.delete_TStdNotify

# Register TStdNotify in _snap:
_snap.TStdNotify_swigregister(TStdNotify)
TStdNotify_New = _snap.TStdNotify_New

class TStdErrNotify(TNotify):
    r"""Proxy of C++ TStdErrNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdErrNotify self) -> TStdErrNotify"""
        _snap.TStdErrNotify_swiginit(self, _snap.new_TStdErrNotify())
    New = _swig_new_static_method(_snap.TStdErrNotify_New)
    __swig_destroy__ = _snap.delete_TStdErrNotify

# Register TStdErrNotify in _snap:
_snap.TStdErrNotify_swigregister(TStdErrNotify)
TStdErrNotify_New = _snap.TStdErrNotify_New

class TLogNotify(TNotify):
    r"""Proxy of C++ TLogNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Notify):
        r"""
        __init__(TLogNotify self, PNotify const & _Notify) -> TLogNotify

        Parameters
        ----------
        _Notify: PNotify const &

        """
        _snap.TLogNotify_swiginit(self, _snap.new_TLogNotify(_Notify))
    New = _swig_new_static_method(_snap.TLogNotify_New)
    __swig_destroy__ = _snap.delete_TLogNotify

# Register TLogNotify in _snap:
_snap.TLogNotify_swigregister(TLogNotify)
TLogNotify_New = _snap.TLogNotify_New

class TExcept(object):
    r"""Proxy of C++ TExcept class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TExcept self, TStr _MsgStr) -> TExcept

        Parameters
        ----------
        _MsgStr: TStr const &

        __init__(TExcept self, TStr _MsgStr, TStr _LocStr) -> TExcept

        Parameters
        ----------
        _MsgStr: TStr const &
        _LocStr: TStr const &

        """
        _snap.TExcept_swiginit(self, _snap.new_TExcept(*args))
    New = _swig_new_static_method(_snap.TExcept_New)
    __swig_destroy__ = _snap.delete_TExcept
    GetMsgStr = _swig_new_instance_method(_snap.TExcept_GetMsgStr)
    GetLocStr = _swig_new_instance_method(_snap.TExcept_GetLocStr)
    GetStr = _swig_new_instance_method(_snap.TExcept_GetStr)
    OnExceptF = property(_snap.TExcept_OnExceptF_get, _snap.TExcept_OnExceptF_set, doc=r"""OnExceptF : TExcept::TOnExceptF""")
    IsOnExceptF = _swig_new_static_method(_snap.TExcept_IsOnExceptF)
    PutOnExceptF = _swig_new_static_method(_snap.TExcept_PutOnExceptF)
    GetOnExceptF = _swig_new_static_method(_snap.TExcept_GetOnExceptF)
    Throw = _swig_new_static_method(_snap.TExcept_Throw)
    ThrowFull = _swig_new_static_method(_snap.TExcept_ThrowFull)

# Register TExcept in _snap:
_snap.TExcept_swigregister(TExcept)
TExcept_New = _snap.TExcept_New
TExcept_IsOnExceptF = _snap.TExcept_IsOnExceptF
TExcept_PutOnExceptF = _snap.TExcept_PutOnExceptF
TExcept_GetOnExceptF = _snap.TExcept_GetOnExceptF
TExcept_Throw = _snap.TExcept_Throw
TExcept_ThrowFull = _snap.TExcept_ThrowFull

gfUndef = _snap.gfUndef

gfDirected = _snap.gfDirected

gfMultiGraph = _snap.gfMultiGraph

gfNodeDat = _snap.gfNodeDat

gfEdgeDat = _snap.gfEdgeDat

gfSources = _snap.gfSources

gfBipart = _snap.gfBipart

gfMx = _snap.gfMx

atInt = _snap.atInt

atFlt = _snap.atFlt

atStr = _snap.atStr

GetFlagStr = _snap.GetFlagStr
class TUnionFind(object):
    r"""Proxy of C++ TUnionFind class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Parent = _swig_new_instance_method(_snap.TUnionFind_Parent)
    Rank = _swig_new_instance_method(_snap.TUnionFind_Rank)

    def __init__(self, *args):
        r"""
        __init__(TUnionFind self) -> TUnionFind
        __init__(TUnionFind self, int const & ExpectKeys) -> TUnionFind

        Parameters
        ----------
        ExpectKeys: int const &

        __init__(TUnionFind self, TUnionFind UnionFind) -> TUnionFind

        Parameters
        ----------
        UnionFind: TUnionFind const &

        """
        _snap.TUnionFind_swiginit(self, _snap.new_TUnionFind(*args))
    Len = _swig_new_instance_method(_snap.TUnionFind_Len)
    IsKey = _swig_new_instance_method(_snap.TUnionFind_IsKey)
    GetKeyI = _swig_new_instance_method(_snap.TUnionFind_GetKeyI)
    Find = _swig_new_instance_method(_snap.TUnionFind_Find)
    Add = _swig_new_instance_method(_snap.TUnionFind_Add)
    Union = _swig_new_instance_method(_snap.TUnionFind_Union)
    IsSameSet = _swig_new_instance_method(_snap.TUnionFind_IsSameSet)
    Dump = _swig_new_instance_method(_snap.TUnionFind_Dump)
    __swig_destroy__ = _snap.delete_TUnionFind

# Register TUnionFind in _snap:
_snap.TUnionFind_swigregister(TUnionFind)

class TGUtil(object):
    r"""Proxy of C++ TGUtil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetCdf = _swig_new_static_method(_snap.TGUtil_GetCdf)
    GetCCdf = _swig_new_static_method(_snap.TGUtil_GetCCdf)
    GetPdf = _swig_new_static_method(_snap.TGUtil_GetPdf)
    Normalize = _swig_new_static_method(_snap.TGUtil_Normalize)
    MakeExpBins = _swig_new_static_method(_snap.TGUtil_MakeExpBins)

    def __init__(self):
        r"""__init__(TGUtil self) -> TGUtil"""
        _snap.TGUtil_swiginit(self, _snap.new_TGUtil())
    __swig_destroy__ = _snap.delete_TGUtil

# Register TGUtil in _snap:
_snap.TGUtil_swigregister(TGUtil)
TGUtil_GetCdf = _snap.TGUtil_GetCdf
TGUtil_GetCCdf = _snap.TGUtil_GetCCdf
TGUtil_GetPdf = _snap.TGUtil_GetPdf
TGUtil_Normalize = _snap.TGUtil_Normalize
TGUtil_MakeExpBins = _snap.TGUtil_MakeExpBins

class TStrUtil(object):
    r"""Proxy of C++ TStrUtil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetXmlTagVal = _swig_new_static_method(_snap.TStrUtil_GetXmlTagVal)
    GetXmlTagNmVal = _swig_new_static_method(_snap.TStrUtil_GetXmlTagNmVal)
    GetXmlTagNmVal2 = _swig_new_static_method(_snap.TStrUtil_GetXmlTagNmVal2)
    GetDomNm = _swig_new_static_method(_snap.TStrUtil_GetDomNm)
    GetDomNm2 = _swig_new_static_method(_snap.TStrUtil_GetDomNm2)
    GetWebsiteNm = _swig_new_static_method(_snap.TStrUtil_GetWebsiteNm)
    GetNormalizedUrl = _swig_new_static_method(_snap.TStrUtil_GetNormalizedUrl)
    StripEnd = _swig_new_static_method(_snap.TStrUtil_StripEnd)
    GetShorStr = _swig_new_static_method(_snap.TStrUtil_GetShorStr)
    GetCleanStr = _swig_new_static_method(_snap.TStrUtil_GetCleanStr)
    GetCleanWrdStr = _swig_new_static_method(_snap.TStrUtil_GetCleanWrdStr)
    CountWords = _swig_new_static_method(_snap.TStrUtil_CountWords)
    SplitWords = _swig_new_static_method(_snap.TStrUtil_SplitWords)
    SplitOnCh = _swig_new_static_method(_snap.TStrUtil_SplitOnCh)
    SplitLines = _swig_new_static_method(_snap.TStrUtil_SplitLines)
    SplitSentences = _swig_new_static_method(_snap.TStrUtil_SplitSentences)
    RemoveHtmlTags = _swig_new_static_method(_snap.TStrUtil_RemoveHtmlTags)
    IsLatinStr = _swig_new_static_method(_snap.TStrUtil_IsLatinStr)
    GetWIdV = _swig_new_static_method(_snap.TStrUtil_GetWIdV)
    GetAddWIdV = _swig_new_static_method(_snap.TStrUtil_GetAddWIdV)
    GetTmFromStr = _swig_new_static_method(_snap.TStrUtil_GetTmFromStr)
    GetStdName = _swig_new_static_method(_snap.TStrUtil_GetStdName)
    GetStdNameV = _swig_new_static_method(_snap.TStrUtil_GetStdNameV)

    def __init__(self):
        r"""__init__(TStrUtil self) -> TStrUtil"""
        _snap.TStrUtil_swiginit(self, _snap.new_TStrUtil())
    __swig_destroy__ = _snap.delete_TStrUtil

# Register TStrUtil in _snap:
_snap.TStrUtil_swigregister(TStrUtil)
TStrUtil_GetXmlTagVal = _snap.TStrUtil_GetXmlTagVal
TStrUtil_GetXmlTagNmVal = _snap.TStrUtil_GetXmlTagNmVal
TStrUtil_GetXmlTagNmVal2 = _snap.TStrUtil_GetXmlTagNmVal2
TStrUtil_GetDomNm = _snap.TStrUtil_GetDomNm
TStrUtil_GetDomNm2 = _snap.TStrUtil_GetDomNm2
TStrUtil_GetWebsiteNm = _snap.TStrUtil_GetWebsiteNm
TStrUtil_GetNormalizedUrl = _snap.TStrUtil_GetNormalizedUrl
TStrUtil_StripEnd = _snap.TStrUtil_StripEnd
TStrUtil_GetShorStr = _snap.TStrUtil_GetShorStr
TStrUtil_GetCleanStr = _snap.TStrUtil_GetCleanStr
TStrUtil_GetCleanWrdStr = _snap.TStrUtil_GetCleanWrdStr
TStrUtil_CountWords = _snap.TStrUtil_CountWords
TStrUtil_SplitWords = _snap.TStrUtil_SplitWords
TStrUtil_SplitOnCh = _snap.TStrUtil_SplitOnCh
TStrUtil_SplitLines = _snap.TStrUtil_SplitLines
TStrUtil_SplitSentences = _snap.TStrUtil_SplitSentences
TStrUtil_RemoveHtmlTags = _snap.TStrUtil_RemoveHtmlTags
TStrUtil_IsLatinStr = _snap.TStrUtil_IsLatinStr
TStrUtil_GetWIdV = _snap.TStrUtil_GetWIdV
TStrUtil_GetAddWIdV = _snap.TStrUtil_GetAddWIdV
TStrUtil_GetTmFromStr = _snap.TStrUtil_GetTmFromStr
TStrUtil_GetStdName = _snap.TStrUtil_GetStdName
TStrUtil_GetStdNameV = _snap.TStrUtil_GetStdNameV

class TStopwatch(object):
    r"""Proxy of C++ TStopwatch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LoadTables = _snap.TStopwatch_LoadTables
    
    Preprocess = _snap.TStopwatch_Preprocess
    
    ConstructGraph = _snap.TStopwatch_ConstructGraph
    
    Compute = _snap.TStopwatch_Compute
    
    Postprocess = _snap.TStopwatch_Postprocess
    
    StoreOutputs = _snap.TStopwatch_StoreOutputs
    
    AllocateColumnCopies = _snap.TStopwatch_AllocateColumnCopies
    
    CopyColumns = _snap.TStopwatch_CopyColumns
    
    Sort = _snap.TStopwatch_Sort
    
    Group = _snap.TStopwatch_Group
    
    MergeNeighborhoods = _snap.TStopwatch_MergeNeighborhoods
    
    AddNeighborhoods = _snap.TStopwatch_AddNeighborhoods
    
    AddEdges = _snap.TStopwatch_AddEdges
    
    Sort2 = _snap.TStopwatch_Sort2
    
    ComputeOffset = _snap.TStopwatch_ComputeOffset
    
    ComputeETypes = _snap.TStopwatch_ComputeETypes
    
    EstimateSizes = _snap.TStopwatch_EstimateSizes
    
    InitGraph = _snap.TStopwatch_InitGraph
    
    ExtractNbrETypes = _snap.TStopwatch_ExtractNbrETypes
    
    CopyNodes = _snap.TStopwatch_CopyNodes
    
    PopulateGraph = _snap.TStopwatch_PopulateGraph
    
    ExtractEdges = _snap.TStopwatch_ExtractEdges
    
    BuildSubgraph = _snap.TStopwatch_BuildSubgraph
    
    NEXPS = _snap.TStopwatch_NEXPS
    
    GetInstance = _swig_new_static_method(_snap.TStopwatch_GetInstance)
    Start = _swig_new_instance_method(_snap.TStopwatch_Start)
    Stop = _swig_new_instance_method(_snap.TStopwatch_Stop)
    Cnt = _swig_new_instance_method(_snap.TStopwatch_Cnt)
    Sum = _swig_new_instance_method(_snap.TStopwatch_Sum)
    Avg = _swig_new_instance_method(_snap.TStopwatch_Avg)
    Max = _swig_new_instance_method(_snap.TStopwatch_Max)
    Min = _swig_new_instance_method(_snap.TStopwatch_Min)
    __swig_destroy__ = _snap.delete_TStopwatch

# Register TStopwatch in _snap:
_snap.TStopwatch_swigregister(TStopwatch)
TStopwatch_GetInstance = _snap.TStopwatch_GetInstance

class TBigStrPool(object):
    r"""Proxy of C++ TBigStrPool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TBigStrPool self, TSize MxBfLen=0, uint _GrowBy=16*1024*1024) -> TBigStrPool

        Parameters
        ----------
        MxBfLen: TSize
        _GrowBy: uint

        __init__(TBigStrPool self, TSIn SIn, bool LoadCompact=True) -> TBigStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        __init__(TBigStrPool self, TBigStrPool Pool) -> TBigStrPool

        Parameters
        ----------
        Pool: TBigStrPool const &

        """
        _snap.TBigStrPool_swiginit(self, _snap.new_TBigStrPool(*args))
    __swig_destroy__ = _snap.delete_TBigStrPool
    New = _swig_new_static_method(_snap.TBigStrPool_New)
    Load = _swig_new_static_method(_snap.TBigStrPool_Load)
    LoadShM = _swig_new_static_method(_snap.TBigStrPool_LoadShM)
    Save = _swig_new_instance_method(_snap.TBigStrPool_Save)
    GetStrs = _swig_new_instance_method(_snap.TBigStrPool_GetStrs)
    Len = _swig_new_instance_method(_snap.TBigStrPool_Len)
    Size = _swig_new_instance_method(_snap.TBigStrPool_Size)
    Empty = _swig_new_instance_method(_snap.TBigStrPool_Empty)
    __call__ = _swig_new_instance_method(_snap.TBigStrPool___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TBigStrPool_GetMemUsed)
    AddStr = _swig_new_instance_method(_snap.TBigStrPool_AddStr)
    GetStr = _swig_new_instance_method(_snap.TBigStrPool_GetStr)
    GetCStr = _swig_new_instance_method(_snap.TBigStrPool_GetCStr)
    GetStrFromOffset = _swig_new_instance_method(_snap.TBigStrPool_GetStrFromOffset)
    GetCStrFromOffset = _swig_new_instance_method(_snap.TBigStrPool_GetCStrFromOffset)
    Clr = _swig_new_instance_method(_snap.TBigStrPool_Clr)
    Cmp = _swig_new_instance_method(_snap.TBigStrPool_Cmp)
    GetPrimHashCd = _swig_new_instance_method(_snap.TBigStrPool_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TBigStrPool_GetSecHashCd)

# Register TBigStrPool in _snap:
_snap.TBigStrPool_swigregister(TBigStrPool)
TBigStrPool_New = _snap.TBigStrPool_New
TBigStrPool_Load = _snap.TBigStrPool_Load
TBigStrPool_LoadShM = _snap.TBigStrPool_LoadShM

class TStrHashF_OldGLib(object):
    r"""Proxy of C++ TStrHashF_OldGLib class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetPrimHashCd = _swig_new_static_method(_snap.TStrHashF_OldGLib_GetPrimHashCd)
    GetSecHashCd = _swig_new_static_method(_snap.TStrHashF_OldGLib_GetSecHashCd)

    def __init__(self):
        r"""__init__(TStrHashF_OldGLib self) -> TStrHashF_OldGLib"""
        _snap.TStrHashF_OldGLib_swiginit(self, _snap.new_TStrHashF_OldGLib())
    __swig_destroy__ = _snap.delete_TStrHashF_OldGLib

# Register TStrHashF_OldGLib in _snap:
_snap.TStrHashF_OldGLib_swigregister(TStrHashF_OldGLib)
TStrHashF_OldGLib_GetPrimHashCd = _snap.TStrHashF_OldGLib_GetPrimHashCd
TStrHashF_OldGLib_GetSecHashCd = _snap.TStrHashF_OldGLib_GetSecHashCd

class TStrHashF_Md5(object):
    r"""Proxy of C++ TStrHashF_Md5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetPrimHashCd = _swig_new_static_method(_snap.TStrHashF_Md5_GetPrimHashCd)
    GetSecHashCd = _swig_new_static_method(_snap.TStrHashF_Md5_GetSecHashCd)

    def __init__(self):
        r"""__init__(TStrHashF_Md5 self) -> TStrHashF_Md5"""
        _snap.TStrHashF_Md5_swiginit(self, _snap.new_TStrHashF_Md5())
    __swig_destroy__ = _snap.delete_TStrHashF_Md5

# Register TStrHashF_Md5 in _snap:
_snap.TStrHashF_Md5_swigregister(TStrHashF_Md5)
TStrHashF_Md5_GetPrimHashCd = _snap.TStrHashF_Md5_GetPrimHashCd
TStrHashF_Md5_GetSecHashCd = _snap.TStrHashF_Md5_GetSecHashCd

class TStrHashF_DJB(object):
    r"""Proxy of C++ TStrHashF_DJB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetPrimHashCd = _swig_new_static_method(_snap.TStrHashF_DJB_GetPrimHashCd)
    GetSecHashCd = _swig_new_static_method(_snap.TStrHashF_DJB_GetSecHashCd)

    def __init__(self):
        r"""__init__(TStrHashF_DJB self) -> TStrHashF_DJB"""
        _snap.TStrHashF_DJB_swiginit(self, _snap.new_TStrHashF_DJB())
    __swig_destroy__ = _snap.delete_TStrHashF_DJB

# Register TStrHashF_DJB in _snap:
_snap.TStrHashF_DJB_swigregister(TStrHashF_DJB)
TStrHashF_DJB_GetPrimHashCd = _snap.TStrHashF_DJB_GetPrimHashCd
TStrHashF_DJB_GetSecHashCd = _snap.TStrHashF_DJB_GetSecHashCd

class TUNGraph(object):
    r"""Proxy of C++ TUNGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraph self) -> TUNGraph
        __init__(TUNGraph self, int const & Nodes, int const & Edges) -> TUNGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TUNGraph self, TUNGraph Graph) -> TUNGraph

        Parameters
        ----------
        Graph: TUNGraph const &

        __init__(TUNGraph self, TSIn SIn) -> TUNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUNGraph_swiginit(self, _snap.new_TUNGraph(*args))
    Save = _swig_new_instance_method(_snap.TUNGraph_Save)
    New = _swig_new_static_method(_snap.TUNGraph_New)
    Load = _swig_new_static_method(_snap.TUNGraph_Load)
    LoadShM = _swig_new_static_method(_snap.TUNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TUNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TUNGraph_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TUNGraph_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TUNGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TUNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TUNGraph_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TUNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TUNGraph_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TUNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.TUNGraph_AddEdge2)
    AddEdge = _swig_new_instance_method(_snap.TUNGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TUNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TUNGraph_IsEdge)
    GetRndNId = _swig_new_instance_method(_snap.TUNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TUNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TUNGraph_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TUNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TUNGraph_Clr)
    SortNodeAdjV = _swig_new_instance_method(_snap.TUNGraph_SortNodeAdjV)
    Reserve = _swig_new_instance_method(_snap.TUNGraph_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.TUNGraph_ReserveNIdDeg)
    Defrag = _swig_new_instance_method(_snap.TUNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TUNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TUNGraph_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TUNGraph_GetSmallGraph)
    BegNI = _swig_new_instance_method(_snap.TUNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TUNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TUNGraph_GetNI)
    BegEI = _swig_new_instance_method(_snap.TUNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TUNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TUNGraph_GetEI)
    __swig_destroy__ = _snap.delete_TUNGraph

# Register TUNGraph in _snap:
_snap.TUNGraph_swigregister(TUNGraph)
TUNGraph_New = _snap.TUNGraph_New
TUNGraph_Load = _snap.TUNGraph_Load
TUNGraph_LoadShM = _snap.TUNGraph_LoadShM
TUNGraph_GetSmallGraph = _snap.TUNGraph_GetSmallGraph

class TNGraph(object):
    r"""Proxy of C++ TNGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraph self) -> TNGraph
        __init__(TNGraph self, int const & Nodes, int const & Edges) -> TNGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TNGraph self, TNGraph Graph) -> TNGraph

        Parameters
        ----------
        Graph: TNGraph const &

        __init__(TNGraph self, TSIn SIn) -> TNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TNGraph_swiginit(self, _snap.new_TNGraph(*args))
    Save = _swig_new_instance_method(_snap.TNGraph_Save)
    New = _swig_new_static_method(_snap.TNGraph_New)
    Load = _swig_new_static_method(_snap.TNGraph_Load)
    LoadShM = _swig_new_static_method(_snap.TNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TNGraph_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TNGraph_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TNGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TNGraph_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TNGraph_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.TNGraph_AddEdge2)
    AddEdge = _swig_new_instance_method(_snap.TNGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TNGraph_IsEdge)
    GetRndNId = _swig_new_instance_method(_snap.TNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TNGraph_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TNGraph_Clr)
    Reserve = _swig_new_instance_method(_snap.TNGraph_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.TNGraph_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.TNGraph_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.TNGraph_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.TNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TNGraph_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TNGraph_GetSmallGraph)
    BegNI = _swig_new_instance_method(_snap.TNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TNGraph_GetNI)
    BegEI = _swig_new_instance_method(_snap.TNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TNGraph_GetEI)
    __swig_destroy__ = _snap.delete_TNGraph

# Register TNGraph in _snap:
_snap.TNGraph_swigregister(TNGraph)
TNGraph_New = _snap.TNGraph_New
TNGraph_Load = _snap.TNGraph_Load
TNGraph_LoadShM = _snap.TNGraph_LoadShM
TNGraph_GetSmallGraph = _snap.TNGraph_GetSmallGraph

class TNEGraph(object):
    r"""Proxy of C++ TNEGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEGraph self) -> TNEGraph
        __init__(TNEGraph self, int const & Nodes, int const & Edges) -> TNEGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TNEGraph self, TNEGraph Graph) -> TNEGraph

        Parameters
        ----------
        Graph: TNEGraph const &

        __init__(TNEGraph self, TSIn SIn) -> TNEGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TNEGraph_swiginit(self, _snap.new_TNEGraph(*args))
    Save = _swig_new_instance_method(_snap.TNEGraph_Save)
    New = _swig_new_static_method(_snap.TNEGraph_New)
    Load = _swig_new_static_method(_snap.TNEGraph_Load)
    HasFlag = _swig_new_instance_method(_snap.TNEGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TNEGraph_GetNodes)
    AddNode = _swig_new_instance_method(_snap.TNEGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TNEGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TNEGraph_IsNode)
    BegNI = _swig_new_instance_method(_snap.TNEGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TNEGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TNEGraph_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.TNEGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TNEGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.TNEGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TNEGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TNEGraph_IsEdge)
    GetEId = _swig_new_instance_method(_snap.TNEGraph_GetEId)
    BegEI = _swig_new_instance_method(_snap.TNEGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TNEGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TNEGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TNEGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TNEGraph_GetRndNI)
    GetRndEId = _swig_new_instance_method(_snap.TNEGraph_GetRndEId)
    GetRndEI = _swig_new_instance_method(_snap.TNEGraph_GetRndEI)
    GetNIdV = _swig_new_instance_method(_snap.TNEGraph_GetNIdV)
    GetEIdV = _swig_new_instance_method(_snap.TNEGraph_GetEIdV)
    Empty = _swig_new_instance_method(_snap.TNEGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TNEGraph_Clr)
    Reserve = _swig_new_instance_method(_snap.TNEGraph_Reserve)
    Defrag = _swig_new_instance_method(_snap.TNEGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TNEGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TNEGraph_Dump)
    __swig_destroy__ = _snap.delete_TNEGraph

# Register TNEGraph in _snap:
_snap.TNEGraph_swigregister(TNEGraph)
TNEGraph_New = _snap.TNEGraph_New
TNEGraph_Load = _snap.TNEGraph_Load

class TBPGraph(object):
    r"""Proxy of C++ TBPGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bgsUndef = _snap.TBPGraph_bgsUndef
    
    bgsLeft = _snap.TBPGraph_bgsLeft
    
    bgsRight = _snap.TBPGraph_bgsRight
    
    bgsBoth = _snap.TBPGraph_bgsBoth
    

    def __init__(self, *args):
        r"""
        __init__(TBPGraph self) -> TBPGraph
        __init__(TBPGraph self, int const & Nodes, int const & Edges) -> TBPGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TBPGraph self, TBPGraph BPGraph) -> TBPGraph

        Parameters
        ----------
        BPGraph: TBPGraph const &

        __init__(TBPGraph self, TSIn SIn) -> TBPGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBPGraph_swiginit(self, _snap.new_TBPGraph(*args))
    Save = _swig_new_instance_method(_snap.TBPGraph_Save)
    New = _swig_new_static_method(_snap.TBPGraph_New)
    Load = _swig_new_static_method(_snap.TBPGraph_Load)
    GetNodes = _swig_new_instance_method(_snap.TBPGraph_GetNodes)
    GetLNodes = _swig_new_instance_method(_snap.TBPGraph_GetLNodes)
    GetRNodes = _swig_new_instance_method(_snap.TBPGraph_GetRNodes)
    AddNode = _swig_new_instance_method(_snap.TBPGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TBPGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TBPGraph_IsNode)
    IsLNode = _swig_new_instance_method(_snap.TBPGraph_IsLNode)
    IsRNode = _swig_new_instance_method(_snap.TBPGraph_IsRNode)
    GetMxNId = _swig_new_instance_method(_snap.TBPGraph_GetMxNId)
    BegNI = _swig_new_instance_method(_snap.TBPGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TBPGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TBPGraph_GetNI)
    BegLNI = _swig_new_instance_method(_snap.TBPGraph_BegLNI)
    EndLNI = _swig_new_instance_method(_snap.TBPGraph_EndLNI)
    BegRNI = _swig_new_instance_method(_snap.TBPGraph_BegRNI)
    EndRNI = _swig_new_instance_method(_snap.TBPGraph_EndRNI)
    GetEdges = _swig_new_instance_method(_snap.TBPGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.TBPGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TBPGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TBPGraph_IsEdge)
    BegEI = _swig_new_instance_method(_snap.TBPGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TBPGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TBPGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TBPGraph_GetRndNId)
    GetRndLNId = _swig_new_instance_method(_snap.TBPGraph_GetRndLNId)
    GetRndRNId = _swig_new_instance_method(_snap.TBPGraph_GetRndRNId)
    GetRndNI = _swig_new_instance_method(_snap.TBPGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TBPGraph_GetNIdV)
    GetLNIdV = _swig_new_instance_method(_snap.TBPGraph_GetLNIdV)
    GetRNIdV = _swig_new_instance_method(_snap.TBPGraph_GetRNIdV)
    Empty = _swig_new_instance_method(_snap.TBPGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TBPGraph_Clr)
    Reserve = _swig_new_instance_method(_snap.TBPGraph_Reserve)
    Defrag = _swig_new_instance_method(_snap.TBPGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TBPGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TBPGraph_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TBPGraph_GetSmallGraph)
    __swig_destroy__ = _snap.delete_TBPGraph

# Register TBPGraph in _snap:
_snap.TBPGraph_swigregister(TBPGraph)
TBPGraph_New = _snap.TBPGraph_New
TBPGraph_Load = _snap.TBPGraph_Load
TBPGraph_GetSmallGraph = _snap.TBPGraph_GetSmallGraph

class TNEANet(object):
    r"""Proxy of C++ TNEANet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CRef = property(_snap.TNEANet_CRef_get, doc=r"""CRef : TCRef""")

    def __init__(self, *args):
        r"""
        __init__(TNEANet self) -> TNEANet
        __init__(TNEANet self, int const & Nodes, int const & Edges) -> TNEANet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TNEANet self, TNEANet Graph) -> TNEANet

        Parameters
        ----------
        Graph: TNEANet const &

        __init__(TNEANet self, TSIn SIn) -> TNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TNEANet_swiginit(self, _snap.new_TNEANet(*args))
    Save = _swig_new_instance_method(_snap.TNEANet_Save)
    Save_V1 = _swig_new_instance_method(_snap.TNEANet_Save_V1)
    Save_V2 = _swig_new_instance_method(_snap.TNEANet_Save_V2)
    New = _swig_new_static_method(_snap.TNEANet_New)
    Load = _swig_new_static_method(_snap.TNEANet_Load)
    Load_V1 = _swig_new_static_method(_snap.TNEANet_Load_V1)
    Load_V2 = _swig_new_static_method(_snap.TNEANet_Load_V2)
    LoadNetworkShM = _swig_new_instance_method(_snap.TNEANet_LoadNetworkShM)
    LoadShM = _swig_new_static_method(_snap.TNEANet_LoadShM)
    ConvertToSparse = _swig_new_instance_method(_snap.TNEANet_ConvertToSparse)
    HasFlag = _swig_new_instance_method(_snap.TNEANet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TNEANet_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TNEANet_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TNEANet_AddNode)
    DelNode = _swig_new_instance_method(_snap.TNEANet_DelNode)
    IsNode = _swig_new_instance_method(_snap.TNEANet_IsNode)
    GetNAIntI = _swig_new_instance_method(_snap.TNEANet_GetNAIntI)
    BegNAIntVI = _swig_new_instance_method(_snap.TNEANet_BegNAIntVI)
    EndNAIntVI = _swig_new_instance_method(_snap.TNEANet_EndNAIntVI)
    GetNAIntVI = _swig_new_instance_method(_snap.TNEANet_GetNAIntVI)
    GetNAStrI = _swig_new_instance_method(_snap.TNEANet_GetNAStrI)
    GetNAFltI = _swig_new_instance_method(_snap.TNEANet_GetNAFltI)
    AttrNameNI = _swig_new_instance_method(_snap.TNEANet_AttrNameNI)
    AttrValueNI = _swig_new_instance_method(_snap.TNEANet_AttrValueNI)
    IntAttrNameNI = _swig_new_instance_method(_snap.TNEANet_IntAttrNameNI)
    IntAttrValueNI = _swig_new_instance_method(_snap.TNEANet_IntAttrValueNI)
    IntVAttrNameNI = _swig_new_instance_method(_snap.TNEANet_IntVAttrNameNI)
    IntVAttrValueNI = _swig_new_instance_method(_snap.TNEANet_IntVAttrValueNI)
    StrAttrNameNI = _swig_new_instance_method(_snap.TNEANet_StrAttrNameNI)
    StrAttrValueNI = _swig_new_instance_method(_snap.TNEANet_StrAttrValueNI)
    FltAttrNameNI = _swig_new_instance_method(_snap.TNEANet_FltAttrNameNI)
    FltAttrValueNI = _swig_new_instance_method(_snap.TNEANet_FltAttrValueNI)
    AttrNameEI = _swig_new_instance_method(_snap.TNEANet_AttrNameEI)
    AttrValueEI = _swig_new_instance_method(_snap.TNEANet_AttrValueEI)
    IntAttrNameEI = _swig_new_instance_method(_snap.TNEANet_IntAttrNameEI)
    IntAttrValueEI = _swig_new_instance_method(_snap.TNEANet_IntAttrValueEI)
    IntVAttrNameEI = _swig_new_instance_method(_snap.TNEANet_IntVAttrNameEI)
    IntVAttrValueEI = _swig_new_instance_method(_snap.TNEANet_IntVAttrValueEI)
    StrAttrNameEI = _swig_new_instance_method(_snap.TNEANet_StrAttrNameEI)
    StrAttrValueEI = _swig_new_instance_method(_snap.TNEANet_StrAttrValueEI)
    FltAttrNameEI = _swig_new_instance_method(_snap.TNEANet_FltAttrNameEI)
    FltAttrValueEI = _swig_new_instance_method(_snap.TNEANet_FltAttrValueEI)
    GetEAIntI = _swig_new_instance_method(_snap.TNEANet_GetEAIntI)
    BegEAIntVI = _swig_new_instance_method(_snap.TNEANet_BegEAIntVI)
    EndEAIntVI = _swig_new_instance_method(_snap.TNEANet_EndEAIntVI)
    GetEAIntVI = _swig_new_instance_method(_snap.TNEANet_GetEAIntVI)
    GetEAStrI = _swig_new_instance_method(_snap.TNEANet_GetEAStrI)
    GetEAFltI = _swig_new_instance_method(_snap.TNEANet_GetEAFltI)
    GetMxNId = _swig_new_instance_method(_snap.TNEANet_GetMxNId)
    GetMxEId = _swig_new_instance_method(_snap.TNEANet_GetMxEId)
    GetEdges = _swig_new_instance_method(_snap.TNEANet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.TNEANet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TNEANet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TNEANet_IsEdge)
    GetEId = _swig_new_instance_method(_snap.TNEANet_GetEId)
    GetRndNId = _swig_new_instance_method(_snap.TNEANet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TNEANet_GetRndNI)
    GetRndEId = _swig_new_instance_method(_snap.TNEANet_GetRndEId)
    GetRndEI = _swig_new_instance_method(_snap.TNEANet_GetRndEI)
    GetNIdV = _swig_new_instance_method(_snap.TNEANet_GetNIdV)
    GetEIdV = _swig_new_instance_method(_snap.TNEANet_GetEIdV)
    Empty = _swig_new_instance_method(_snap.TNEANet_Empty)
    Clr = _swig_new_instance_method(_snap.TNEANet_Clr)
    Reserve = _swig_new_instance_method(_snap.TNEANet_Reserve)
    Defrag = _swig_new_instance_method(_snap.TNEANet_Defrag)
    IsOk = _swig_new_instance_method(_snap.TNEANet_IsOk)
    Dump = _swig_new_instance_method(_snap.TNEANet_Dump)
    AddIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrDatN)
    AppendIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_AppendIntVAttrDatN)
    DelFromIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_DelFromIntVAttrDatN)
    AddIntVAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrDatE)
    AppendIntVAttrDatE = _swig_new_instance_method(_snap.TNEANet_AppendIntVAttrDatE)
    GetIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetIntVAttrDatN)
    GetIntAttrIndN = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndN)
    GetAttrIndN = _swig_new_instance_method(_snap.TNEANet_GetAttrIndN)
    GetIntVAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetIntVAttrDatE)
    GetIntAttrIndE = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndE)
    GetAttrIndE = _swig_new_instance_method(_snap.TNEANet_GetAttrIndE)
    AddIntAttrN = _swig_new_instance_method(_snap.TNEANet_AddIntAttrN)
    AddStrAttrN = _swig_new_instance_method(_snap.TNEANet_AddStrAttrN)
    AddFltAttrN = _swig_new_instance_method(_snap.TNEANet_AddFltAttrN)
    AddIntVAttrN = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrN)
    AddIntAttrE = _swig_new_instance_method(_snap.TNEANet_AddIntAttrE)
    AddStrAttrE = _swig_new_instance_method(_snap.TNEANet_AddStrAttrE)
    AddFltAttrE = _swig_new_instance_method(_snap.TNEANet_AddFltAttrE)
    AddIntVAttrE = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrE)
    DelAttrN = _swig_new_instance_method(_snap.TNEANet_DelAttrN)
    DelAttrE = _swig_new_instance_method(_snap.TNEANet_DelAttrE)
    IsAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsAttrDeletedN)
    IsIntAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsIntAttrDeletedN)
    IsIntVAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsIntVAttrDeletedN)
    IsStrAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsStrAttrDeletedN)
    IsFltAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsFltAttrDeletedN)
    NodeAttrIsDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsDeleted)
    NodeAttrIsIntDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsIntDeleted)
    NodeAttrIsIntVDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsIntVDeleted)
    NodeAttrIsStrDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsStrDeleted)
    NodeAttrIsFltDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsFltDeleted)
    IsAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsAttrDeletedE)
    IsIntAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsIntAttrDeletedE)
    IsIntVAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsIntVAttrDeletedE)
    IsStrAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsStrAttrDeletedE)
    IsFltAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsFltAttrDeletedE)
    EdgeAttrIsDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsDeleted)
    EdgeAttrIsIntDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsIntDeleted)
    EdgeAttrIsIntVDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsIntVDeleted)
    EdgeAttrIsStrDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsStrDeleted)
    EdgeAttrIsFltDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsFltDeleted)
    GetNodeAttrValue = _swig_new_instance_method(_snap.TNEANet_GetNodeAttrValue)
    GetEdgeAttrValue = _swig_new_instance_method(_snap.TNEANet_GetEdgeAttrValue)
    GetWeightOutEdges = _swig_new_instance_method(_snap.TNEANet_GetWeightOutEdges)
    IsFltAttrE = _swig_new_instance_method(_snap.TNEANet_IsFltAttrE)
    IsIntAttrE = _swig_new_instance_method(_snap.TNEANet_IsIntAttrE)
    IsStrAttrE = _swig_new_instance_method(_snap.TNEANet_IsStrAttrE)
    GetFltAttrVecE = _swig_new_instance_method(_snap.TNEANet_GetFltAttrVecE)
    GetFltKeyIdE = _swig_new_instance_method(_snap.TNEANet_GetFltKeyIdE)
    GetWeightOutEdgesV = _swig_new_instance_method(_snap.TNEANet_GetWeightOutEdgesV)
    GetAttrNNames = _swig_new_instance_method(_snap.TNEANet_GetAttrNNames)
    GetAttrENames = _swig_new_instance_method(_snap.TNEANet_GetAttrENames)
    AddSAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.TNEANet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.TNEANet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.TNEANet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.TNEANet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.TNEANet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.TNEANet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.TNEANet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.TNEANet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.TNEANet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.TNEANet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.TNEANet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.TNEANet_GetSAttrNameE)
    BegNI = _swig_new_instance_method(_snap.TNEANet_BegNI)
    EndNI = _swig_new_instance_method(_snap.TNEANet_EndNI)
    GetNI = _swig_new_instance_method(_snap.TNEANet_GetNI)
    AddIntAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddIntAttrDatN)
    AddFltAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddFltAttrDatN)
    AddStrAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddStrAttrDatN)
    GetIntAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetIntAttrDatN)
    GetFltAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetFltAttrDatN)
    GetStrAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetStrAttrDatN)
    GetIntAttrIndDatN = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndDatN)
    GetFltAttrIndDatN = _swig_new_instance_method(_snap.TNEANet_GetFltAttrIndDatN)
    GetStrAttrIndDatN = _swig_new_instance_method(_snap.TNEANet_GetStrAttrIndDatN)
    DelAttrDatN = _swig_new_instance_method(_snap.TNEANet_DelAttrDatN)
    BegEI = _swig_new_instance_method(_snap.TNEANet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TNEANet_EndEI)
    GetEI = _swig_new_instance_method(_snap.TNEANet_GetEI)
    AddIntAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddIntAttrDatE)
    AddFltAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddFltAttrDatE)
    AddStrAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddStrAttrDatE)
    GetIntAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetIntAttrDatE)
    GetFltAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetFltAttrDatE)
    GetStrAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetStrAttrDatE)
    GetIntAttrIndDatE = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndDatE)
    GetFltAttrIndDatE = _swig_new_instance_method(_snap.TNEANet_GetFltAttrIndDatE)
    GetStrAttrIndDatE = _swig_new_instance_method(_snap.TNEANet_GetStrAttrIndDatE)
    DelAttrDatE = _swig_new_instance_method(_snap.TNEANet_DelAttrDatE)
    BegNAIntI = _swig_new_instance_method(_snap.TNEANet_BegNAIntI)
    EndNAIntI = _swig_new_instance_method(_snap.TNEANet_EndNAIntI)
    BegNAStrI = _swig_new_instance_method(_snap.TNEANet_BegNAStrI)
    EndNAStrI = _swig_new_instance_method(_snap.TNEANet_EndNAStrI)
    BegNAFltI = _swig_new_instance_method(_snap.TNEANet_BegNAFltI)
    EndNAFltI = _swig_new_instance_method(_snap.TNEANet_EndNAFltI)
    BegEAIntI = _swig_new_instance_method(_snap.TNEANet_BegEAIntI)
    EndEAIntI = _swig_new_instance_method(_snap.TNEANet_EndEAIntI)
    BegEAStrI = _swig_new_instance_method(_snap.TNEANet_BegEAStrI)
    EndEAStrI = _swig_new_instance_method(_snap.TNEANet_EndEAStrI)
    BegEAFltI = _swig_new_instance_method(_snap.TNEANet_BegEAFltI)
    EndEAFltI = _swig_new_instance_method(_snap.TNEANet_EndEAFltI)
    __swig_destroy__ = _snap.delete_TNEANet

# Register TNEANet in _snap:
_snap.TNEANet_swigregister(TNEANet)
TNEANet_New = _snap.TNEANet_New
TNEANet_Load = _snap.TNEANet_Load
TNEANet_Load_V1 = _snap.TNEANet_Load_V1
TNEANet_Load_V2 = _snap.TNEANet_Load_V2
TNEANet_LoadShM = _snap.TNEANet_LoadShM

class TUndirNet(object):
    r"""Proxy of C++ TUndirNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUndirNet self) -> TUndirNet
        __init__(TUndirNet self, int const & Nodes, int const & Edges) -> TUndirNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TUndirNet self, TUndirNet Graph) -> TUndirNet

        Parameters
        ----------
        Graph: TUndirNet const &

        __init__(TUndirNet self, TSIn SIn) -> TUndirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUndirNet_swiginit(self, _snap.new_TUndirNet(*args))
    Save = _swig_new_instance_method(_snap.TUndirNet_Save)
    Save_V1 = _swig_new_instance_method(_snap.TUndirNet_Save_V1)
    New = _swig_new_static_method(_snap.TUndirNet_New)
    Load = _swig_new_static_method(_snap.TUndirNet_Load)
    Load_V1 = _swig_new_static_method(_snap.TUndirNet_Load_V1)
    LoadShM = _swig_new_static_method(_snap.TUndirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TUndirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TUndirNet_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TUndirNet_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TUndirNet_AddNode)
    DelNode = _swig_new_instance_method(_snap.TUndirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.TUndirNet_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TUndirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TUndirNet_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TUndirNet_AddEdgeUnchecked)
    AddEdge = _swig_new_instance_method(_snap.TUndirNet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TUndirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TUndirNet_IsEdge)
    GetEI = _swig_new_instance_method(_snap.TUndirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TUndirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TUndirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TUndirNet_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TUndirNet_Empty)
    Clr = _swig_new_instance_method(_snap.TUndirNet_Clr)
    Reserve = _swig_new_instance_method(_snap.TUndirNet_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.TUndirNet_ReserveNIdDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.TUndirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.TUndirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.TUndirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.TUndirNet_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TUndirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.TUndirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.TUndirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.TUndirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.TUndirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.TUndirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.TUndirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.TUndirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.TUndirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrNameE)
    BegNI = _swig_new_instance_method(_snap.TUndirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.TUndirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.TUndirNet_GetNI)
    BegEI = _swig_new_instance_method(_snap.TUndirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TUndirNet_EndEI)
    __swig_destroy__ = _snap.delete_TUndirNet

# Register TUndirNet in _snap:
_snap.TUndirNet_swigregister(TUndirNet)
TUndirNet_New = _snap.TUndirNet_New
TUndirNet_Load = _snap.TUndirNet_Load
TUndirNet_Load_V1 = _snap.TUndirNet_Load_V1
TUndirNet_LoadShM = _snap.TUndirNet_LoadShM
TUndirNet_GetSmallGraph = _snap.TUndirNet_GetSmallGraph

class TDirNet(object):
    r"""Proxy of C++ TDirNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TDirNet self) -> TDirNet
        __init__(TDirNet self, int const & Nodes, int const & Edges) -> TDirNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TDirNet self, TDirNet Graph) -> TDirNet

        Parameters
        ----------
        Graph: TDirNet const &

        __init__(TDirNet self, TSIn SIn) -> TDirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TDirNet_swiginit(self, _snap.new_TDirNet(*args))
    Save = _swig_new_instance_method(_snap.TDirNet_Save)
    Save_V1 = _swig_new_instance_method(_snap.TDirNet_Save_V1)
    New = _swig_new_static_method(_snap.TDirNet_New)
    Load = _swig_new_static_method(_snap.TDirNet_Load)
    Load_V1 = _swig_new_static_method(_snap.TDirNet_Load_V1)
    LoadShM = _swig_new_static_method(_snap.TDirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TDirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TDirNet_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TDirNet_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TDirNet_AddNode)
    DelNode = _swig_new_instance_method(_snap.TDirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.TDirNet_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TDirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TDirNet_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TDirNet_AddEdgeUnchecked)
    AddEdge = _swig_new_instance_method(_snap.TDirNet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TDirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TDirNet_IsEdge)
    GetEI = _swig_new_instance_method(_snap.TDirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TDirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TDirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TDirNet_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TDirNet_Empty)
    Clr = _swig_new_instance_method(_snap.TDirNet_Clr)
    Reserve = _swig_new_instance_method(_snap.TDirNet_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.TDirNet_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.TDirNet_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.TDirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.TDirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.TDirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.TDirNet_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TDirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.TDirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.TDirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.TDirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.TDirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.TDirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.TDirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.TDirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.TDirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.TDirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.TDirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.TDirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.TDirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.TDirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.TDirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.TDirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.TDirNet_GetSAttrNameE)
    BegNI = _swig_new_instance_method(_snap.TDirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.TDirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.TDirNet_GetNI)
    BegEI = _swig_new_instance_method(_snap.TDirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TDirNet_EndEI)
    __swig_destroy__ = _snap.delete_TDirNet

# Register TDirNet in _snap:
_snap.TDirNet_swigregister(TDirNet)
TDirNet_New = _snap.TDirNet_New
TDirNet_Load = _snap.TDirNet_Load
TDirNet_Load_V1 = _snap.TDirNet_Load_V1
TDirNet_LoadShM = _snap.TDirNet_LoadShM
TDirNet_GetSmallGraph = _snap.TDirNet_GetSmallGraph

class TModeNet(TNEANet):
    r"""Proxy of C++ TModeNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TModeNet self) -> TModeNet
        __init__(TModeNet self, int const & TypeId) -> TModeNet

        Parameters
        ----------
        TypeId: int const &

        __init__(TModeNet self, int const & Nodes, int const & Edges) -> TModeNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TModeNet self, int const & Nodes, int const & Edges, int const & TypeId) -> TModeNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &
        TypeId: int const &

        __init__(TModeNet self, TModeNet Graph) -> TModeNet

        Parameters
        ----------
        Graph: TModeNet const &

        __init__(TModeNet self, TSIn SIn) -> TModeNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TModeNet_swiginit(self, _snap.new_TModeNet(*args))
    Save = _swig_new_instance_method(_snap.TModeNet_Save)
    LoadShM = _swig_new_instance_method(_snap.TModeNet_LoadShM)
    GetCrossNetNames = _swig_new_instance_method(_snap.TModeNet_GetCrossNetNames)
    GetNeighborsByCrossNet = _swig_new_instance_method(_snap.TModeNet_GetNeighborsByCrossNet)
    Clr = _swig_new_instance_method(_snap.TModeNet_Clr)
    BegMMNI = _swig_new_instance_method(_snap.TModeNet_BegMMNI)
    EndMMNI = _swig_new_instance_method(_snap.TModeNet_EndMMNI)
    GetMMNI = _swig_new_instance_method(_snap.TModeNet_GetMMNI)
    __swig_destroy__ = _snap.delete_TModeNet

# Register TModeNet in _snap:
_snap.TModeNet_swigregister(TModeNet)

class TCrossNet(object):
    r"""Proxy of C++ TCrossNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNet self) -> TCrossNet
        __init__(TCrossNet self, TInt MId1, TInt MId2, TInt LId) -> TCrossNet

        Parameters
        ----------
        MId1: TInt
        MId2: TInt
        LId: TInt

        __init__(TCrossNet self, TInt MId1, TInt MId2, TBool IsDir, TInt LId) -> TCrossNet

        Parameters
        ----------
        MId1: TInt
        MId2: TInt
        IsDir: TBool
        LId: TInt

        __init__(TCrossNet self, TSIn SIn) -> TCrossNet

        Parameters
        ----------
        SIn: TSIn &

        __init__(TCrossNet self, TCrossNet OtherTCrossNet) -> TCrossNet

        Parameters
        ----------
        OtherTCrossNet: TCrossNet const &

        """
        _snap.TCrossNet_swiginit(self, _snap.new_TCrossNet(*args))
    IsEdge = _swig_new_instance_method(_snap.TCrossNet_IsEdge)
    GetMxEId = _swig_new_instance_method(_snap.TCrossNet_GetMxEId)
    GetEdges = _swig_new_instance_method(_snap.TCrossNet_GetEdges)
    Clr = _swig_new_instance_method(_snap.TCrossNet_Clr)
    AddEdge = _swig_new_instance_method(_snap.TCrossNet_AddEdge)
    GetEdgeI = _swig_new_instance_method(_snap.TCrossNet_GetEdgeI)
    BegEdgeI = _swig_new_instance_method(_snap.TCrossNet_BegEdgeI)
    EndEdgeI = _swig_new_instance_method(_snap.TCrossNet_EndEdgeI)
    DelEdge = _swig_new_instance_method(_snap.TCrossNet_DelEdge)
    GetMode1 = _swig_new_instance_method(_snap.TCrossNet_GetMode1)
    GetMode2 = _swig_new_instance_method(_snap.TCrossNet_GetMode2)
    Save = _swig_new_instance_method(_snap.TCrossNet_Save)
    LoadShM = _swig_new_instance_method(_snap.TCrossNet_LoadShM)
    IsDirected = _swig_new_instance_method(_snap.TCrossNet_IsDirected)
    AttrNameEI = _swig_new_instance_method(_snap.TCrossNet_AttrNameEI)
    AttrValueEI = _swig_new_instance_method(_snap.TCrossNet_AttrValueEI)
    IntAttrNameEI = _swig_new_instance_method(_snap.TCrossNet_IntAttrNameEI)
    IntAttrValueEI = _swig_new_instance_method(_snap.TCrossNet_IntAttrValueEI)
    StrAttrNameEI = _swig_new_instance_method(_snap.TCrossNet_StrAttrNameEI)
    StrAttrValueEI = _swig_new_instance_method(_snap.TCrossNet_StrAttrValueEI)
    FltAttrNameEI = _swig_new_instance_method(_snap.TCrossNet_FltAttrNameEI)
    FltAttrValueEI = _swig_new_instance_method(_snap.TCrossNet_FltAttrValueEI)
    AddIntAttrDatE = _swig_new_instance_method(_snap.TCrossNet_AddIntAttrDatE)
    AddStrAttrDatE = _swig_new_instance_method(_snap.TCrossNet_AddStrAttrDatE)
    AddFltAttrDatE = _swig_new_instance_method(_snap.TCrossNet_AddFltAttrDatE)
    GetIntAttrDatE = _swig_new_instance_method(_snap.TCrossNet_GetIntAttrDatE)
    GetStrAttrDatE = _swig_new_instance_method(_snap.TCrossNet_GetStrAttrDatE)
    GetFltAttrDatE = _swig_new_instance_method(_snap.TCrossNet_GetFltAttrDatE)
    GetEAIntI = _swig_new_instance_method(_snap.TCrossNet_GetEAIntI)
    GetEAStrI = _swig_new_instance_method(_snap.TCrossNet_GetEAStrI)
    GetEAFltI = _swig_new_instance_method(_snap.TCrossNet_GetEAFltI)
    DelAttrDatE = _swig_new_instance_method(_snap.TCrossNet_DelAttrDatE)
    AddIntAttrE = _swig_new_instance_method(_snap.TCrossNet_AddIntAttrE)
    AddStrAttrE = _swig_new_instance_method(_snap.TCrossNet_AddStrAttrE)
    AddFltAttrE = _swig_new_instance_method(_snap.TCrossNet_AddFltAttrE)
    DelAttrE = _swig_new_instance_method(_snap.TCrossNet_DelAttrE)
    IsAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsAttrDeletedE)
    IsIntAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsIntAttrDeletedE)
    IsStrAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsStrAttrDeletedE)
    IsFltAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsFltAttrDeletedE)
    EdgeAttrIsDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsDeleted)
    EdgeAttrIsIntDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsIntDeleted)
    EdgeAttrIsStrDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsStrDeleted)
    EdgeAttrIsFltDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsFltDeleted)
    GetEdgeAttrValue = _swig_new_instance_method(_snap.TCrossNet_GetEdgeAttrValue)
    BegEI = _swig_new_instance_method(_snap.TCrossNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TCrossNet_EndEI)
    BegEAIntI = _swig_new_instance_method(_snap.TCrossNet_BegEAIntI)
    EndEAIntI = _swig_new_instance_method(_snap.TCrossNet_EndEAIntI)
    BegEAStrI = _swig_new_instance_method(_snap.TCrossNet_BegEAStrI)
    EndEAStrI = _swig_new_instance_method(_snap.TCrossNet_EndEAStrI)
    BegEAFltI = _swig_new_instance_method(_snap.TCrossNet_BegEAFltI)
    EndEAFltI = _swig_new_instance_method(_snap.TCrossNet_EndEAFltI)
    __swig_destroy__ = _snap.delete_TCrossNet

# Register TCrossNet in _snap:
_snap.TCrossNet_swigregister(TCrossNet)

class TMMNet(object):
    r"""Proxy of C++ TMMNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CRef = property(_snap.TMMNet_CRef_get, doc=r"""CRef : TCRef""")

    def __init__(self, *args):
        r"""
        __init__(TMMNet self) -> TMMNet
        __init__(TMMNet self, TMMNet OtherTMMNet) -> TMMNet

        Parameters
        ----------
        OtherTMMNet: TMMNet const &

        __init__(TMMNet self, TSIn SIn) -> TMMNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TMMNet_swiginit(self, _snap.new_TMMNet(*args))
    AddModeNet = _swig_new_instance_method(_snap.TMMNet_AddModeNet)
    DelModeNet = _swig_new_instance_method(_snap.TMMNet_DelModeNet)
    AddCrossNet = _swig_new_instance_method(_snap.TMMNet_AddCrossNet)
    DelCrossNet = _swig_new_instance_method(_snap.TMMNet_DelCrossNet)
    Save = _swig_new_instance_method(_snap.TMMNet_Save)
    Load = _swig_new_static_method(_snap.TMMNet_Load)
    LoadShM = _swig_new_static_method(_snap.TMMNet_LoadShM)
    New = _swig_new_static_method(_snap.TMMNet_New)
    ConvertToSparse = _swig_new_instance_method(_snap.TMMNet_ConvertToSparse)
    GetModeId = _swig_new_instance_method(_snap.TMMNet_GetModeId)
    GetModeName = _swig_new_instance_method(_snap.TMMNet_GetModeName)
    GetCrossId = _swig_new_instance_method(_snap.TMMNet_GetCrossId)
    GetCrossName = _swig_new_instance_method(_snap.TMMNet_GetCrossName)
    GetModeNetByName = _swig_new_instance_method(_snap.TMMNet_GetModeNetByName)
    GetModeNetById = _swig_new_instance_method(_snap.TMMNet_GetModeNetById)
    GetCrossNetByName = _swig_new_instance_method(_snap.TMMNet_GetCrossNetByName)
    GetCrossNetById = _swig_new_instance_method(_snap.TMMNet_GetCrossNetById)
    GetModeNets = _swig_new_instance_method(_snap.TMMNet_GetModeNets)
    GetCrossNets = _swig_new_instance_method(_snap.TMMNet_GetCrossNets)
    GetSubgraphByCrossNet = _swig_new_instance_method(_snap.TMMNet_GetSubgraphByCrossNet)
    GetSubgraphByModeNet = _swig_new_instance_method(_snap.TMMNet_GetSubgraphByModeNet)
    ToNetwork = _swig_new_instance_method(_snap.TMMNet_ToNetwork)
    ToNetwork2 = _swig_new_instance_method(_snap.TMMNet_ToNetwork2)
    BegModeNetI = _swig_new_instance_method(_snap.TMMNet_BegModeNetI)
    EndModeNetI = _swig_new_instance_method(_snap.TMMNet_EndModeNetI)
    GetModeNetI = _swig_new_instance_method(_snap.TMMNet_GetModeNetI)
    BegCrossNetI = _swig_new_instance_method(_snap.TMMNet_BegCrossNetI)
    EndCrossNetI = _swig_new_instance_method(_snap.TMMNet_EndCrossNetI)
    GetCrossNetI = _swig_new_instance_method(_snap.TMMNet_GetCrossNetI)
    __swig_destroy__ = _snap.delete_TMMNet

# Register TMMNet in _snap:
_snap.TMMNet_swigregister(TMMNet)
TMMNet_Load = _snap.TMMNet_Load
TMMNet_LoadShM = _snap.TMMNet_LoadShM
TMMNet_New = _snap.TMMNet_New

NOT = _snap.NOT

AND = _snap.AND

OR = _snap.OR

NOP = _snap.NOP

LT = _snap.LT

LTE = _snap.LTE

EQ = _snap.EQ

NEQ = _snap.NEQ

GTE = _snap.GTE

GT = _snap.GT

SUBSTR = _snap.SUBSTR

SUPERSTR = _snap.SUPERSTR

class TAtomicPredicate(object):
    r"""Proxy of C++ TAtomicPredicate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAtomicPredicate self) -> TAtomicPredicate
        __init__(TAtomicPredicate self, TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R, TInt ICnst, TFlt FCnst, TStr SCnst) -> TAtomicPredicate

        Parameters
        ----------
        Typ: enum TAttrType
        IsCnst: TBool
        Cmp: enum TPredComp
        L: TStr
        R: TStr
        ICnst: TInt
        FCnst: TFlt
        SCnst: TStr

        __init__(TAtomicPredicate self, TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R) -> TAtomicPredicate

        Parameters
        ----------
        Typ: enum TAttrType
        IsCnst: TBool
        Cmp: enum TPredComp
        L: TStr
        R: TStr

        """
        _snap.TAtomicPredicate_swiginit(self, _snap.new_TAtomicPredicate(*args))
    __swig_destroy__ = _snap.delete_TAtomicPredicate

# Register TAtomicPredicate in _snap:
_snap.TAtomicPredicate_swigregister(TAtomicPredicate)

class TPredicateNode(object):
    r"""Proxy of C++ TPredicateNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Op = property(_snap.TPredicateNode_Op_get, _snap.TPredicateNode_Op_set, doc=r"""Op : TPredOp""")
    Result = property(_snap.TPredicateNode_Result_get, _snap.TPredicateNode_Result_set, doc=r"""Result : TBool""")
    Atom = property(_snap.TPredicateNode_Atom_get, _snap.TPredicateNode_Atom_set, doc=r"""Atom : TAtomicPredicate""")
    Parent = property(_snap.TPredicateNode_Parent_get, _snap.TPredicateNode_Parent_set, doc=r"""Parent : p.TPredicateNode""")
    Left = property(_snap.TPredicateNode_Left_get, _snap.TPredicateNode_Left_set, doc=r"""Left : p.TPredicateNode""")
    Right = property(_snap.TPredicateNode_Right_get, _snap.TPredicateNode_Right_set, doc=r"""Right : p.TPredicateNode""")

    def __init__(self, *args):
        r"""
        __init__(TPredicateNode self) -> TPredicateNode
        __init__(TPredicateNode self, TAtomicPredicate A) -> TPredicateNode

        Parameters
        ----------
        A: TAtomicPredicate const &

        __init__(TPredicateNode self, TPredOp Opr) -> TPredicateNode

        Parameters
        ----------
        Opr: enum TPredOp

        __init__(TPredicateNode self, TPredicateNode P) -> TPredicateNode

        Parameters
        ----------
        P: TPredicateNode const &

        """
        _snap.TPredicateNode_swiginit(self, _snap.new_TPredicateNode(*args))
    AddLeftChild = _swig_new_instance_method(_snap.TPredicateNode_AddLeftChild)
    AddRightChild = _swig_new_instance_method(_snap.TPredicateNode_AddRightChild)
    GetVariables = _swig_new_instance_method(_snap.TPredicateNode_GetVariables)
    __swig_destroy__ = _snap.delete_TPredicateNode

# Register TPredicateNode in _snap:
_snap.TPredicateNode_swigregister(TPredicateNode)

class TPredicate(object):
    r"""Proxy of C++ TPredicate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TPredicate self) -> TPredicate
        __init__(TPredicate self, TPredicateNode R) -> TPredicate

        Parameters
        ----------
        R: TPredicateNode *

        __init__(TPredicate self, TPredicate Pred) -> TPredicate

        Parameters
        ----------
        Pred: TPredicate const &

        """
        _snap.TPredicate_swiginit(self, _snap.new_TPredicate(*args))
    GetVariables = _swig_new_instance_method(_snap.TPredicate_GetVariables)
    SetIntVal = _swig_new_instance_method(_snap.TPredicate_SetIntVal)
    SetFltVal = _swig_new_instance_method(_snap.TPredicate_SetFltVal)
    SetStrVal = _swig_new_instance_method(_snap.TPredicate_SetStrVal)
    Eval = _swig_new_instance_method(_snap.TPredicate_Eval)
    EvalAtomicPredicate = _swig_new_instance_method(_snap.TPredicate_EvalAtomicPredicate)
    EvalStrAtom = _swig_new_static_method(_snap.TPredicate_EvalStrAtom)
    __swig_destroy__ = _snap.delete_TPredicate

# Register TPredicate in _snap:
_snap.TPredicate_swigregister(TPredicate)
TPredicate_EvalStrAtom = _snap.TPredicate_EvalStrAtom

L1Norm = _snap.L1Norm

L2Norm = _snap.L2Norm

Jaccard = _snap.Jaccard

Haversine = _snap.Haversine

class TTableContext(object):
    r"""Proxy of C++ TTableContext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TTableContext self) -> TTableContext
        __init__(TTableContext self, TSIn SIn) -> TTableContext

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TTableContext_swiginit(self, _snap.new_TTableContext(*args))
    Load = _swig_new_instance_method(_snap.TTableContext_Load)
    LoadShM = _swig_new_instance_method(_snap.TTableContext_LoadShM)
    Save = _swig_new_instance_method(_snap.TTableContext_Save)
    AddStr = _swig_new_instance_method(_snap.TTableContext_AddStr)
    GetStr = _swig_new_instance_method(_snap.TTableContext_GetStr)
    __swig_destroy__ = _snap.delete_TTableContext

# Register TTableContext in _snap:
_snap.TTableContext_swigregister(TTableContext)

class TPrimitive(object):
    r"""Proxy of C++ TPrimitive class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TPrimitive self) -> TPrimitive
        __init__(TPrimitive self, TInt Val) -> TPrimitive

        Parameters
        ----------
        Val: TInt const &

        __init__(TPrimitive self, TFlt Val) -> TPrimitive

        Parameters
        ----------
        Val: TFlt const &

        __init__(TPrimitive self, TStr Val) -> TPrimitive

        Parameters
        ----------
        Val: TStr const &

        __init__(TPrimitive self, TPrimitive Prim) -> TPrimitive

        Parameters
        ----------
        Prim: TPrimitive const &

        """
        _snap.TPrimitive_swiginit(self, _snap.new_TPrimitive(*args))
    GetInt = _swig_new_instance_method(_snap.TPrimitive_GetInt)
    GetFlt = _swig_new_instance_method(_snap.TPrimitive_GetFlt)
    GetStr = _swig_new_instance_method(_snap.TPrimitive_GetStr)
    GetType = _swig_new_instance_method(_snap.TPrimitive_GetType)
    __swig_destroy__ = _snap.delete_TPrimitive

# Register TPrimitive in _snap:
_snap.TPrimitive_swigregister(TPrimitive)

class TTableRow(object):
    r"""Proxy of C++ TTableRow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TTableRow self) -> TTableRow"""
        _snap.TTableRow_swiginit(self, _snap.new_TTableRow())
    AddInt = _swig_new_instance_method(_snap.TTableRow_AddInt)
    AddFlt = _swig_new_instance_method(_snap.TTableRow_AddFlt)
    AddStr = _swig_new_instance_method(_snap.TTableRow_AddStr)
    GetIntVals = _swig_new_instance_method(_snap.TTableRow_GetIntVals)
    GetFltVals = _swig_new_instance_method(_snap.TTableRow_GetFltVals)
    GetStrVals = _swig_new_instance_method(_snap.TTableRow_GetStrVals)
    __swig_destroy__ = _snap.delete_TTableRow

# Register TTableRow in _snap:
_snap.TTableRow_swigregister(TTableRow)

aaMin = _snap.aaMin

aaMax = _snap.aaMax

aaFirst = _snap.aaFirst

aaLast = _snap.aaLast

aaMean = _snap.aaMean

aaMedian = _snap.aaMedian

aaSum = _snap.aaSum

aaCount = _snap.aaCount

aoAdd = _snap.aoAdd

aoSub = _snap.aoSub

aoMul = _snap.aoMul

aoDiv = _snap.aoDiv

aoMod = _snap.aoMod

aoMin = _snap.aoMin

aoMax = _snap.aoMax

class GroupStmt(object):
    r"""Proxy of C++ GroupStmt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GroupStmt self) -> GroupStmt
        __init__(GroupStmt self, TStrV Attrs) -> GroupStmt

        Parameters
        ----------
        Attrs: TStrV const &

        __init__(GroupStmt self, TStrV Attrs, TBool ordered, TBool physical) -> GroupStmt

        Parameters
        ----------
        Attrs: TStrV const &
        ordered: TBool
        physical: TBool

        __init__(GroupStmt self, GroupStmt stmt) -> GroupStmt

        Parameters
        ----------
        stmt: GroupStmt const &

        """
        _snap.GroupStmt_swiginit(self, _snap.new_GroupStmt(*args))
    UsePhysicalIds = _swig_new_instance_method(_snap.GroupStmt_UsePhysicalIds)
    __eq__ = _swig_new_instance_method(_snap.GroupStmt___eq__)
    IsValid = _swig_new_instance_method(_snap.GroupStmt_IsValid)
    Invalidate = _swig_new_instance_method(_snap.GroupStmt_Invalidate)
    IncludesAttr = _swig_new_instance_method(_snap.GroupStmt_IncludesAttr)
    GetMemUsed = _swig_new_instance_method(_snap.GroupStmt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.GroupStmt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.GroupStmt_GetSecHashCd)
    Print = _swig_new_instance_method(_snap.GroupStmt_Print)
    __swig_destroy__ = _snap.delete_GroupStmt

# Register GroupStmt in _snap:
_snap.GroupStmt_swigregister(GroupStmt)

class TRowIterator(object):
    r"""Proxy of C++ TRowIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TRowIterator self) -> TRowIterator
        __init__(TRowIterator self, TInt RowIdx, TTable TablePtr) -> TRowIterator

        Parameters
        ----------
        RowIdx: TInt
        TablePtr: TTable const *

        __init__(TRowIterator self, TRowIterator RowI) -> TRowIterator

        Parameters
        ----------
        RowI: TRowIterator const &

        """
        _snap.TRowIterator_swiginit(self, _snap.new_TRowIterator(*args))
    Next = _swig_new_instance_method(_snap.TRowIterator_Next)
    __lt__ = _swig_new_instance_method(_snap.TRowIterator___lt__)
    __eq__ = _swig_new_instance_method(_snap.TRowIterator___eq__)
    GetRowIdx = _swig_new_instance_method(_snap.TRowIterator_GetRowIdx)
    GetStrMapById = _swig_new_instance_method(_snap.TRowIterator_GetStrMapById)
    GetIntAttr = _swig_new_instance_method(_snap.TRowIterator_GetIntAttr)
    GetFltAttr = _swig_new_instance_method(_snap.TRowIterator_GetFltAttr)
    GetStrAttr = _swig_new_instance_method(_snap.TRowIterator_GetStrAttr)
    GetStrMapByName = _swig_new_instance_method(_snap.TRowIterator_GetStrMapByName)
    CompareAtomicConst = _swig_new_instance_method(_snap.TRowIterator_CompareAtomicConst)
    CompareAtomicConstTStr = _swig_new_instance_method(_snap.TRowIterator_CompareAtomicConstTStr)
    __swig_destroy__ = _snap.delete_TRowIterator

# Register TRowIterator in _snap:
_snap.TRowIterator_swigregister(TRowIterator)

class TRowIteratorWithRemove(object):
    r"""Proxy of C++ TRowIteratorWithRemove class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TRowIteratorWithRemove self) -> TRowIteratorWithRemove
        __init__(TRowIteratorWithRemove self, TInt RowIdx, TTable TablePtr) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowIdx: TInt
        TablePtr: TTable *

        __init__(TRowIteratorWithRemove self, TInt RowIdx, TTable TablePtr, TBool IsStart) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowIdx: TInt
        TablePtr: TTable *
        IsStart: TBool

        __init__(TRowIteratorWithRemove self, TRowIteratorWithRemove RowI) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowI: TRowIteratorWithRemove const &

        """
        _snap.TRowIteratorWithRemove_swiginit(self, _snap.new_TRowIteratorWithRemove(*args))
    Next = _swig_new_instance_method(_snap.TRowIteratorWithRemove_Next)
    __lt__ = _swig_new_instance_method(_snap.TRowIteratorWithRemove___lt__)
    __eq__ = _swig_new_instance_method(_snap.TRowIteratorWithRemove___eq__)
    GetRowIdx = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetRowIdx)
    GetNextRowIdx = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextRowIdx)
    GetNextIntAttr = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextIntAttr)
    GetNextFltAttr = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextFltAttr)
    GetNextStrAttr = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextStrAttr)
    IsFirst = _swig_new_instance_method(_snap.TRowIteratorWithRemove_IsFirst)
    RemoveNext = _swig_new_instance_method(_snap.TRowIteratorWithRemove_RemoveNext)
    CompareAtomicConst = _swig_new_instance_method(_snap.TRowIteratorWithRemove_CompareAtomicConst)
    __swig_destroy__ = _snap.delete_TRowIteratorWithRemove

# Register TRowIteratorWithRemove in _snap:
_snap.TRowIteratorWithRemove_swigregister(TRowIteratorWithRemove)

class TTableIterator(object):
    r"""Proxy of C++ TTableIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, PTableV):
        r"""
        __init__(TTableIterator self, TVec< PTable > & PTableV) -> TTableIterator

        Parameters
        ----------
        PTableV: TVec< PTable > &

        """
        _snap.TTableIterator_swiginit(self, _snap.new_TTableIterator(PTableV))
    Next = _swig_new_instance_method(_snap.TTableIterator_Next)
    HasNext = _swig_new_instance_method(_snap.TTableIterator_HasNext)
    __swig_destroy__ = _snap.delete_TTableIterator

# Register TTableIterator in _snap:
_snap.TTableIterator_swigregister(TTableIterator)

LoadCrossNet = _snap.LoadCrossNet
LoadMode = _snap.LoadMode
class TTable(object):
    r"""Proxy of C++ TTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SetMP = _swig_new_static_method(_snap.TTable_SetMP)
    GetMP = _swig_new_static_method(_snap.TTable_GetMP)
    NormalizeColName = _swig_new_static_method(_snap.TTable_NormalizeColName)
    NormalizeColNameV = _swig_new_static_method(_snap.TTable_NormalizeColNameV)
    AddIntCol = _swig_new_instance_method(_snap.TTable_AddIntCol)
    AddFltCol = _swig_new_instance_method(_snap.TTable_AddFltCol)
    AddStrCol = _swig_new_instance_method(_snap.TTable_AddStrCol)

    def __init__(self, *args):
        r"""
        __init__(TTable self) -> TTable
        __init__(TTable self, TTableContext Context) -> TTable

        Parameters
        ----------
        Context: TTableContext *

        __init__(TTable self, Schema S, TTableContext Context) -> TTable

        Parameters
        ----------
        S: Schema const &
        Context: TTableContext *

        __init__(TTable self, TSIn SIn, TTableContext Context) -> TTable

        Parameters
        ----------
        SIn: TSIn &
        Context: TTableContext *

        __init__(TTable self, TIntH H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> TTable

        Parameters
        ----------
        H: THash< TInt,TInt > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        __init__(TTable self, TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> TTable

        Parameters
        ----------
        H: THash< TInt,TFlt > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        __init__(TTable self, TTable Table) -> TTable

        Parameters
        ----------
        Table: TTable const &

        __init__(TTable self, TTable Table, TIntV RowIds) -> TTable

        Parameters
        ----------
        Table: TTable const &
        RowIds: TIntV const &

        """
        _snap.TTable_swiginit(self, _snap.new_TTable(*args))
    New = _swig_new_static_method(_snap.TTable_New)
    LoadSS = _swig_new_static_method(_snap.TTable_LoadSS)
    SaveSS = _swig_new_instance_method(_snap.TTable_SaveSS)
    SaveBin = _swig_new_instance_method(_snap.TTable_SaveBin)
    Load = _swig_new_static_method(_snap.TTable_Load)
    LoadShM = _swig_new_static_method(_snap.TTable_LoadShM)
    Save = _swig_new_instance_method(_snap.TTable_Save)
    Dump = _swig_new_instance_method(_snap.TTable_Dump)
    TableFromHashMap = _swig_new_static_method(_snap.TTable_TableFromHashMap)
    AddRow = _swig_new_instance_method(_snap.TTable_AddRow)
    GetContext = _swig_new_instance_method(_snap.TTable_GetContext)
    ChangeContext = _swig_new_instance_method(_snap.TTable_ChangeContext)
    GetColIdx = _swig_new_instance_method(_snap.TTable_GetColIdx)
    GetIntVal = _swig_new_instance_method(_snap.TTable_GetIntVal)
    GetFltVal = _swig_new_instance_method(_snap.TTable_GetFltVal)
    GetStrVal = _swig_new_instance_method(_snap.TTable_GetStrVal)
    GetStrMapById = _swig_new_instance_method(_snap.TTable_GetStrMapById)
    GetStrMapByName = _swig_new_instance_method(_snap.TTable_GetStrMapByName)
    GetStrValById = _swig_new_instance_method(_snap.TTable_GetStrValById)
    GetStrValByName = _swig_new_instance_method(_snap.TTable_GetStrValByName)
    GetIntRowIdxByVal = _swig_new_instance_method(_snap.TTable_GetIntRowIdxByVal)
    GetStrRowIdxByMap = _swig_new_instance_method(_snap.TTable_GetStrRowIdxByMap)
    GetFltRowIdxByVal = _swig_new_instance_method(_snap.TTable_GetFltRowIdxByVal)
    RequestIndexInt = _swig_new_instance_method(_snap.TTable_RequestIndexInt)
    RequestIndexFlt = _swig_new_instance_method(_snap.TTable_RequestIndexFlt)
    RequestIndexStrMap = _swig_new_instance_method(_snap.TTable_RequestIndexStrMap)
    GetStr = _swig_new_instance_method(_snap.TTable_GetStr)
    GetIntValAtRowIdx = _swig_new_instance_method(_snap.TTable_GetIntValAtRowIdx)
    GetFltValAtRowIdx = _swig_new_instance_method(_snap.TTable_GetFltValAtRowIdx)
    GetSchema = _swig_new_instance_method(_snap.TTable_GetSchema)
    ToGraphSequence = _swig_new_instance_method(_snap.TTable_ToGraphSequence)
    ToVarGraphSequence = _swig_new_instance_method(_snap.TTable_ToVarGraphSequence)
    ToGraphPerGroup = _swig_new_instance_method(_snap.TTable_ToGraphPerGroup)
    ToGraphSequenceIterator = _swig_new_instance_method(_snap.TTable_ToGraphSequenceIterator)
    ToVarGraphSequenceIterator = _swig_new_instance_method(_snap.TTable_ToVarGraphSequenceIterator)
    ToGraphPerGroupIterator = _swig_new_instance_method(_snap.TTable_ToGraphPerGroupIterator)
    NextGraphIterator = _swig_new_instance_method(_snap.TTable_NextGraphIterator)
    IsLastGraphOfSequence = _swig_new_instance_method(_snap.TTable_IsLastGraphOfSequence)
    GetSrcCol = _swig_new_instance_method(_snap.TTable_GetSrcCol)
    SetSrcCol = _swig_new_instance_method(_snap.TTable_SetSrcCol)
    GetDstCol = _swig_new_instance_method(_snap.TTable_GetDstCol)
    SetDstCol = _swig_new_instance_method(_snap.TTable_SetDstCol)
    AddEdgeAttr = _swig_new_instance_method(_snap.TTable_AddEdgeAttr)
    AddSrcNodeAttr = _swig_new_instance_method(_snap.TTable_AddSrcNodeAttr)
    AddDstNodeAttr = _swig_new_instance_method(_snap.TTable_AddDstNodeAttr)
    AddNodeAttr = _swig_new_instance_method(_snap.TTable_AddNodeAttr)
    SetCommonNodeAttrs = _swig_new_instance_method(_snap.TTable_SetCommonNodeAttrs)
    GetSrcNodeIntAttrV = _swig_new_instance_method(_snap.TTable_GetSrcNodeIntAttrV)
    GetDstNodeIntAttrV = _swig_new_instance_method(_snap.TTable_GetDstNodeIntAttrV)
    GetEdgeIntAttrV = _swig_new_instance_method(_snap.TTable_GetEdgeIntAttrV)
    GetSrcNodeFltAttrV = _swig_new_instance_method(_snap.TTable_GetSrcNodeFltAttrV)
    GetDstNodeFltAttrV = _swig_new_instance_method(_snap.TTable_GetDstNodeFltAttrV)
    GetEdgeFltAttrV = _swig_new_instance_method(_snap.TTable_GetEdgeFltAttrV)
    GetSrcNodeStrAttrV = _swig_new_instance_method(_snap.TTable_GetSrcNodeStrAttrV)
    GetDstNodeStrAttrV = _swig_new_instance_method(_snap.TTable_GetDstNodeStrAttrV)
    GetEdgeStrAttrV = _swig_new_instance_method(_snap.TTable_GetEdgeStrAttrV)
    GetNodeTable = _swig_new_static_method(_snap.TTable_GetNodeTable)
    GetEdgeTable = _swig_new_static_method(_snap.TTable_GetEdgeTable)
    GetFltNodePropertyTable = _swig_new_static_method(_snap.TTable_GetFltNodePropertyTable)
    GetColType = _swig_new_instance_method(_snap.TTable_GetColType)
    GetNumRows = _swig_new_instance_method(_snap.TTable_GetNumRows)
    GetNumValidRows = _swig_new_instance_method(_snap.TTable_GetNumValidRows)
    GetRowIdMap = _swig_new_instance_method(_snap.TTable_GetRowIdMap)
    BegRI = _swig_new_instance_method(_snap.TTable_BegRI)
    EndRI = _swig_new_instance_method(_snap.TTable_EndRI)
    BegRIWR = _swig_new_instance_method(_snap.TTable_BegRIWR)
    EndRIWR = _swig_new_instance_method(_snap.TTable_EndRIWR)
    GetPartitionRanges = _swig_new_instance_method(_snap.TTable_GetPartitionRanges)
    Rename = _swig_new_instance_method(_snap.TTable_Rename)
    Unique = _swig_new_instance_method(_snap.TTable_Unique)
    Select = _swig_new_instance_method(_snap.TTable_Select)
    Classify = _swig_new_instance_method(_snap.TTable_Classify)
    SelectAtomic = _swig_new_instance_method(_snap.TTable_SelectAtomic)
    ClassifyAtomic = _swig_new_instance_method(_snap.TTable_ClassifyAtomic)
    SelectAtomicConst = _swig_new_instance_method(_snap.TTable_SelectAtomicConst)
    SelectAtomicIntConst = _swig_new_instance_method(_snap.TTable_SelectAtomicIntConst)
    SelectAtomicStrConst = _swig_new_instance_method(_snap.TTable_SelectAtomicStrConst)
    SelectAtomicFltConst = _swig_new_instance_method(_snap.TTable_SelectAtomicFltConst)
    Group = _swig_new_instance_method(_snap.TTable_Group)
    Count = _swig_new_instance_method(_snap.TTable_Count)
    Order = _swig_new_instance_method(_snap.TTable_Order)
    Aggregate = _swig_new_instance_method(_snap.TTable_Aggregate)
    AggregateCols = _swig_new_instance_method(_snap.TTable_AggregateCols)
    SpliceByGroup = _swig_new_instance_method(_snap.TTable_SpliceByGroup)
    Join = _swig_new_instance_method(_snap.TTable_Join)
    ThresholdJoin = _swig_new_instance_method(_snap.TTable_ThresholdJoin)
    SelfJoin = _swig_new_instance_method(_snap.TTable_SelfJoin)
    SelfSimJoin = _swig_new_instance_method(_snap.TTable_SelfSimJoin)
    SelfSimJoinPerGroup = _swig_new_instance_method(_snap.TTable_SelfSimJoinPerGroup)
    SimJoin = _swig_new_instance_method(_snap.TTable_SimJoin)
    SelectFirstNRows = _swig_new_instance_method(_snap.TTable_SelectFirstNRows)
    Defrag = _swig_new_instance_method(_snap.TTable_Defrag)
    StoreIntCol = _swig_new_instance_method(_snap.TTable_StoreIntCol)
    StoreFltCol = _swig_new_instance_method(_snap.TTable_StoreFltCol)
    StoreStrCol = _swig_new_instance_method(_snap.TTable_StoreStrCol)
    UpdateFltFromTable = _swig_new_instance_method(_snap.TTable_UpdateFltFromTable)
    Union = _swig_new_instance_method(_snap.TTable_Union)
    UnionAll = _swig_new_instance_method(_snap.TTable_UnionAll)
    UnionAllInPlace = _swig_new_instance_method(_snap.TTable_UnionAllInPlace)
    Intersection = _swig_new_instance_method(_snap.TTable_Intersection)
    Minus = _swig_new_instance_method(_snap.TTable_Minus)
    Project = _swig_new_instance_method(_snap.TTable_Project)
    ProjectInPlace = _swig_new_instance_method(_snap.TTable_ProjectInPlace)
    ColMin = _swig_new_instance_method(_snap.TTable_ColMin)
    ColMax = _swig_new_instance_method(_snap.TTable_ColMax)
    ColGenericOp = _swig_new_instance_method(_snap.TTable_ColGenericOp)
    ColAdd = _swig_new_instance_method(_snap.TTable_ColAdd)
    ColSub = _swig_new_instance_method(_snap.TTable_ColSub)
    ColMul = _swig_new_instance_method(_snap.TTable_ColMul)
    ColDiv = _swig_new_instance_method(_snap.TTable_ColDiv)
    ColMod = _swig_new_instance_method(_snap.TTable_ColMod)
    ColConcat = _swig_new_instance_method(_snap.TTable_ColConcat)
    ColConcatConst = _swig_new_instance_method(_snap.TTable_ColConcatConst)
    ReadIntCol = _swig_new_instance_method(_snap.TTable_ReadIntCol)
    ReadFltCol = _swig_new_instance_method(_snap.TTable_ReadFltCol)
    ReadStrCol = _swig_new_instance_method(_snap.TTable_ReadStrCol)
    InitIds = _swig_new_instance_method(_snap.TTable_InitIds)
    IsNextK = _swig_new_instance_method(_snap.TTable_IsNextK)
    PrintSize = _swig_new_instance_method(_snap.TTable_PrintSize)
    PrintContextSize = _swig_new_instance_method(_snap.TTable_PrintContextSize)
    GetMemUsedKB = _swig_new_instance_method(_snap.TTable_GetMemUsedKB)
    GetContextMemUsedKB = _swig_new_instance_method(_snap.TTable_GetContextMemUsedKB)
    __swig_destroy__ = _snap.delete_TTable

# Register TTable in _snap:
_snap.TTable_swigregister(TTable)
TTable_SetMP = _snap.TTable_SetMP
TTable_GetMP = _snap.TTable_GetMP
TTable_NormalizeColName = _snap.TTable_NormalizeColName
TTable_NormalizeColNameV = _snap.TTable_NormalizeColNameV
TTable_New = _snap.TTable_New
TTable_LoadSS = _snap.TTable_LoadSS
TTable_Load = _snap.TTable_Load
TTable_LoadShM = _snap.TTable_LoadShM
TTable_TableFromHashMap = _snap.TTable_TableFromHashMap
TTable_GetNodeTable = _snap.TTable_GetNodeTable
TTable_GetEdgeTable = _snap.TTable_GetEdgeTable
TTable_GetFltNodePropertyTable = _snap.TTable_GetFltNodePropertyTable

class TAttr(object):
    r"""Proxy of C++ TAttr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAttr self) -> TAttr
        __init__(TAttr self, TAttr Attrs) -> TAttr

        Parameters
        ----------
        Attrs: TAttr const &

        __init__(TAttr self, TSIn SIn) -> TAttr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAttr_swiginit(self, _snap.new_TAttr(*args))
    Load = _swig_new_instance_method(_snap.TAttr_Load)
    Save = _swig_new_instance_method(_snap.TAttr_Save)
    Clr = _swig_new_instance_method(_snap.TAttr_Clr)
    GetMemUsed = _swig_new_instance_method(_snap.TAttr_GetMemUsed)
    AddSAttrDat = _swig_new_instance_method(_snap.TAttr_AddSAttrDat)
    GetSAttrDat = _swig_new_instance_method(_snap.TAttr_GetSAttrDat)
    DelSAttrDat = _swig_new_instance_method(_snap.TAttr_DelSAttrDat)
    DelSAttrId = _swig_new_instance_method(_snap.TAttr_DelSAttrId)
    GetSAttrV = _swig_new_instance_method(_snap.TAttr_GetSAttrV)
    GetIdVSAttr = _swig_new_instance_method(_snap.TAttr_GetIdVSAttr)
    AddSAttr = _swig_new_instance_method(_snap.TAttr_AddSAttr)
    GetSAttrId = _swig_new_instance_method(_snap.TAttr_GetSAttrId)
    GetSAttrName = _swig_new_instance_method(_snap.TAttr_GetSAttrName)
    __swig_destroy__ = _snap.delete_TAttr

# Register TAttr in _snap:
_snap.TAttr_swigregister(TAttr)

class TAttrPair(object):
    r"""Proxy of C++ TAttrPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAttrPair self) -> TAttrPair
        __init__(TAttrPair self, TAttrPair Attrs) -> TAttrPair

        Parameters
        ----------
        Attrs: TAttrPair const &

        __init__(TAttrPair self, TSIn SIn) -> TAttrPair

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAttrPair_swiginit(self, _snap.new_TAttrPair(*args))
    Save = _swig_new_instance_method(_snap.TAttrPair_Save)
    Clr = _swig_new_instance_method(_snap.TAttrPair_Clr)
    AddSAttrDat = _swig_new_instance_method(_snap.TAttrPair_AddSAttrDat)
    GetSAttrDat = _swig_new_instance_method(_snap.TAttrPair_GetSAttrDat)
    DelSAttrDat = _swig_new_instance_method(_snap.TAttrPair_DelSAttrDat)
    DelSAttrId = _swig_new_instance_method(_snap.TAttrPair_DelSAttrId)
    GetSAttrV = _swig_new_instance_method(_snap.TAttrPair_GetSAttrV)
    GetIdVSAttr = _swig_new_instance_method(_snap.TAttrPair_GetIdVSAttr)
    AddSAttr = _swig_new_instance_method(_snap.TAttrPair_AddSAttr)
    GetSAttrId = _swig_new_instance_method(_snap.TAttrPair_GetSAttrId)
    GetSAttrName = _swig_new_instance_method(_snap.TAttrPair_GetSAttrName)
    __swig_destroy__ = _snap.delete_TAttrPair

# Register TAttrPair in _snap:
_snap.TAttrPair_swigregister(TAttrPair)

CalcEffDiam = _snap.CalcEffDiam
CalcEffDiamPdf = _snap.CalcEffDiamPdf
CalcAvgDiamPdf = _snap.CalcAvgDiamPdf
GetDegreeCentr = _snap.GetDegreeCentr
GetGroupDegreeCentr = _snap.GetGroupDegreeCentr
GetGroupClosenessCentr = _snap.GetGroupClosenessCentr
MaxCPGreedyBetter = _snap.MaxCPGreedyBetter
MaxCPGreedyBetter1 = _snap.MaxCPGreedyBetter1
MaxCPGreedyBetter2 = _snap.MaxCPGreedyBetter2
MaxCPGreedyBetter3 = _snap.MaxCPGreedyBetter3
EventImportance = _snap.EventImportance
Intersect = _snap.Intersect
Intersect1 = _snap.Intersect1
LoadNodeList = _snap.LoadNodeList
GetWeightedFarnessCentr = _snap.GetWeightedFarnessCentr
GetWeightedClosenessCentr = _snap.GetWeightedClosenessCentr
GetWeightedBetweennessCentr = _snap.GetWeightedBetweennessCentr
GetEigenVectorCentr = _snap.GetEigenVectorCentr
GetWeightedPageRank = _snap.GetWeightedPageRank
GetWeightedShortestPath = _snap.GetWeightedShortestPath
CommunityGirvanNewman = _snap.CommunityGirvanNewman
CommunityCNM = _snap.CommunityCNM
Infomap = _snap.Infomap
InfomapOnline = _snap.InfomapOnline
CmtyEvolutionFileBatch = _snap.CmtyEvolutionFileBatch
CmtyEvolutionFileBatchV = _snap.CmtyEvolutionFileBatchV
CmtyEvolutionJson = _snap.CmtyEvolutionJson
CmtyTest = _snap.CmtyTest
ReebSimplify = _snap.ReebSimplify
ReebRefine = _snap.ReebRefine
CmtyGirvanNewmanStep = _snap.CmtyGirvanNewmanStep
GetBiConSzCnt = _snap.GetBiConSzCnt
GetBiCon = _snap.GetBiCon
GetArtPoints = _snap.GetArtPoints
GetEdgeBridges = _snap.GetEdgeBridges
Get1CnComSzCnt = _snap.Get1CnComSzCnt
Get1CnCom = _snap.Get1CnCom
GetMxBiCon = _snap.GetMxBiCon
class TCnCom(object):
    r"""Proxy of C++ TCnCom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NIdV = property(_snap.TCnCom_NIdV_get, _snap.TCnCom_NIdV_set, doc=r"""NIdV : TIntV""")

    def __init__(self, *args):
        r"""
        __init__(TCnCom self) -> TCnCom
        __init__(TCnCom self, TIntV NodeIdV) -> TCnCom

        Parameters
        ----------
        NodeIdV: TIntV const &

        __init__(TCnCom self, TCnCom CC) -> TCnCom

        Parameters
        ----------
        CC: TCnCom const &

        __init__(TCnCom self, TSIn SIn) -> TCnCom

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TCnCom_swiginit(self, _snap.new_TCnCom(*args))
    Save = _swig_new_instance_method(_snap.TCnCom_Save)
    __eq__ = _swig_new_instance_method(_snap.TCnCom___eq__)
    __lt__ = _swig_new_instance_method(_snap.TCnCom___lt__)
    Len = _swig_new_instance_method(_snap.TCnCom_Len)
    Empty = _swig_new_instance_method(_snap.TCnCom_Empty)
    Clr = _swig_new_instance_method(_snap.TCnCom_Clr)
    Add = _swig_new_instance_method(_snap.TCnCom_Add)
    __call__ = _swig_new_instance_method(_snap.TCnCom___call__)
    GetVal = _swig_new_instance_method(_snap.TCnCom_GetVal)
    Sort = _swig_new_instance_method(_snap.TCnCom_Sort)
    IsNIdIn = _swig_new_instance_method(_snap.TCnCom_IsNIdIn)
    GetRndNId = _swig_new_instance_method(_snap.TCnCom_GetRndNId)
    Dump = _swig_new_static_method(_snap.TCnCom_Dump)
    SaveTxt = _swig_new_static_method(_snap.TCnCom_SaveTxt)
    GetPrimHashCd = _swig_new_instance_method(_snap.TCnCom_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TCnCom_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TCnCom

# Register TCnCom in _snap:
_snap.TCnCom_swigregister(TCnCom)
TCnCom_Dump = _snap.TCnCom_Dump
TCnCom_SaveTxt = _snap.TCnCom_SaveTxt

class TArtPointVisitor(object):
    r"""Proxy of C++ TArtPointVisitor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = property(_snap.TArtPointVisitor_VnLowH_get, _snap.TArtPointVisitor_VnLowH_set, doc=r"""VnLowH : THash<(TInt,TIntPr)>""")
    ParentH = property(_snap.TArtPointVisitor_ParentH_get, _snap.TArtPointVisitor_ParentH_set, doc=r"""ParentH : THash<(TInt,TInt)>""")
    ArtSet = property(_snap.TArtPointVisitor_ArtSet_get, _snap.TArtPointVisitor_ArtSet_set, doc=r"""ArtSet : TIntSet""")
    Time = property(_snap.TArtPointVisitor_Time_get, _snap.TArtPointVisitor_Time_set, doc=r"""Time : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TArtPointVisitor self) -> TArtPointVisitor
        __init__(TArtPointVisitor self, int const & Nodes) -> TArtPointVisitor

        Parameters
        ----------
        Nodes: int const &

        """
        _snap.TArtPointVisitor_swiginit(self, _snap.new_TArtPointVisitor(*args))
    DiscoverNode = _swig_new_instance_method(_snap.TArtPointVisitor_DiscoverNode)
    FinishNode = _swig_new_instance_method(_snap.TArtPointVisitor_FinishNode)
    ExamineEdge = _swig_new_instance_method(_snap.TArtPointVisitor_ExamineEdge)
    TreeEdge = _swig_new_instance_method(_snap.TArtPointVisitor_TreeEdge)
    BackEdge = _swig_new_instance_method(_snap.TArtPointVisitor_BackEdge)
    FwdEdge = _swig_new_instance_method(_snap.TArtPointVisitor_FwdEdge)
    __swig_destroy__ = _snap.delete_TArtPointVisitor

# Register TArtPointVisitor in _snap:
_snap.TArtPointVisitor_swigregister(TArtPointVisitor)

class TBiConVisitor(object):
    r"""Proxy of C++ TBiConVisitor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = property(_snap.TBiConVisitor_VnLowH_get, _snap.TBiConVisitor_VnLowH_set, doc=r"""VnLowH : THash<(TInt,TIntPr)>""")
    ParentH = property(_snap.TBiConVisitor_ParentH_get, _snap.TBiConVisitor_ParentH_set, doc=r"""ParentH : THash<(TInt,TInt)>""")
    Stack = property(_snap.TBiConVisitor_Stack_get, _snap.TBiConVisitor_Stack_set, doc=r"""Stack : TSStack<(TIntPr)>""")
    CnComV = property(_snap.TBiConVisitor_CnComV_get, _snap.TBiConVisitor_CnComV_set, doc=r"""CnComV : TCnComV""")
    NSet = property(_snap.TBiConVisitor_NSet_get, _snap.TBiConVisitor_NSet_set, doc=r"""NSet : TIntSet""")
    Time = property(_snap.TBiConVisitor_Time_get, _snap.TBiConVisitor_Time_set, doc=r"""Time : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TBiConVisitor self) -> TBiConVisitor
        __init__(TBiConVisitor self, int const & Nodes) -> TBiConVisitor

        Parameters
        ----------
        Nodes: int const &

        """
        _snap.TBiConVisitor_swiginit(self, _snap.new_TBiConVisitor(*args))
    DiscoverNode = _swig_new_instance_method(_snap.TBiConVisitor_DiscoverNode)
    FinishNode = _swig_new_instance_method(_snap.TBiConVisitor_FinishNode)
    ExamineEdge = _swig_new_instance_method(_snap.TBiConVisitor_ExamineEdge)
    TreeEdge = _swig_new_instance_method(_snap.TBiConVisitor_TreeEdge)
    BackEdge = _swig_new_instance_method(_snap.TBiConVisitor_BackEdge)
    FwdEdge = _swig_new_instance_method(_snap.TBiConVisitor_FwdEdge)
    __swig_destroy__ = _snap.delete_TBiConVisitor

# Register TBiConVisitor in _snap:
_snap.TBiConVisitor_swigregister(TBiConVisitor)

class TForestFire(object):
    r"""Proxy of C++ TForestFire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TForestFire self) -> TForestFire
        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb=1.0, int const & RndSeed=1) -> TForestFire

        Parameters
        ----------
        GraphPt: PNGraph const &
        ForwBurnProb: double const &
        BackBurnProb: double const &
        DecayProb: double const &
        RndSeed: int const &

        """
        _snap.TForestFire_swiginit(self, _snap.new_TForestFire(*args))
    SetGraph = _swig_new_instance_method(_snap.TForestFire_SetGraph)
    GetGraph = _swig_new_instance_method(_snap.TForestFire_GetGraph)
    SetBurnProb = _swig_new_instance_method(_snap.TForestFire_SetBurnProb)
    SetProbDecay = _swig_new_instance_method(_snap.TForestFire_SetProbDecay)
    Infect = _swig_new_instance_method(_snap.TForestFire_Infect)
    InfectAll = _swig_new_instance_method(_snap.TForestFire_InfectAll)
    InfectRnd = _swig_new_instance_method(_snap.TForestFire_InfectRnd)
    BurnExpFire = _swig_new_instance_method(_snap.TForestFire_BurnExpFire)
    BurnGeoFire = _swig_new_instance_method(_snap.TForestFire_BurnGeoFire)
    GetFireTm = _swig_new_instance_method(_snap.TForestFire_GetFireTm)
    GetBurned = _swig_new_instance_method(_snap.TForestFire_GetBurned)
    GetBurnedNId = _swig_new_instance_method(_snap.TForestFire_GetBurnedNId)
    GetBurnedNIdV = _swig_new_instance_method(_snap.TForestFire_GetBurnedNIdV)
    PlotFire = _swig_new_instance_method(_snap.TForestFire_PlotFire)
    GenGraph = _swig_new_static_method(_snap.TForestFire_GenGraph)
    __swig_destroy__ = _snap.delete_TForestFire

# Register TForestFire in _snap:
_snap.TForestFire_swigregister(TForestFire)
TForestFire_GenGraph = _snap.TForestFire_GenGraph

class TFfGGen(object):
    r"""Proxy of C++ TFfGGen class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    srUndef = _snap.TFfGGen_srUndef
    
    srOk = _snap.TFfGGen_srOk
    
    srFlood = _snap.TFfGGen_srFlood
    
    srTimeLimit = _snap.TFfGGen_srTimeLimit
    
    TimeLimitSec = property(_snap.TFfGGen_TimeLimitSec_get, _snap.TFfGGen_TimeLimitSec_set, doc=r"""TimeLimitSec : int""")

    def __init__(self, BurnExpFireP, StartNNodes, ForwBurnProb, BackBurnProb, DecayProb, Take2AmbasPrb, OrphanPrb):
        r"""
        __init__(TFfGGen self, bool const & BurnExpFireP, int const & StartNNodes, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb, double const & Take2AmbasPrb, double const & OrphanPrb) -> TFfGGen

        Parameters
        ----------
        BurnExpFireP: bool const &
        StartNNodes: int const &
        ForwBurnProb: double const &
        BackBurnProb: double const &
        DecayProb: double const &
        Take2AmbasPrb: double const &
        OrphanPrb: double const &

        """
        _snap.TFfGGen_swiginit(self, _snap.new_TFfGGen(BurnExpFireP, StartNNodes, ForwBurnProb, BackBurnProb, DecayProb, Take2AmbasPrb, OrphanPrb))
    GetGraph = _swig_new_instance_method(_snap.TFfGGen_GetGraph)
    SetGraph = _swig_new_instance_method(_snap.TFfGGen_SetGraph)
    Clr = _swig_new_instance_method(_snap.TFfGGen_Clr)
    GetParamStr = _swig_new_instance_method(_snap.TFfGGen_GetParamStr)
    AddNodes = _swig_new_instance_method(_snap.TFfGGen_AddNodes)
    GenGraph = _swig_new_instance_method(_snap.TFfGGen_GenGraph)
    PlotFireSize = _swig_new_instance_method(_snap.TFfGGen_PlotFireSize)
    GenFFGraphs = _swig_new_static_method(_snap.TFfGGen_GenFFGraphs)
    __swig_destroy__ = _snap.delete_TFfGGen

# Register TFfGGen in _snap:
_snap.TFfGGen_swigregister(TFfGGen)
TFfGGen_GenFFGraphs = _snap.TFfGGen_GenFFGraphs

class TUndirFFire(object):
    r"""Proxy of C++ TUndirFFire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _BurnProb=0.3):
        r"""
        __init__(TUndirFFire self, double const & _BurnProb=0.3) -> TUndirFFire

        Parameters
        ----------
        _BurnProb: double const &

        """
        _snap.TUndirFFire_swiginit(self, _snap.new_TUndirFFire(_BurnProb))
    SetGraph = _swig_new_instance_method(_snap.TUndirFFire_SetGraph)
    GetGraph = _swig_new_instance_method(_snap.TUndirFFire_GetGraph)
    GetNBurned = _swig_new_instance_method(_snap.TUndirFFire_GetNBurned)
    GetBurnedNId = _swig_new_instance_method(_snap.TUndirFFire_GetBurnedNId)
    BurnGeoFire = _swig_new_instance_method(_snap.TUndirFFire_BurnGeoFire)
    AddNodes = _swig_new_instance_method(_snap.TUndirFFire_AddNodes)
    __swig_destroy__ = _snap.delete_TUndirFFire

# Register TUndirFFire in _snap:
_snap.TUndirFFire_swigregister(TUndirFFire)

class TNGraphMtx(object):
    r"""Proxy of C++ TNGraphMtx class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraphMtx self, PNGraph GraphPt) -> TNGraphMtx

        Parameters
        ----------
        GraphPt: PNGraph const &

        __init__(TNGraphMtx self, TNGraphMtx GraphMtx) -> TNGraphMtx

        Parameters
        ----------
        GraphMtx: TNGraphMtx const &

        """
        _snap.TNGraphMtx_swiginit(self, _snap.new_TNGraphMtx(*args))
    PGetRows = _swig_new_instance_method(_snap.TNGraphMtx_PGetRows)
    PGetCols = _swig_new_instance_method(_snap.TNGraphMtx_PGetCols)
    PMultiply = _swig_new_instance_method(_snap.TNGraphMtx_PMultiply)
    PMultiplyT = _swig_new_instance_method(_snap.TNGraphMtx_PMultiplyT)
    __swig_destroy__ = _snap.delete_TNGraphMtx

# Register TNGraphMtx in _snap:
_snap.TNGraphMtx_swigregister(TNGraphMtx)

class TUNGraphMtx(object):
    r"""Proxy of C++ TUNGraphMtx class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraphMtx self, PUNGraph GraphPt) -> TUNGraphMtx

        Parameters
        ----------
        GraphPt: PUNGraph const &

        __init__(TUNGraphMtx self, TUNGraphMtx GraphMtx) -> TUNGraphMtx

        Parameters
        ----------
        GraphMtx: TUNGraphMtx const &

        """
        _snap.TUNGraphMtx_swiginit(self, _snap.new_TUNGraphMtx(*args))
    PGetRows = _swig_new_instance_method(_snap.TUNGraphMtx_PGetRows)
    PGetCols = _swig_new_instance_method(_snap.TUNGraphMtx_PGetCols)
    PMultiply = _swig_new_instance_method(_snap.TUNGraphMtx_PMultiply)
    PMultiplyT = _swig_new_instance_method(_snap.TUNGraphMtx_PMultiplyT)
    __swig_destroy__ = _snap.delete_TUNGraphMtx

# Register TUNGraphMtx in _snap:
_snap.TUNGraphMtx_swigregister(TUNGraphMtx)

GetSngVals = _snap.GetSngVals
GetSngVec = _snap.GetSngVec
GetEigVals = _snap.GetEigVals
GetEigVec = _snap.GetEigVec
GetInvParticipRat = _snap.GetInvParticipRat
GetInvParticipRatEig = _snap.GetInvParticipRatEig
LoadEdgeListNet = _snap.LoadEdgeListNet
LoadDyNet = _snap.LoadDyNet
LoadDyNetGraphV = _snap.LoadDyNetGraphV
SaveEdgeListNet = _snap.SaveEdgeListNet
gvlDot = _snap.gvlDot

gvlNeato = _snap.gvlNeato

gvlTwopi = _snap.gvlTwopi

gvlCirco = _snap.gvlCirco

gvlSfdp = _snap.gvlSfdp

GVizDoLayout = _snap.GVizDoLayout
GVizGetLayoutStr = _snap.GVizGetLayoutStr
GenRndBipart = _snap.GenRndBipart
GenRndDegK = _snap.GenRndDegK
GenRndPowerLaw = _snap.GenRndPowerLaw
GenDegSeq = _snap.GenDegSeq
GenPrefAttach = _snap.GenPrefAttach
GenGeoPrefAttach = _snap.GenGeoPrefAttach
GenSmallWorld = _snap.GenSmallWorld
GenForestFire = _snap.GenForestFire
GenCopyModel = _snap.GenCopyModel
GenRMat = _snap.GenRMat
GenRMatEpinions = _snap.GenRMatEpinions
GenRewire = _snap.GenRewire
GenConfModel = _snap.GenConfModel
GetSubGraph = _snap.GetSubGraph
GetEgonet = _snap.GetEgonet
GetCommon = _snap.GetCommon
PlotEigValRank = _snap.PlotEigValRank
PlotEigValDistr = _snap.PlotEigValDistr
PlotInvParticipRat = _snap.PlotInvParticipRat
PlotSngValRank = _snap.PlotSngValRank
PlotSngValDistr = _snap.PlotSngValDistr
PlotSngVec = _snap.PlotSngVec
class TIntPr(object):
    r"""Proxy of C++ TPair< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntPr_Val1_get, _snap.TIntPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntPr_Val2_get, _snap.TIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntPr self) -> TIntPr
        __init__(TIntPr self, TIntPr Pair) -> TIntPr

        Parameters
        ----------
        Pair: TPair< TInt,TInt > const &

        __init__(TIntPr self, TInt _Val1, TInt _Val2) -> TIntPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &

        __init__(TIntPr self, TSIn SIn) -> TIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPr_swiginit(self, _snap.new_TIntPr(*args))
    Save = _swig_new_instance_method(_snap.TIntPr_Save)
    Load = _swig_new_instance_method(_snap.TIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntPr

# Register TIntPr in _snap:
_snap.TIntPr_swigregister(TIntPr)
EDGES_START = cvar.EDGES_START
NODES_START = cvar.NODES_START
END_SENTINEL = cvar.END_SENTINEL
SRC_ID_NAME = cvar.SRC_ID_NAME
DST_ID_NAME = cvar.DST_ID_NAME
NID_NAME = cvar.NID_NAME
INT_TYPE_PREFIX = cvar.INT_TYPE_PREFIX
FLT_TYPE_PREFIX = cvar.FLT_TYPE_PREFIX
STR_TYPE_PREFIX = cvar.STR_TYPE_PREFIX
NULL_VAL = cvar.NULL_VAL

class TFltPr(object):
    r"""Proxy of C++ TPair< TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltPr_Val1_get, _snap.TFltPr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltPr_Val2_get, _snap.TFltPr_Val2_set, doc=r"""Val2 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TFltPr self) -> TFltPr
        __init__(TFltPr self, TFltPr Pair) -> TFltPr

        Parameters
        ----------
        Pair: TPair< TFlt,TFlt > const &

        __init__(TFltPr self, TFlt _Val1, TFlt _Val2) -> TFltPr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TFlt const &

        __init__(TFltPr self, TSIn SIn) -> TFltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltPr_swiginit(self, _snap.new_TFltPr(*args))
    Save = _swig_new_instance_method(_snap.TFltPr_Save)
    Load = _swig_new_instance_method(_snap.TFltPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TFltPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltPr_GetVal2)
    __swig_destroy__ = _snap.delete_TFltPr

# Register TFltPr in _snap:
_snap.TFltPr_swigregister(TFltPr)

class TStrIntPr(object):
    r"""Proxy of C++ TPair< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrIntPr_Val1_get, _snap.TStrIntPr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrIntPr_Val2_get, _snap.TStrIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TStrIntPr self) -> TStrIntPr
        __init__(TStrIntPr self, TStrIntPr Pair) -> TStrIntPr

        Parameters
        ----------
        Pair: TPair< TStr,TInt > const &

        __init__(TStrIntPr self, TStr _Val1, TInt _Val2) -> TStrIntPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TInt const &

        __init__(TStrIntPr self, TSIn SIn) -> TStrIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPr_swiginit(self, _snap.new_TStrIntPr(*args))
    Save = _swig_new_instance_method(_snap.TStrIntPr_Save)
    Load = _swig_new_instance_method(_snap.TStrIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrIntPr

# Register TStrIntPr in _snap:
_snap.TStrIntPr_swigregister(TStrIntPr)

class TIntTr(object):
    r"""Proxy of C++ TTriple< TInt,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntTr_Val1_get, _snap.TIntTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntTr_Val2_get, _snap.TIntTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TIntTr_Val3_get, _snap.TIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntTr self) -> TIntTr
        __init__(TIntTr self, TIntTr Triple) -> TIntTr

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TInt > const &

        __init__(TIntTr self, TInt _Val1, TInt _Val2, TInt _Val3) -> TIntTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TInt const &

        __init__(TIntTr self, TSIn SIn) -> TIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntTr_swiginit(self, _snap.new_TIntTr(*args))
    Save = _swig_new_instance_method(_snap.TIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntTr

# Register TIntTr in _snap:
_snap.TIntTr_swigregister(TIntTr)

class TIntFltKd(object):
    r"""Proxy of C++ TKeyDat< TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntFltKd_Key_get, _snap.TIntFltKd_Key_set, doc=r"""Key : TInt""")
    Dat = property(_snap.TIntFltKd_Dat_get, _snap.TIntFltKd_Dat_set, doc=r"""Dat : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntFltKd self) -> TIntFltKd
        __init__(TIntFltKd self, TIntFltKd KeyDat) -> TIntFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TFlt > const &

        __init__(TIntFltKd self, TInt _Key) -> TIntFltKd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TIntFltKd self, TInt _Key, TFlt _Dat) -> TIntFltKd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TFlt const &

        __init__(TIntFltKd self, TSIn SIn) -> TIntFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltKd_swiginit(self, _snap.new_TIntFltKd(*args))
    Save = _swig_new_instance_method(_snap.TIntFltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntFltKd

# Register TIntFltKd in _snap:
_snap.TIntFltKd_swigregister(TIntFltKd)

class TIntStrPr(object):
    r"""Proxy of C++ TPair< TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntStrPr_Val1_get, _snap.TIntStrPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntStrPr_Val2_get, _snap.TIntStrPr_Val2_set, doc=r"""Val2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TIntStrPr self) -> TIntStrPr
        __init__(TIntStrPr self, TIntStrPr Pair) -> TIntStrPr

        Parameters
        ----------
        Pair: TPair< TInt,TStr > const &

        __init__(TIntStrPr self, TInt _Val1, TStr _Val2) -> TIntStrPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TStr const &

        __init__(TIntStrPr self, TSIn SIn) -> TIntStrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPr_swiginit(self, _snap.new_TIntStrPr(*args))
    Save = _swig_new_instance_method(_snap.TIntStrPr_Save)
    Load = _swig_new_instance_method(_snap.TIntStrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntStrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntStrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntStrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntStrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntStrPr

# Register TIntStrPr in _snap:
_snap.TIntStrPr_swigregister(TIntStrPr)

class TIntV(object):
    r"""Proxy of C++ TVec< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntV

    def __init__(self, *args):
        r"""
        __init__(TIntV self) -> TIntV
        __init__(TIntV self, TIntV Vec) -> TIntV

        Parameters
        ----------
        Vec: TVec< TInt,int > const &

        __init__(TIntV self, int const & _Vals) -> TIntV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntV self, int const & _MxVals, int const & _Vals) -> TIntV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntV self, TInt _ValT, int const & _Vals) -> TIntV

        Parameters
        ----------
        _ValT: TInt *
        _Vals: int const &

        __init__(TIntV self, TSIn SIn) -> TIntV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntV_swiginit(self, _snap.new_TIntV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntV_Load)
    Save = _swig_new_instance_method(_snap.TIntV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntV_Empty)
    Len = _swig_new_instance_method(_snap.TIntV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntV_GetI)
    Add = _swig_new_instance_method(_snap.TIntV_Add)
    AddV = _swig_new_instance_method(_snap.TIntV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntV_Ins)
    Del = _swig_new_instance_method(_snap.TIntV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntV_Union)
    Diff = _swig_new_instance_method(_snap.TIntV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntV_GetV)

# Register TIntV in _snap:
_snap.TIntV_swigregister(TIntV)
TIntV_SwapI = _snap.TIntV_SwapI
TIntV_GetV = _snap.TIntV_GetV

class TFltV(object):
    r"""Proxy of C++ TVec< TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltV

    def __init__(self, *args):
        r"""
        __init__(TFltV self) -> TFltV
        __init__(TFltV self, TFltV Vec) -> TFltV

        Parameters
        ----------
        Vec: TVec< TFlt,int > const &

        __init__(TFltV self, int const & _Vals) -> TFltV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltV self, int const & _MxVals, int const & _Vals) -> TFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltV self, TFlt _ValT, int const & _Vals) -> TFltV

        Parameters
        ----------
        _ValT: TFlt *
        _Vals: int const &

        __init__(TFltV self, TSIn SIn) -> TFltV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltV_swiginit(self, _snap.new_TFltV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltV_Load)
    Save = _swig_new_instance_method(_snap.TFltV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltV_Empty)
    Len = _swig_new_instance_method(_snap.TFltV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltV_GetI)
    Add = _swig_new_instance_method(_snap.TFltV_Add)
    AddV = _swig_new_instance_method(_snap.TFltV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltV_Ins)
    Del = _swig_new_instance_method(_snap.TFltV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltV_Union)
    Diff = _swig_new_instance_method(_snap.TFltV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltV_GetV)

# Register TFltV in _snap:
_snap.TFltV_swigregister(TFltV)
TFltV_SwapI = _snap.TFltV_SwapI
TFltV_GetV = _snap.TFltV_GetV

class TStrV(object):
    r"""Proxy of C++ TVec< TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrV

    def __init__(self, *args):
        r"""
        __init__(TStrV self) -> TStrV
        __init__(TStrV self, TStrV Vec) -> TStrV

        Parameters
        ----------
        Vec: TVec< TStr,int > const &

        __init__(TStrV self, int const & _Vals) -> TStrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrV self, int const & _MxVals, int const & _Vals) -> TStrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrV self, TStr _ValT, int const & _Vals) -> TStrV

        Parameters
        ----------
        _ValT: TStr *
        _Vals: int const &

        __init__(TStrV self, TSIn SIn) -> TStrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrV_swiginit(self, _snap.new_TStrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrV_Load)
    Save = _swig_new_instance_method(_snap.TStrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrV_GetV)

# Register TStrV in _snap:
_snap.TStrV_swigregister(TStrV)
TStrV_SwapI = _snap.TStrV_SwapI
TStrV_GetV = _snap.TStrV_GetV

class TIntPrV(object):
    r"""Proxy of C++ TVec< TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntPrV

    def __init__(self, *args):
        r"""
        __init__(TIntPrV self) -> TIntPrV
        __init__(TIntPrV self, TIntPrV Vec) -> TIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > const &

        __init__(TIntPrV self, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntPrV self, int const & _MxVals, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntPrV self, TIntPr _ValT, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TInt > *
        _Vals: int const &

        __init__(TIntPrV self, TSIn SIn) -> TIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrV_swiginit(self, _snap.new_TIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntPrV_GetV)

# Register TIntPrV in _snap:
_snap.TIntPrV_swigregister(TIntPrV)
TIntPrV_SwapI = _snap.TIntPrV_SwapI
TIntPrV_GetV = _snap.TIntPrV_GetV

class TFltPrV(object):
    r"""Proxy of C++ TVec< TFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltPrV

    def __init__(self, *args):
        r"""
        __init__(TFltPrV self) -> TFltPrV
        __init__(TFltPrV self, TFltPrV Vec) -> TFltPrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > const &

        __init__(TFltPrV self, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltPrV self, int const & _MxVals, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltPrV self, TFltPr _ValT, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _ValT: TPair< TFlt,TFlt > *
        _Vals: int const &

        __init__(TFltPrV self, TSIn SIn) -> TFltPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltPrV_swiginit(self, _snap.new_TFltPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltPrV_Load)
    Save = _swig_new_instance_method(_snap.TFltPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltPrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltPrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltPrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltPrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltPrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltPrV_GetV)

# Register TFltPrV in _snap:
_snap.TFltPrV_swigregister(TFltPrV)
TFltPrV_SwapI = _snap.TFltPrV_SwapI
TFltPrV_GetV = _snap.TFltPrV_GetV

class TStrIntPrV(object):
    r"""Proxy of C++ TVec< TStrIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrIntPrV

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrV self) -> TStrIntPrV
        __init__(TStrIntPrV self, TStrIntPrV Vec) -> TStrIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > const &

        __init__(TStrIntPrV self, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrIntPrV self, int const & _MxVals, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrIntPrV self, TStrIntPr _ValT, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _ValT: TPair< TStr,TInt > *
        _Vals: int const &

        __init__(TStrIntPrV self, TSIn SIn) -> TStrIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPrV_swiginit(self, _snap.new_TStrIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TStrIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrIntPrV_GetV)

# Register TStrIntPrV in _snap:
_snap.TStrIntPrV_swigregister(TStrIntPrV)
TStrIntPrV_SwapI = _snap.TStrIntPrV_SwapI
TStrIntPrV_GetV = _snap.TStrIntPrV_GetV

class TIntTrV(object):
    r"""Proxy of C++ TVec< TIntTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntTrV

    def __init__(self, *args):
        r"""
        __init__(TIntTrV self) -> TIntTrV
        __init__(TIntTrV self, TIntTrV Vec) -> TIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        __init__(TIntTrV self, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntTrV self, int const & _MxVals, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntTrV self, TIntTr _ValT, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TInt,TInt > *
        _Vals: int const &

        __init__(TIntTrV self, TSIn SIn) -> TIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntTrV_swiginit(self, _snap.new_TIntTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntTrV_GetV)

# Register TIntTrV in _snap:
_snap.TIntTrV_swigregister(TIntTrV)
TIntTrV_SwapI = _snap.TIntTrV_SwapI
TIntTrV_GetV = _snap.TIntTrV_GetV

class TIntFltKdV(object):
    r"""Proxy of C++ TVec< TIntFltKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntFltKdV

    def __init__(self, *args):
        r"""
        __init__(TIntFltKdV self) -> TIntFltKdV
        __init__(TIntFltKdV self, TIntFltKdV Vec) -> TIntFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        __init__(TIntFltKdV self, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntFltKdV self, int const & _MxVals, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntFltKdV self, TIntFltKd _ValT, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TFlt > *
        _Vals: int const &

        __init__(TIntFltKdV self, TSIn SIn) -> TIntFltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltKdV_swiginit(self, _snap.new_TIntFltKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltKdV_Load)
    Save = _swig_new_instance_method(_snap.TIntFltKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntFltKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntFltKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntFltKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntFltKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntFltKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntFltKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntFltKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntFltKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntFltKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntFltKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntFltKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntFltKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntFltKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntFltKdV_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntFltKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntFltKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntFltKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntFltKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntFltKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntFltKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltKdV_GetI)
    Add = _swig_new_instance_method(_snap.TIntFltKdV_Add)
    AddV = _swig_new_instance_method(_snap.TIntFltKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntFltKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntFltKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntFltKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntFltKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntFltKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntFltKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntFltKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntFltKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntFltKdV_Ins)
    Del = _swig_new_instance_method(_snap.TIntFltKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntFltKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntFltKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntFltKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntFltKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntFltKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntFltKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntFltKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntFltKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntFltKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntFltKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntFltKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntFltKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntFltKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntFltKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntFltKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntFltKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntFltKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntFltKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntFltKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntFltKdV_Union)
    Diff = _swig_new_instance_method(_snap.TIntFltKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntFltKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntFltKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntFltKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntFltKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntFltKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntFltKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntFltKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntFltKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntFltKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntFltKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntFltKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntFltKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntFltKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntFltKdV_GetV)

# Register TIntFltKdV in _snap:
_snap.TIntFltKdV_swigregister(TIntFltKdV)
TIntFltKdV_SwapI = _snap.TIntFltKdV_SwapI
TIntFltKdV_GetV = _snap.TIntFltKdV_GetV

class TIntIntVV(object):
    r"""Proxy of C++ TVec< TVec< TInt >,int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntVV

    def __init__(self, *args):
        r"""
        __init__(TIntIntVV self) -> TIntIntVV
        __init__(TIntIntVV self, TIntIntVV Vec) -> TIntIntVV

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > const &

        __init__(TIntIntVV self, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntIntVV self, int const & _MxVals, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntIntVV self, TIntV _ValT, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _ValT: TVec< TInt,int > *
        _Vals: int const &

        __init__(TIntIntVV self, TSIn SIn) -> TIntIntVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntVV_swiginit(self, _snap.new_TIntIntVV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntVV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntVV_Load)
    Save = _swig_new_instance_method(_snap.TIntIntVV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntIntVV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntIntVV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntVV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntVV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntIntVV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntVV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntVV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntIntVV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntIntVV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntIntVV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntIntVV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntIntVV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntIntVV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntIntVV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntIntVV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntIntVV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntIntVV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntIntVV_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntVV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntIntVV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntIntVV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntIntVV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntIntVV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntIntVV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntIntVV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntVV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntVV_GetI)
    Add = _swig_new_instance_method(_snap.TIntIntVV_Add)
    AddV = _swig_new_instance_method(_snap.TIntIntVV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntIntVV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntIntVV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntIntVV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntIntVV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntIntVV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntIntVV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntIntVV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntIntVV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntIntVV_Ins)
    Del = _swig_new_instance_method(_snap.TIntIntVV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntIntVV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntIntVV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntIntVV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntIntVV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntIntVV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntIntVV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntIntVV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntIntVV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntIntVV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntIntVV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntIntVV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntIntVV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntIntVV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntIntVV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntIntVV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntIntVV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntIntVV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntIntVV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntIntVV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntIntVV_Union)
    Diff = _swig_new_instance_method(_snap.TIntIntVV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntIntVV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntIntVV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntIntVV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntIntVV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntIntVV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntIntVV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntIntVV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntIntVV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntIntVV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntIntVV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntIntVV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntIntVV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntIntVV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntIntVV_GetV)

# Register TIntIntVV in _snap:
_snap.TIntIntVV_swigregister(TIntIntVV)
TIntIntVV_SwapI = _snap.TIntIntVV_SwapI
TIntIntVV_GetV = _snap.TIntIntVV_GetV

class TFltVFltV(object):
    r"""Proxy of C++ TVec< TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltVFltV

    def __init__(self, *args):
        r"""
        __init__(TFltVFltV self) -> TFltVFltV
        __init__(TFltVFltV self, TFltVFltV Vec) -> TFltVFltV

        Parameters
        ----------
        Vec: TVec< TVec< TFlt,int >,int > const &

        __init__(TFltVFltV self, int const & _Vals) -> TFltVFltV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltVFltV self, int const & _MxVals, int const & _Vals) -> TFltVFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltVFltV self, TFltV _ValT, int const & _Vals) -> TFltVFltV

        Parameters
        ----------
        _ValT: TVec< TFlt,int > *
        _Vals: int const &

        __init__(TFltVFltV self, TSIn SIn) -> TFltVFltV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltVFltV_swiginit(self, _snap.new_TFltVFltV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltVFltV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltVFltV_Load)
    Save = _swig_new_instance_method(_snap.TFltVFltV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltVFltV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltVFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltVFltV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltVFltV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltVFltV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltVFltV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltVFltV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltVFltV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltVFltV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltVFltV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltVFltV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltVFltV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltVFltV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltVFltV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltVFltV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltVFltV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltVFltV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltVFltV_Empty)
    Len = _swig_new_instance_method(_snap.TFltVFltV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltVFltV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltVFltV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltVFltV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltVFltV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltVFltV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltVFltV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltVFltV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltVFltV_GetI)
    Add = _swig_new_instance_method(_snap.TFltVFltV_Add)
    AddV = _swig_new_instance_method(_snap.TFltVFltV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltVFltV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltVFltV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltVFltV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltVFltV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltVFltV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltVFltV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltVFltV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltVFltV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltVFltV_Ins)
    Del = _swig_new_instance_method(_snap.TFltVFltV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltVFltV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltVFltV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltVFltV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltVFltV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltVFltV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltVFltV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltVFltV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltVFltV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltVFltV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltVFltV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltVFltV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltVFltV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltVFltV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltVFltV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltVFltV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltVFltV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltVFltV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltVFltV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltVFltV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltVFltV_Union)
    Diff = _swig_new_instance_method(_snap.TFltVFltV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltVFltV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltVFltV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltVFltV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltVFltV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltVFltV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltVFltV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltVFltV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltVFltV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltVFltV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltVFltV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltVFltV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltVFltV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltVFltV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltVFltV_GetV)

# Register TFltVFltV in _snap:
_snap.TFltVFltV_swigregister(TFltVFltV)
TFltVFltV_SwapI = _snap.TFltVFltV_SwapI
TFltVFltV_GetV = _snap.TFltVFltV_GetV

class PNEANetV(object):
    r"""Proxy of C++ TVec< PNEANet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_PNEANetV

    def __init__(self, *args):
        r"""
        __init__(PNEANetV self) -> PNEANetV
        __init__(PNEANetV self, PNEANetV Vec) -> PNEANetV

        Parameters
        ----------
        Vec: TVec< TPt< TNEANet >,int > const &

        __init__(PNEANetV self, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _Vals: int const &

        __init__(PNEANetV self, int const & _MxVals, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(PNEANetV self, PNEANet _ValT, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _ValT: TPt< TNEANet > *
        _Vals: int const &

        __init__(PNEANetV self, TSIn SIn) -> PNEANetV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.PNEANetV_swiginit(self, _snap.new_PNEANetV(*args))
    LoadShM = _swig_new_instance_method(_snap.PNEANetV_LoadShM)
    Load = _swig_new_instance_method(_snap.PNEANetV_Load)
    Save = _swig_new_instance_method(_snap.PNEANetV_Save)
    __add__ = _swig_new_instance_method(_snap.PNEANetV___add__)
    GetMemUsed = _swig_new_instance_method(_snap.PNEANetV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.PNEANetV_GetMemSize)
    Gen = _swig_new_instance_method(_snap.PNEANetV_Gen)
    GenExt = _swig_new_instance_method(_snap.PNEANetV_GenExt)
    IsExt = _swig_new_instance_method(_snap.PNEANetV_IsExt)
    Reserve = _swig_new_instance_method(_snap.PNEANetV_Reserve)
    Clr = _swig_new_instance_method(_snap.PNEANetV_Clr)
    Trunc = _swig_new_instance_method(_snap.PNEANetV_Trunc)
    Reduce = _swig_new_instance_method(_snap.PNEANetV_Reduce)
    Pack = _swig_new_instance_method(_snap.PNEANetV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.PNEANetV_MoveFrom)
    Empty = _swig_new_instance_method(_snap.PNEANetV_Empty)
    Len = _swig_new_instance_method(_snap.PNEANetV_Len)
    Reserved = _swig_new_instance_method(_snap.PNEANetV_Reserved)
    Last = _swig_new_instance_method(_snap.PNEANetV_Last)
    LastValN = _swig_new_instance_method(_snap.PNEANetV_LastValN)
    LastLast = _swig_new_instance_method(_snap.PNEANetV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.PNEANetV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.PNEANetV_BegI)
    EndI = _swig_new_instance_method(_snap.PNEANetV_EndI)
    GetI = _swig_new_instance_method(_snap.PNEANetV_GetI)
    Add = _swig_new_instance_method(_snap.PNEANetV_Add)
    AddV = _swig_new_instance_method(_snap.PNEANetV_AddV)
    GetVal = _swig_new_instance_method(_snap.PNEANetV_GetVal)
    SetVal = _swig_new_instance_method(_snap.PNEANetV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.PNEANetV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.PNEANetV_Ins)
    Del = _swig_new_instance_method(_snap.PNEANetV_Del)
    DelLast = _swig_new_instance_method(_snap.PNEANetV_DelLast)
    PutAll = _swig_new_instance_method(_snap.PNEANetV_PutAll)
    Swap = _swig_new_instance_method(_snap.PNEANetV_Swap)
    SwapI = _swig_new_static_method(_snap.PNEANetV_SwapI)
    Shuffle = _swig_new_instance_method(_snap.PNEANetV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.PNEANetV_Reverse)
    GetV = _swig_new_static_method(_snap.PNEANetV_GetV)

# Register PNEANetV in _snap:
_snap.PNEANetV_swigregister(PNEANetV)
PNEANetV_SwapI = _snap.PNEANetV_SwapI
PNEANetV_GetV = _snap.PNEANetV_GetV

class TBoolFltPr(object):
    r"""Proxy of C++ TPair< TBool,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TBoolFltPr_Val1_get, _snap.TBoolFltPr_Val1_set, doc=r"""Val1 : TBool""")
    Val2 = property(_snap.TBoolFltPr_Val2_get, _snap.TBoolFltPr_Val2_set, doc=r"""Val2 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TBoolFltPr self) -> TBoolFltPr
        __init__(TBoolFltPr self, TBoolFltPr Pair) -> TBoolFltPr

        Parameters
        ----------
        Pair: TPair< TBool,TFlt > const &

        __init__(TBoolFltPr self, TBool _Val1, TFlt _Val2) -> TBoolFltPr

        Parameters
        ----------
        _Val1: TBool const &
        _Val2: TFlt const &

        __init__(TBoolFltPr self, TSIn SIn) -> TBoolFltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBoolFltPr_swiginit(self, _snap.new_TBoolFltPr(*args))
    Save = _swig_new_instance_method(_snap.TBoolFltPr_Save)
    Load = _swig_new_instance_method(_snap.TBoolFltPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TBoolFltPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TBoolFltPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TBoolFltPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TBoolFltPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TBoolFltPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TBoolFltPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TBoolFltPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TBoolFltPr_GetVal2)
    __swig_destroy__ = _snap.delete_TBoolFltPr

# Register TBoolFltPr in _snap:
_snap.TBoolFltPr_swigregister(TBoolFltPr)

class TIntBoolPr(object):
    r"""Proxy of C++ TPair< TInt,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntBoolPr_Val1_get, _snap.TIntBoolPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntBoolPr_Val2_get, _snap.TIntBoolPr_Val2_set, doc=r"""Val2 : TBool""")

    def __init__(self, *args):
        r"""
        __init__(TIntBoolPr self) -> TIntBoolPr
        __init__(TIntBoolPr self, TIntBoolPr Pair) -> TIntBoolPr

        Parameters
        ----------
        Pair: TPair< TInt,TBool > const &

        __init__(TIntBoolPr self, TInt _Val1, TBool _Val2) -> TIntBoolPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TBool const &

        __init__(TIntBoolPr self, TSIn SIn) -> TIntBoolPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntBoolPr_swiginit(self, _snap.new_TIntBoolPr(*args))
    Save = _swig_new_instance_method(_snap.TIntBoolPr_Save)
    Load = _swig_new_instance_method(_snap.TIntBoolPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntBoolPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntBoolPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntBoolPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntBoolPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntBoolPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntBoolPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntBoolPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntBoolPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntBoolPr

# Register TIntBoolPr in _snap:
_snap.TIntBoolPr_swigregister(TIntBoolPr)

class TIntUInt64Pr(object):
    r"""Proxy of C++ TPair< TInt,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntUInt64Pr_Val1_get, _snap.TIntUInt64Pr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntUInt64Pr_Val2_get, _snap.TIntUInt64Pr_Val2_set, doc=r"""Val2 : TUInt64""")

    def __init__(self, *args):
        r"""
        __init__(TIntUInt64Pr self) -> TIntUInt64Pr
        __init__(TIntUInt64Pr self, TIntUInt64Pr Pair) -> TIntUInt64Pr

        Parameters
        ----------
        Pair: TPair< TInt,TUInt64 > const &

        __init__(TIntUInt64Pr self, TInt _Val1, TUInt64 _Val2) -> TIntUInt64Pr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TUInt64 const &

        __init__(TIntUInt64Pr self, TSIn SIn) -> TIntUInt64Pr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntUInt64Pr_swiginit(self, _snap.new_TIntUInt64Pr(*args))
    Save = _swig_new_instance_method(_snap.TIntUInt64Pr_Save)
    Load = _swig_new_instance_method(_snap.TIntUInt64Pr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntUInt64Pr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntUInt64Pr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntUInt64Pr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntUInt64Pr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntUInt64Pr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntUInt64Pr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntUInt64Pr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntUInt64Pr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntUInt64Pr

# Register TIntUInt64Pr in _snap:
_snap.TIntUInt64Pr_swigregister(TIntUInt64Pr)

class TIntIntPrPr(object):
    r"""Proxy of C++ TPair< TInt,TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntIntPrPr_Val1_get, _snap.TIntIntPrPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntIntPrPr_Val2_get, _snap.TIntIntPrPr_Val2_set, doc=r"""Val2 : TPair<(TInt,TInt)>""")

    def __init__(self, *args):
        r"""
        __init__(TIntIntPrPr self) -> TIntIntPrPr
        __init__(TIntIntPrPr self, TIntIntPrPr Pair) -> TIntIntPrPr

        Parameters
        ----------
        Pair: TPair< TInt,TIntPr > const &

        __init__(TIntIntPrPr self, TInt _Val1, TIntPr _Val2) -> TIntIntPrPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TPair< TInt,TInt > const &

        __init__(TIntIntPrPr self, TSIn SIn) -> TIntIntPrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntPrPr_swiginit(self, _snap.new_TIntIntPrPr(*args))
    Save = _swig_new_instance_method(_snap.TIntIntPrPr_Save)
    Load = _swig_new_instance_method(_snap.TIntIntPrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntIntPrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntPrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntPrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntPrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntPrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntIntPrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntIntPrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntIntPrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntIntPrPr

# Register TIntIntPrPr in _snap:
_snap.TIntIntPrPr_swigregister(TIntIntPrPr)

class TIntIntVPr(object):
    r"""Proxy of C++ TPair< TInt,TVec< TInt > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntIntVPr_Val1_get, _snap.TIntIntVPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntIntVPr_Val2_get, _snap.TIntIntVPr_Val2_set, doc=r"""Val2 : TVec<(TInt,int)>""")

    def __init__(self, *args):
        r"""
        __init__(TIntIntVPr self) -> TIntIntVPr
        __init__(TIntIntVPr self, TIntIntVPr Pair) -> TIntIntVPr

        Parameters
        ----------
        Pair: TPair< TInt,TVec< TInt > > const &

        __init__(TIntIntVPr self, TInt _Val1, TIntV _Val2) -> TIntIntVPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TVec< TInt,int > const &

        __init__(TIntIntVPr self, TSIn SIn) -> TIntIntVPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntVPr_swiginit(self, _snap.new_TIntIntVPr(*args))
    Save = _swig_new_instance_method(_snap.TIntIntVPr_Save)
    Load = _swig_new_instance_method(_snap.TIntIntVPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntIntVPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntVPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntVPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntVPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntVPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntIntVPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntIntVPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntIntVPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntIntVPr

# Register TIntIntVPr in _snap:
_snap.TIntIntVPr_swigregister(TIntIntVPr)

class TIntFltPr(object):
    r"""Proxy of C++ TPair< TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntFltPr_Val1_get, _snap.TIntFltPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntFltPr_Val2_get, _snap.TIntFltPr_Val2_set, doc=r"""Val2 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntFltPr self) -> TIntFltPr
        __init__(TIntFltPr self, TIntFltPr Pair) -> TIntFltPr

        Parameters
        ----------
        Pair: TPair< TInt,TFlt > const &

        __init__(TIntFltPr self, TInt _Val1, TFlt _Val2) -> TIntFltPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TFlt const &

        __init__(TIntFltPr self, TSIn SIn) -> TIntFltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltPr_swiginit(self, _snap.new_TIntFltPr(*args))
    Save = _swig_new_instance_method(_snap.TIntFltPr_Save)
    Load = _swig_new_instance_method(_snap.TIntFltPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntFltPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntFltPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntFltPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntFltPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntFltPr

# Register TIntFltPr in _snap:
_snap.TIntFltPr_swigregister(TIntFltPr)

class TIntStrVPr(object):
    r"""Proxy of C++ TPair< TInt,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntStrVPr_Val1_get, _snap.TIntStrVPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntStrVPr_Val2_get, _snap.TIntStrVPr_Val2_set, doc=r"""Val2 : TVec<(TStr,int)>""")

    def __init__(self, *args):
        r"""
        __init__(TIntStrVPr self) -> TIntStrVPr
        __init__(TIntStrVPr self, TIntStrVPr Pair) -> TIntStrVPr

        Parameters
        ----------
        Pair: TPair< TInt,TStrV > const &

        __init__(TIntStrVPr self, TInt _Val1, TStrV _Val2) -> TIntStrVPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TVec< TStr,int > const &

        __init__(TIntStrVPr self, TSIn SIn) -> TIntStrVPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrVPr_swiginit(self, _snap.new_TIntStrVPr(*args))
    Save = _swig_new_instance_method(_snap.TIntStrVPr_Save)
    Load = _swig_new_instance_method(_snap.TIntStrVPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntStrVPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrVPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrVPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrVPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrVPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntStrVPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntStrVPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntStrVPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntStrVPr

# Register TIntStrVPr in _snap:
_snap.TIntStrVPr_swigregister(TIntStrVPr)

class TIntPrIntPr(object):
    r"""Proxy of C++ TPair< TIntPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntPrIntPr_Val1_get, _snap.TIntPrIntPr_Val1_set, doc=r"""Val1 : TPair<(TInt,TInt)>""")
    Val2 = property(_snap.TIntPrIntPr_Val2_get, _snap.TIntPrIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntPrIntPr self) -> TIntPrIntPr
        __init__(TIntPrIntPr self, TIntPrIntPr Pair) -> TIntPrIntPr

        Parameters
        ----------
        Pair: TPair< TIntPr,TInt > const &

        __init__(TIntPrIntPr self, TIntPr _Val1, TInt _Val2) -> TIntPrIntPr

        Parameters
        ----------
        _Val1: TPair< TInt,TInt > const &
        _Val2: TInt const &

        __init__(TIntPrIntPr self, TSIn SIn) -> TIntPrIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrIntPr_swiginit(self, _snap.new_TIntPrIntPr(*args))
    Save = _swig_new_instance_method(_snap.TIntPrIntPr_Save)
    Load = _swig_new_instance_method(_snap.TIntPrIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntPrIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntPrIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntPrIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntPrIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntPrIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntPrIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntPrIntPr

# Register TIntPrIntPr in _snap:
_snap.TIntPrIntPr_swigregister(TIntPrIntPr)

class TUIntUIntPr(object):
    r"""Proxy of C++ TPair< TUInt,TUInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUIntUIntPr_Val1_get, _snap.TUIntUIntPr_Val1_set, doc=r"""Val1 : TUInt""")
    Val2 = property(_snap.TUIntUIntPr_Val2_get, _snap.TUIntUIntPr_Val2_set, doc=r"""Val2 : TUInt""")

    def __init__(self, *args):
        r"""
        __init__(TUIntUIntPr self) -> TUIntUIntPr
        __init__(TUIntUIntPr self, TUIntUIntPr Pair) -> TUIntUIntPr

        Parameters
        ----------
        Pair: TPair< TUInt,TUInt > const &

        __init__(TUIntUIntPr self, TUInt _Val1, TUInt _Val2) -> TUIntUIntPr

        Parameters
        ----------
        _Val1: TUInt const &
        _Val2: TUInt const &

        __init__(TUIntUIntPr self, TSIn SIn) -> TUIntUIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUIntUIntPr_swiginit(self, _snap.new_TUIntUIntPr(*args))
    Save = _swig_new_instance_method(_snap.TUIntUIntPr_Save)
    Load = _swig_new_instance_method(_snap.TUIntUIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TUIntUIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntUIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUIntUIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUIntUIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUIntUIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TUIntUIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUIntUIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUIntUIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TUIntUIntPr

# Register TUIntUIntPr in _snap:
_snap.TUIntUIntPr_swigregister(TUIntUIntPr)

class TUIntIntPr(object):
    r"""Proxy of C++ TPair< TUInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUIntIntPr_Val1_get, _snap.TUIntIntPr_Val1_set, doc=r"""Val1 : TUInt""")
    Val2 = property(_snap.TUIntIntPr_Val2_get, _snap.TUIntIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TUIntIntPr self) -> TUIntIntPr
        __init__(TUIntIntPr self, TUIntIntPr Pair) -> TUIntIntPr

        Parameters
        ----------
        Pair: TPair< TUInt,TInt > const &

        __init__(TUIntIntPr self, TUInt _Val1, TInt _Val2) -> TUIntIntPr

        Parameters
        ----------
        _Val1: TUInt const &
        _Val2: TInt const &

        __init__(TUIntIntPr self, TSIn SIn) -> TUIntIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUIntIntPr_swiginit(self, _snap.new_TUIntIntPr(*args))
    Save = _swig_new_instance_method(_snap.TUIntIntPr_Save)
    Load = _swig_new_instance_method(_snap.TUIntIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TUIntIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUIntIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUIntIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUIntIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TUIntIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUIntIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUIntIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TUIntIntPr

# Register TUIntIntPr in _snap:
_snap.TUIntIntPr_swigregister(TUIntIntPr)

class TUInt64IntPr(object):
    r"""Proxy of C++ TPair< TUInt64,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUInt64IntPr_Val1_get, _snap.TUInt64IntPr_Val1_set, doc=r"""Val1 : TUInt64""")
    Val2 = property(_snap.TUInt64IntPr_Val2_get, _snap.TUInt64IntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64IntPr self) -> TUInt64IntPr
        __init__(TUInt64IntPr self, TUInt64IntPr Pair) -> TUInt64IntPr

        Parameters
        ----------
        Pair: TPair< TUInt64,TInt > const &

        __init__(TUInt64IntPr self, TUInt64 _Val1, TInt _Val2) -> TUInt64IntPr

        Parameters
        ----------
        _Val1: TUInt64 const &
        _Val2: TInt const &

        __init__(TUInt64IntPr self, TSIn SIn) -> TUInt64IntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64IntPr_swiginit(self, _snap.new_TUInt64IntPr(*args))
    Save = _swig_new_instance_method(_snap.TUInt64IntPr_Save)
    Load = _swig_new_instance_method(_snap.TUInt64IntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TUInt64IntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64IntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64IntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64IntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64IntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TUInt64IntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUInt64IntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUInt64IntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TUInt64IntPr

# Register TUInt64IntPr in _snap:
_snap.TUInt64IntPr_swigregister(TUInt64IntPr)

class TUInt64Pr(object):
    r"""Proxy of C++ TPair< TUInt64,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUInt64Pr_Val1_get, _snap.TUInt64Pr_Val1_set, doc=r"""Val1 : TUInt64""")
    Val2 = property(_snap.TUInt64Pr_Val2_get, _snap.TUInt64Pr_Val2_set, doc=r"""Val2 : TUInt64""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64Pr self) -> TUInt64Pr
        __init__(TUInt64Pr self, TUInt64Pr Pair) -> TUInt64Pr

        Parameters
        ----------
        Pair: TPair< TUInt64,TUInt64 > const &

        __init__(TUInt64Pr self, TUInt64 _Val1, TUInt64 _Val2) -> TUInt64Pr

        Parameters
        ----------
        _Val1: TUInt64 const &
        _Val2: TUInt64 const &

        __init__(TUInt64Pr self, TSIn SIn) -> TUInt64Pr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64Pr_swiginit(self, _snap.new_TUInt64Pr(*args))
    Save = _swig_new_instance_method(_snap.TUInt64Pr_Save)
    Load = _swig_new_instance_method(_snap.TUInt64Pr_Load)
    __eq__ = _swig_new_instance_method(_snap.TUInt64Pr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64Pr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64Pr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64Pr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64Pr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TUInt64Pr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUInt64Pr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUInt64Pr_GetVal2)
    __swig_destroy__ = _snap.delete_TUInt64Pr

# Register TUInt64Pr in _snap:
_snap.TUInt64Pr_swigregister(TUInt64Pr)

class TUInt64FltPr(object):
    r"""Proxy of C++ TPair< TUInt64,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUInt64FltPr_Val1_get, _snap.TUInt64FltPr_Val1_set, doc=r"""Val1 : TUInt64""")
    Val2 = property(_snap.TUInt64FltPr_Val2_get, _snap.TUInt64FltPr_Val2_set, doc=r"""Val2 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64FltPr self) -> TUInt64FltPr
        __init__(TUInt64FltPr self, TUInt64FltPr Pair) -> TUInt64FltPr

        Parameters
        ----------
        Pair: TPair< TUInt64,TFlt > const &

        __init__(TUInt64FltPr self, TUInt64 _Val1, TFlt _Val2) -> TUInt64FltPr

        Parameters
        ----------
        _Val1: TUInt64 const &
        _Val2: TFlt const &

        __init__(TUInt64FltPr self, TSIn SIn) -> TUInt64FltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64FltPr_swiginit(self, _snap.new_TUInt64FltPr(*args))
    Save = _swig_new_instance_method(_snap.TUInt64FltPr_Save)
    Load = _swig_new_instance_method(_snap.TUInt64FltPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TUInt64FltPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64FltPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64FltPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64FltPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64FltPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TUInt64FltPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUInt64FltPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUInt64FltPr_GetVal2)
    __swig_destroy__ = _snap.delete_TUInt64FltPr

# Register TUInt64FltPr in _snap:
_snap.TUInt64FltPr_swigregister(TUInt64FltPr)

class TUInt64StrPr(object):
    r"""Proxy of C++ TPair< TUInt64,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUInt64StrPr_Val1_get, _snap.TUInt64StrPr_Val1_set, doc=r"""Val1 : TUInt64""")
    Val2 = property(_snap.TUInt64StrPr_Val2_get, _snap.TUInt64StrPr_Val2_set, doc=r"""Val2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64StrPr self) -> TUInt64StrPr
        __init__(TUInt64StrPr self, TUInt64StrPr Pair) -> TUInt64StrPr

        Parameters
        ----------
        Pair: TPair< TUInt64,TStr > const &

        __init__(TUInt64StrPr self, TUInt64 _Val1, TStr _Val2) -> TUInt64StrPr

        Parameters
        ----------
        _Val1: TUInt64 const &
        _Val2: TStr const &

        __init__(TUInt64StrPr self, TSIn SIn) -> TUInt64StrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64StrPr_swiginit(self, _snap.new_TUInt64StrPr(*args))
    Save = _swig_new_instance_method(_snap.TUInt64StrPr_Save)
    Load = _swig_new_instance_method(_snap.TUInt64StrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TUInt64StrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64StrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64StrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64StrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64StrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TUInt64StrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUInt64StrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUInt64StrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TUInt64StrPr

# Register TUInt64StrPr in _snap:
_snap.TUInt64StrPr_swigregister(TUInt64StrPr)

class TFltIntPr(object):
    r"""Proxy of C++ TPair< TFlt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltIntPr_Val1_get, _snap.TFltIntPr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltIntPr_Val2_get, _snap.TFltIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TFltIntPr self) -> TFltIntPr
        __init__(TFltIntPr self, TFltIntPr Pair) -> TFltIntPr

        Parameters
        ----------
        Pair: TPair< TFlt,TInt > const &

        __init__(TFltIntPr self, TFlt _Val1, TInt _Val2) -> TFltIntPr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TInt const &

        __init__(TFltIntPr self, TSIn SIn) -> TFltIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntPr_swiginit(self, _snap.new_TFltIntPr(*args))
    Save = _swig_new_instance_method(_snap.TFltIntPr_Save)
    Load = _swig_new_instance_method(_snap.TFltIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TFltIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TFltIntPr

# Register TFltIntPr in _snap:
_snap.TFltIntPr_swigregister(TFltIntPr)

class TFltUInt64Pr(object):
    r"""Proxy of C++ TPair< TFlt,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltUInt64Pr_Val1_get, _snap.TFltUInt64Pr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltUInt64Pr_Val2_get, _snap.TFltUInt64Pr_Val2_set, doc=r"""Val2 : TUInt64""")

    def __init__(self, *args):
        r"""
        __init__(TFltUInt64Pr self) -> TFltUInt64Pr
        __init__(TFltUInt64Pr self, TFltUInt64Pr Pair) -> TFltUInt64Pr

        Parameters
        ----------
        Pair: TPair< TFlt,TUInt64 > const &

        __init__(TFltUInt64Pr self, TFlt _Val1, TUInt64 _Val2) -> TFltUInt64Pr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TUInt64 const &

        __init__(TFltUInt64Pr self, TSIn SIn) -> TFltUInt64Pr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltUInt64Pr_swiginit(self, _snap.new_TFltUInt64Pr(*args))
    Save = _swig_new_instance_method(_snap.TFltUInt64Pr_Save)
    Load = _swig_new_instance_method(_snap.TFltUInt64Pr_Load)
    __eq__ = _swig_new_instance_method(_snap.TFltUInt64Pr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltUInt64Pr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltUInt64Pr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltUInt64Pr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltUInt64Pr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltUInt64Pr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltUInt64Pr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltUInt64Pr_GetVal2)
    __swig_destroy__ = _snap.delete_TFltUInt64Pr

# Register TFltUInt64Pr in _snap:
_snap.TFltUInt64Pr_swigregister(TFltUInt64Pr)

class TFltStrPr(object):
    r"""Proxy of C++ TPair< TFlt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltStrPr_Val1_get, _snap.TFltStrPr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltStrPr_Val2_get, _snap.TFltStrPr_Val2_set, doc=r"""Val2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TFltStrPr self) -> TFltStrPr
        __init__(TFltStrPr self, TFltStrPr Pair) -> TFltStrPr

        Parameters
        ----------
        Pair: TPair< TFlt,TStr > const &

        __init__(TFltStrPr self, TFlt _Val1, TStr _Val2) -> TFltStrPr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TStr const &

        __init__(TFltStrPr self, TSIn SIn) -> TFltStrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltStrPr_swiginit(self, _snap.new_TFltStrPr(*args))
    Save = _swig_new_instance_method(_snap.TFltStrPr_Save)
    Load = _swig_new_instance_method(_snap.TFltStrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TFltStrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltStrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltStrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltStrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltStrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltStrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltStrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltStrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TFltStrPr

# Register TFltStrPr in _snap:
_snap.TFltStrPr_swigregister(TFltStrPr)

class TAscFltIntPr(object):
    r"""Proxy of C++ TPair< TAscFlt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TAscFltIntPr_Val1_get, _snap.TAscFltIntPr_Val1_set, doc=r"""Val1 : TAscFlt""")
    Val2 = property(_snap.TAscFltIntPr_Val2_get, _snap.TAscFltIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TAscFltIntPr self) -> TAscFltIntPr
        __init__(TAscFltIntPr self, TAscFltIntPr Pair) -> TAscFltIntPr

        Parameters
        ----------
        Pair: TPair< TAscFlt,TInt > const &

        __init__(TAscFltIntPr self, TAscFlt _Val1, TInt _Val2) -> TAscFltIntPr

        Parameters
        ----------
        _Val1: TAscFlt const &
        _Val2: TInt const &

        __init__(TAscFltIntPr self, TSIn SIn) -> TAscFltIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltIntPr_swiginit(self, _snap.new_TAscFltIntPr(*args))
    Save = _swig_new_instance_method(_snap.TAscFltIntPr_Save)
    Load = _swig_new_instance_method(_snap.TAscFltIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TAscFltIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TAscFltIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TAscFltIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TAscFltIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TAscFltIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TAscFltIntPr

# Register TAscFltIntPr in _snap:
_snap.TAscFltIntPr_swigregister(TAscFltIntPr)

class TAscFltPr(object):
    r"""Proxy of C++ TPair< TAscFlt,TAscFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TAscFltPr_Val1_get, _snap.TAscFltPr_Val1_set, doc=r"""Val1 : TAscFlt""")
    Val2 = property(_snap.TAscFltPr_Val2_get, _snap.TAscFltPr_Val2_set, doc=r"""Val2 : TAscFlt""")

    def __init__(self, *args):
        r"""
        __init__(TAscFltPr self) -> TAscFltPr
        __init__(TAscFltPr self, TAscFltPr Pair) -> TAscFltPr

        Parameters
        ----------
        Pair: TPair< TAscFlt,TAscFlt > const &

        __init__(TAscFltPr self, TAscFlt _Val1, TAscFlt _Val2) -> TAscFltPr

        Parameters
        ----------
        _Val1: TAscFlt const &
        _Val2: TAscFlt const &

        __init__(TAscFltPr self, TSIn SIn) -> TAscFltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltPr_swiginit(self, _snap.new_TAscFltPr(*args))
    Save = _swig_new_instance_method(_snap.TAscFltPr_Save)
    Load = _swig_new_instance_method(_snap.TAscFltPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TAscFltPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TAscFltPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TAscFltPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TAscFltPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TAscFltPr_GetVal2)
    __swig_destroy__ = _snap.delete_TAscFltPr

# Register TAscFltPr in _snap:
_snap.TAscFltPr_swigregister(TAscFltPr)

class TAscFltStrPr(object):
    r"""Proxy of C++ TPair< TAscFlt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TAscFltStrPr_Val1_get, _snap.TAscFltStrPr_Val1_set, doc=r"""Val1 : TAscFlt""")
    Val2 = property(_snap.TAscFltStrPr_Val2_get, _snap.TAscFltStrPr_Val2_set, doc=r"""Val2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TAscFltStrPr self) -> TAscFltStrPr
        __init__(TAscFltStrPr self, TAscFltStrPr Pair) -> TAscFltStrPr

        Parameters
        ----------
        Pair: TPair< TAscFlt,TStr > const &

        __init__(TAscFltStrPr self, TAscFlt _Val1, TStr _Val2) -> TAscFltStrPr

        Parameters
        ----------
        _Val1: TAscFlt const &
        _Val2: TStr const &

        __init__(TAscFltStrPr self, TSIn SIn) -> TAscFltStrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltStrPr_swiginit(self, _snap.new_TAscFltStrPr(*args))
    Save = _swig_new_instance_method(_snap.TAscFltStrPr_Save)
    Load = _swig_new_instance_method(_snap.TAscFltStrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TAscFltStrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltStrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TAscFltStrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltStrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltStrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TAscFltStrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TAscFltStrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TAscFltStrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TAscFltStrPr

# Register TAscFltStrPr in _snap:
_snap.TAscFltStrPr_swigregister(TAscFltStrPr)

class TStrFltPr(object):
    r"""Proxy of C++ TPair< TStr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrFltPr_Val1_get, _snap.TStrFltPr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrFltPr_Val2_get, _snap.TStrFltPr_Val2_set, doc=r"""Val2 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TStrFltPr self) -> TStrFltPr
        __init__(TStrFltPr self, TStrFltPr Pair) -> TStrFltPr

        Parameters
        ----------
        Pair: TPair< TStr,TFlt > const &

        __init__(TStrFltPr self, TStr _Val1, TFlt _Val2) -> TStrFltPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TFlt const &

        __init__(TStrFltPr self, TSIn SIn) -> TStrFltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltPr_swiginit(self, _snap.new_TStrFltPr(*args))
    Save = _swig_new_instance_method(_snap.TStrFltPr_Save)
    Load = _swig_new_instance_method(_snap.TStrFltPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TStrFltPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrFltPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrFltPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrFltPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrFltPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrFltPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrFltPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrFltPr

# Register TStrFltPr in _snap:
_snap.TStrFltPr_swigregister(TStrFltPr)

class TStrPr(object):
    r"""Proxy of C++ TPair< TStr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrPr_Val1_get, _snap.TStrPr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrPr_Val2_get, _snap.TStrPr_Val2_set, doc=r"""Val2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TStrPr self) -> TStrPr
        __init__(TStrPr self, TStrPr Pair) -> TStrPr

        Parameters
        ----------
        Pair: TPair< TStr,TStr > const &

        __init__(TStrPr self, TStr _Val1, TStr _Val2) -> TStrPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TStr const &

        __init__(TStrPr self, TSIn SIn) -> TStrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrPr_swiginit(self, _snap.new_TStrPr(*args))
    Save = _swig_new_instance_method(_snap.TStrPr_Save)
    Load = _swig_new_instance_method(_snap.TStrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TStrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrPr

# Register TStrPr in _snap:
_snap.TStrPr_swigregister(TStrPr)

class TStrStrVPr(object):
    r"""Proxy of C++ TPair< TStr,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrStrVPr_Val1_get, _snap.TStrStrVPr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrStrVPr_Val2_get, _snap.TStrStrVPr_Val2_set, doc=r"""Val2 : TVec<(TStr,int)>""")

    def __init__(self, *args):
        r"""
        __init__(TStrStrVPr self) -> TStrStrVPr
        __init__(TStrStrVPr self, TStrStrVPr Pair) -> TStrStrVPr

        Parameters
        ----------
        Pair: TPair< TStr,TStrV > const &

        __init__(TStrStrVPr self, TStr _Val1, TStrV _Val2) -> TStrStrVPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TVec< TStr,int > const &

        __init__(TStrStrVPr self, TSIn SIn) -> TStrStrVPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrVPr_swiginit(self, _snap.new_TStrStrVPr(*args))
    Save = _swig_new_instance_method(_snap.TStrStrVPr_Save)
    Load = _swig_new_instance_method(_snap.TStrStrVPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TStrStrVPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrVPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrVPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrStrVPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrStrVPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrStrVPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrStrVPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrStrVPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrStrVPr

# Register TStrStrVPr in _snap:
_snap.TStrStrVPr_swigregister(TStrStrVPr)

class TStrVIntPr(object):
    r"""Proxy of C++ TPair< TStrV,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrVIntPr_Val1_get, _snap.TStrVIntPr_Val1_set, doc=r"""Val1 : TVec<(TStr,int)>""")
    Val2 = property(_snap.TStrVIntPr_Val2_get, _snap.TStrVIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TStrVIntPr self) -> TStrVIntPr
        __init__(TStrVIntPr self, TStrVIntPr Pair) -> TStrVIntPr

        Parameters
        ----------
        Pair: TPair< TStrV,TInt > const &

        __init__(TStrVIntPr self, TStrV _Val1, TInt _Val2) -> TStrVIntPr

        Parameters
        ----------
        _Val1: TVec< TStr,int > const &
        _Val2: TInt const &

        __init__(TStrVIntPr self, TSIn SIn) -> TStrVIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVIntPr_swiginit(self, _snap.new_TStrVIntPr(*args))
    Save = _swig_new_instance_method(_snap.TStrVIntPr_Save)
    Load = _swig_new_instance_method(_snap.TStrVIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TStrVIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrVIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrVIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrVIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrVIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrVIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrVIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrVIntPr

# Register TStrVIntPr in _snap:
_snap.TStrVIntPr_swigregister(TStrVIntPr)

class TIntStrPrPr(object):
    r"""Proxy of C++ TPair< TInt,TStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntStrPrPr_Val1_get, _snap.TIntStrPrPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntStrPrPr_Val2_get, _snap.TIntStrPrPr_Val2_set, doc=r"""Val2 : TPair<(TStr,TStr)>""")

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrPr self) -> TIntStrPrPr
        __init__(TIntStrPrPr self, TIntStrPrPr Pair) -> TIntStrPrPr

        Parameters
        ----------
        Pair: TPair< TInt,TStrPr > const &

        __init__(TIntStrPrPr self, TInt _Val1, TStrPr _Val2) -> TIntStrPrPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TPair< TStr,TStr > const &

        __init__(TIntStrPrPr self, TSIn SIn) -> TIntStrPrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPrPr_swiginit(self, _snap.new_TIntStrPrPr(*args))
    Save = _swig_new_instance_method(_snap.TIntStrPrPr_Save)
    Load = _swig_new_instance_method(_snap.TIntStrPrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntStrPrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrPrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrPrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrPrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntStrPrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntStrPrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntStrPrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntStrPrPr

# Register TIntStrPrPr in _snap:
_snap.TIntStrPrPr_swigregister(TIntStrPrPr)

class TFltStrPrPr(object):
    r"""Proxy of C++ TPair< TFlt,TStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltStrPrPr_Val1_get, _snap.TFltStrPrPr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltStrPrPr_Val2_get, _snap.TFltStrPrPr_Val2_set, doc=r"""Val2 : TPair<(TStr,TStr)>""")

    def __init__(self, *args):
        r"""
        __init__(TFltStrPrPr self) -> TFltStrPrPr
        __init__(TFltStrPrPr self, TFltStrPrPr Pair) -> TFltStrPrPr

        Parameters
        ----------
        Pair: TPair< TFlt,TStrPr > const &

        __init__(TFltStrPrPr self, TFlt _Val1, TStrPr _Val2) -> TFltStrPrPr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TPair< TStr,TStr > const &

        __init__(TFltStrPrPr self, TSIn SIn) -> TFltStrPrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltStrPrPr_swiginit(self, _snap.new_TFltStrPrPr(*args))
    Save = _swig_new_instance_method(_snap.TFltStrPrPr_Save)
    Load = _swig_new_instance_method(_snap.TFltStrPrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TFltStrPrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltStrPrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltStrPrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltStrPrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltStrPrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltStrPrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltStrPrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltStrPrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TFltStrPrPr

# Register TFltStrPrPr in _snap:
_snap.TFltStrPrPr_swigregister(TFltStrPrPr)

class TChTr(object):
    r"""Proxy of C++ TTriple< TCh,TCh,TCh > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TChTr_Val1_get, _snap.TChTr_Val1_set, doc=r"""Val1 : TCh""")
    Val2 = property(_snap.TChTr_Val2_get, _snap.TChTr_Val2_set, doc=r"""Val2 : TCh""")
    Val3 = property(_snap.TChTr_Val3_get, _snap.TChTr_Val3_set, doc=r"""Val3 : TCh""")

    def __init__(self, *args):
        r"""
        __init__(TChTr self) -> TChTr
        __init__(TChTr self, TChTr Triple) -> TChTr

        Parameters
        ----------
        Triple: TTriple< TCh,TCh,TCh > const &

        __init__(TChTr self, TCh _Val1, TCh _Val2, TCh _Val3) -> TChTr

        Parameters
        ----------
        _Val1: TCh const &
        _Val2: TCh const &
        _Val3: TCh const &

        __init__(TChTr self, TSIn SIn) -> TChTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChTr_swiginit(self, _snap.new_TChTr(*args))
    Save = _swig_new_instance_method(_snap.TChTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TChTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TChTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TChTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TChTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TChTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TChTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TChTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TChTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TChTr_GetVal3)
    __swig_destroy__ = _snap.delete_TChTr

# Register TChTr in _snap:
_snap.TChTr_swigregister(TChTr)

class TChIntIntTr(object):
    r"""Proxy of C++ TTriple< TCh,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TChIntIntTr_Val1_get, _snap.TChIntIntTr_Val1_set, doc=r"""Val1 : TCh""")
    Val2 = property(_snap.TChIntIntTr_Val2_get, _snap.TChIntIntTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TChIntIntTr_Val3_get, _snap.TChIntIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TChIntIntTr self) -> TChIntIntTr
        __init__(TChIntIntTr self, TChIntIntTr Triple) -> TChIntIntTr

        Parameters
        ----------
        Triple: TTriple< TCh,TInt,TInt > const &

        __init__(TChIntIntTr self, TCh _Val1, TInt _Val2, TInt _Val3) -> TChIntIntTr

        Parameters
        ----------
        _Val1: TCh const &
        _Val2: TInt const &
        _Val3: TInt const &

        __init__(TChIntIntTr self, TSIn SIn) -> TChIntIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChIntIntTr_swiginit(self, _snap.new_TChIntIntTr(*args))
    Save = _swig_new_instance_method(_snap.TChIntIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TChIntIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TChIntIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TChIntIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TChIntIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TChIntIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TChIntIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TChIntIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TChIntIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TChIntIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TChIntIntTr

# Register TChIntIntTr in _snap:
_snap.TChIntIntTr_swigregister(TChIntIntTr)

class TUChIntIntTr(object):
    r"""Proxy of C++ TTriple< TUCh,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUChIntIntTr_Val1_get, _snap.TUChIntIntTr_Val1_set, doc=r"""Val1 : TUCh""")
    Val2 = property(_snap.TUChIntIntTr_Val2_get, _snap.TUChIntIntTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TUChIntIntTr_Val3_get, _snap.TUChIntIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TUChIntIntTr self) -> TUChIntIntTr
        __init__(TUChIntIntTr self, TUChIntIntTr Triple) -> TUChIntIntTr

        Parameters
        ----------
        Triple: TTriple< TUCh,TInt,TInt > const &

        __init__(TUChIntIntTr self, TUCh _Val1, TInt _Val2, TInt _Val3) -> TUChIntIntTr

        Parameters
        ----------
        _Val1: TUCh const &
        _Val2: TInt const &
        _Val3: TInt const &

        __init__(TUChIntIntTr self, TSIn SIn) -> TUChIntIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUChIntIntTr_swiginit(self, _snap.new_TUChIntIntTr(*args))
    Save = _swig_new_instance_method(_snap.TUChIntIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TUChIntIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUChIntIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUChIntIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUChIntIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TUChIntIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TUChIntIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUChIntIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUChIntIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TUChIntIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TUChIntIntTr

# Register TUChIntIntTr in _snap:
_snap.TUChIntIntTr_swigregister(TUChIntIntTr)

class TUInt64Tr(object):
    r"""Proxy of C++ TTriple< TUInt64,TUInt64,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TUInt64Tr_Val1_get, _snap.TUInt64Tr_Val1_set, doc=r"""Val1 : TUInt64""")
    Val2 = property(_snap.TUInt64Tr_Val2_get, _snap.TUInt64Tr_Val2_set, doc=r"""Val2 : TUInt64""")
    Val3 = property(_snap.TUInt64Tr_Val3_get, _snap.TUInt64Tr_Val3_set, doc=r"""Val3 : TUInt64""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64Tr self) -> TUInt64Tr
        __init__(TUInt64Tr self, TUInt64Tr Triple) -> TUInt64Tr

        Parameters
        ----------
        Triple: TTriple< TUInt64,TUInt64,TUInt64 > const &

        __init__(TUInt64Tr self, TUInt64 _Val1, TUInt64 _Val2, TUInt64 _Val3) -> TUInt64Tr

        Parameters
        ----------
        _Val1: TUInt64 const &
        _Val2: TUInt64 const &
        _Val3: TUInt64 const &

        __init__(TUInt64Tr self, TSIn SIn) -> TUInt64Tr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64Tr_swiginit(self, _snap.new_TUInt64Tr(*args))
    Save = _swig_new_instance_method(_snap.TUInt64Tr_Save)
    __eq__ = _swig_new_instance_method(_snap.TUInt64Tr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64Tr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64Tr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64Tr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64Tr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TUInt64Tr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TUInt64Tr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TUInt64Tr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TUInt64Tr_GetVal3)
    __swig_destroy__ = _snap.delete_TUInt64Tr

# Register TUInt64Tr in _snap:
_snap.TUInt64Tr_swigregister(TUInt64Tr)

class TIntStrIntTr(object):
    r"""Proxy of C++ TTriple< TInt,TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntStrIntTr_Val1_get, _snap.TIntStrIntTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntStrIntTr_Val2_get, _snap.TIntStrIntTr_Val2_set, doc=r"""Val2 : TStr""")
    Val3 = property(_snap.TIntStrIntTr_Val3_get, _snap.TIntStrIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntStrIntTr self) -> TIntStrIntTr
        __init__(TIntStrIntTr self, TIntStrIntTr Triple) -> TIntStrIntTr

        Parameters
        ----------
        Triple: TTriple< TInt,TStr,TInt > const &

        __init__(TIntStrIntTr self, TInt _Val1, TStr _Val2, TInt _Val3) -> TIntStrIntTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TStr const &
        _Val3: TInt const &

        __init__(TIntStrIntTr self, TSIn SIn) -> TIntStrIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrIntTr_swiginit(self, _snap.new_TIntStrIntTr(*args))
    Save = _swig_new_instance_method(_snap.TIntStrIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntStrIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntStrIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntStrIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntStrIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntStrIntTr

# Register TIntStrIntTr in _snap:
_snap.TIntStrIntTr_swigregister(TIntStrIntTr)

class TIntIntStrTr(object):
    r"""Proxy of C++ TTriple< TInt,TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntIntStrTr_Val1_get, _snap.TIntIntStrTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntIntStrTr_Val2_get, _snap.TIntIntStrTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TIntIntStrTr_Val3_get, _snap.TIntIntStrTr_Val3_set, doc=r"""Val3 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TIntIntStrTr self) -> TIntIntStrTr
        __init__(TIntIntStrTr self, TIntIntStrTr Triple) -> TIntIntStrTr

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TStr > const &

        __init__(TIntIntStrTr self, TInt _Val1, TInt _Val2, TStr _Val3) -> TIntIntStrTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TStr const &

        __init__(TIntIntStrTr self, TSIn SIn) -> TIntIntStrTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntStrTr_swiginit(self, _snap.new_TIntIntStrTr(*args))
    Save = _swig_new_instance_method(_snap.TIntIntStrTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntStrTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntStrTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntStrTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntStrTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntStrTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntIntStrTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntIntStrTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntIntStrTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntIntStrTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntIntStrTr

# Register TIntIntStrTr in _snap:
_snap.TIntIntStrTr_swigregister(TIntIntStrTr)

class TIntIntFltTr(object):
    r"""Proxy of C++ TTriple< TInt,TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntIntFltTr_Val1_get, _snap.TIntIntFltTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntIntFltTr_Val2_get, _snap.TIntIntFltTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TIntIntFltTr_Val3_get, _snap.TIntIntFltTr_Val3_set, doc=r"""Val3 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntIntFltTr self) -> TIntIntFltTr
        __init__(TIntIntFltTr self, TIntIntFltTr Triple) -> TIntIntFltTr

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TFlt > const &

        __init__(TIntIntFltTr self, TInt _Val1, TInt _Val2, TFlt _Val3) -> TIntIntFltTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TFlt const &

        __init__(TIntIntFltTr self, TSIn SIn) -> TIntIntFltTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntFltTr_swiginit(self, _snap.new_TIntIntFltTr(*args))
    Save = _swig_new_instance_method(_snap.TIntIntFltTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntFltTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntFltTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntFltTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntFltTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntFltTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntIntFltTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntIntFltTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntIntFltTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntIntFltTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntIntFltTr

# Register TIntIntFltTr in _snap:
_snap.TIntIntFltTr_swigregister(TIntIntFltTr)

class TIntFltIntTr(object):
    r"""Proxy of C++ TTriple< TInt,TFlt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntFltIntTr_Val1_get, _snap.TIntFltIntTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntFltIntTr_Val2_get, _snap.TIntFltIntTr_Val2_set, doc=r"""Val2 : TFlt""")
    Val3 = property(_snap.TIntFltIntTr_Val3_get, _snap.TIntFltIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntFltIntTr self) -> TIntFltIntTr
        __init__(TIntFltIntTr self, TIntFltIntTr Triple) -> TIntFltIntTr

        Parameters
        ----------
        Triple: TTriple< TInt,TFlt,TInt > const &

        __init__(TIntFltIntTr self, TInt _Val1, TFlt _Val2, TInt _Val3) -> TIntFltIntTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TFlt const &
        _Val3: TInt const &

        __init__(TIntFltIntTr self, TSIn SIn) -> TIntFltIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltIntTr_swiginit(self, _snap.new_TIntFltIntTr(*args))
    Save = _swig_new_instance_method(_snap.TIntFltIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntFltIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntFltIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntFltIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntFltIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntFltIntTr

# Register TIntFltIntTr in _snap:
_snap.TIntFltIntTr_swigregister(TIntFltIntTr)

class TIntFltFltTr(object):
    r"""Proxy of C++ TTriple< TInt,TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntFltFltTr_Val1_get, _snap.TIntFltFltTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntFltFltTr_Val2_get, _snap.TIntFltFltTr_Val2_set, doc=r"""Val2 : TFlt""")
    Val3 = property(_snap.TIntFltFltTr_Val3_get, _snap.TIntFltFltTr_Val3_set, doc=r"""Val3 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntFltFltTr self) -> TIntFltFltTr
        __init__(TIntFltFltTr self, TIntFltFltTr Triple) -> TIntFltFltTr

        Parameters
        ----------
        Triple: TTriple< TInt,TFlt,TFlt > const &

        __init__(TIntFltFltTr self, TInt _Val1, TFlt _Val2, TFlt _Val3) -> TIntFltFltTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TFlt const &
        _Val3: TFlt const &

        __init__(TIntFltFltTr self, TSIn SIn) -> TIntFltFltTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltFltTr_swiginit(self, _snap.new_TIntFltFltTr(*args))
    Save = _swig_new_instance_method(_snap.TIntFltFltTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltFltTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltFltTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltFltTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltFltTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltFltTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntFltFltTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntFltFltTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntFltFltTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntFltFltTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntFltFltTr

# Register TIntFltFltTr in _snap:
_snap.TIntFltFltTr_swigregister(TIntFltFltTr)

class TIntIntVIntTr(object):
    r"""Proxy of C++ TTriple< TInt,TVec< TInt >,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntIntVIntTr_Val1_get, _snap.TIntIntVIntTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntIntVIntTr_Val2_get, _snap.TIntIntVIntTr_Val2_set, doc=r"""Val2 : TVec<(TInt,int)>""")
    Val3 = property(_snap.TIntIntVIntTr_Val3_get, _snap.TIntIntVIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntIntVIntTr self) -> TIntIntVIntTr
        __init__(TIntIntVIntTr self, TIntIntVIntTr Triple) -> TIntIntVIntTr

        Parameters
        ----------
        Triple: TTriple< TInt,TVec< TInt >,TInt > const &

        __init__(TIntIntVIntTr self, TInt _Val1, TIntV _Val2, TInt _Val3) -> TIntIntVIntTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TVec< TInt,int > const &
        _Val3: TInt const &

        __init__(TIntIntVIntTr self, TSIn SIn) -> TIntIntVIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntVIntTr_swiginit(self, _snap.new_TIntIntVIntTr(*args))
    Save = _swig_new_instance_method(_snap.TIntIntVIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntVIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntVIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntVIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntVIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntVIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntIntVIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntIntVIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntIntVIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntIntVIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntIntVIntTr

# Register TIntIntVIntTr in _snap:
_snap.TIntIntVIntTr_swigregister(TIntIntVIntTr)

class TIntIntIntVTr(object):
    r"""Proxy of C++ TTriple< TInt,TInt,TVec< TInt > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntIntIntVTr_Val1_get, _snap.TIntIntIntVTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntIntIntVTr_Val2_get, _snap.TIntIntIntVTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TIntIntIntVTr_Val3_get, _snap.TIntIntIntVTr_Val3_set, doc=r"""Val3 : TVec<(TInt,int)>""")

    def __init__(self, *args):
        r"""
        __init__(TIntIntIntVTr self) -> TIntIntIntVTr
        __init__(TIntIntIntVTr self, TIntIntIntVTr Triple) -> TIntIntIntVTr

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TVec< TInt > > const &

        __init__(TIntIntIntVTr self, TInt _Val1, TInt _Val2, TIntV _Val3) -> TIntIntIntVTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TVec< TInt,int > const &

        __init__(TIntIntIntVTr self, TSIn SIn) -> TIntIntIntVTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntIntVTr_swiginit(self, _snap.new_TIntIntIntVTr(*args))
    Save = _swig_new_instance_method(_snap.TIntIntIntVTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntIntVTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntIntVTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntIntVTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntIntVTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntIntVTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntIntIntVTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntIntIntVTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntIntIntVTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntIntIntVTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntIntIntVTr

# Register TIntIntIntVTr in _snap:
_snap.TIntIntIntVTr_swigregister(TIntIntIntVTr)

class TFltTr(object):
    r"""Proxy of C++ TTriple< TFlt,TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltTr_Val1_get, _snap.TFltTr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltTr_Val2_get, _snap.TFltTr_Val2_set, doc=r"""Val2 : TFlt""")
    Val3 = property(_snap.TFltTr_Val3_get, _snap.TFltTr_Val3_set, doc=r"""Val3 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TFltTr self) -> TFltTr
        __init__(TFltTr self, TFltTr Triple) -> TFltTr

        Parameters
        ----------
        Triple: TTriple< TFlt,TFlt,TFlt > const &

        __init__(TFltTr self, TFlt _Val1, TFlt _Val2, TFlt _Val3) -> TFltTr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TFlt const &
        _Val3: TFlt const &

        __init__(TFltTr self, TSIn SIn) -> TFltTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltTr_swiginit(self, _snap.new_TFltTr(*args))
    Save = _swig_new_instance_method(_snap.TFltTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TFltTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TFltTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TFltTr_GetVal3)
    __swig_destroy__ = _snap.delete_TFltTr

# Register TFltTr in _snap:
_snap.TFltTr_swigregister(TFltTr)

class TFltIntIntTr(object):
    r"""Proxy of C++ TTriple< TFlt,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltIntIntTr_Val1_get, _snap.TFltIntIntTr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltIntIntTr_Val2_get, _snap.TFltIntIntTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TFltIntIntTr_Val3_get, _snap.TFltIntIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TFltIntIntTr self) -> TFltIntIntTr
        __init__(TFltIntIntTr self, TFltIntIntTr Triple) -> TFltIntIntTr

        Parameters
        ----------
        Triple: TTriple< TFlt,TInt,TInt > const &

        __init__(TFltIntIntTr self, TFlt _Val1, TInt _Val2, TInt _Val3) -> TFltIntIntTr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TInt const &
        _Val3: TInt const &

        __init__(TFltIntIntTr self, TSIn SIn) -> TFltIntIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntIntTr_swiginit(self, _snap.new_TFltIntIntTr(*args))
    Save = _swig_new_instance_method(_snap.TFltIntIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltIntIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TFltIntIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TFltIntIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltIntIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltIntIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TFltIntIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TFltIntIntTr

# Register TFltIntIntTr in _snap:
_snap.TFltIntIntTr_swigregister(TFltIntIntTr)

class TFltFltIntTr(object):
    r"""Proxy of C++ TTriple< TFlt,TFlt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltFltIntTr_Val1_get, _snap.TFltFltIntTr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltFltIntTr_Val2_get, _snap.TFltFltIntTr_Val2_set, doc=r"""Val2 : TFlt""")
    Val3 = property(_snap.TFltFltIntTr_Val3_get, _snap.TFltFltIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TFltFltIntTr self) -> TFltFltIntTr
        __init__(TFltFltIntTr self, TFltFltIntTr Triple) -> TFltFltIntTr

        Parameters
        ----------
        Triple: TTriple< TFlt,TFlt,TInt > const &

        __init__(TFltFltIntTr self, TFlt _Val1, TFlt _Val2, TInt _Val3) -> TFltFltIntTr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TFlt const &
        _Val3: TInt const &

        __init__(TFltFltIntTr self, TSIn SIn) -> TFltFltIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltFltIntTr_swiginit(self, _snap.new_TFltFltIntTr(*args))
    Save = _swig_new_instance_method(_snap.TFltFltIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltFltIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltFltIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltFltIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltFltIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TFltFltIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TFltFltIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltFltIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltFltIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TFltFltIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TFltFltIntTr

# Register TFltFltIntTr in _snap:
_snap.TFltFltIntTr_swigregister(TFltFltIntTr)

class TFltFltStrTr(object):
    r"""Proxy of C++ TTriple< TFlt,TFlt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltFltStrTr_Val1_get, _snap.TFltFltStrTr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltFltStrTr_Val2_get, _snap.TFltFltStrTr_Val2_set, doc=r"""Val2 : TFlt""")
    Val3 = property(_snap.TFltFltStrTr_Val3_get, _snap.TFltFltStrTr_Val3_set, doc=r"""Val3 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TFltFltStrTr self) -> TFltFltStrTr
        __init__(TFltFltStrTr self, TFltFltStrTr Triple) -> TFltFltStrTr

        Parameters
        ----------
        Triple: TTriple< TFlt,TFlt,TStr > const &

        __init__(TFltFltStrTr self, TFlt _Val1, TFlt _Val2, TStr _Val3) -> TFltFltStrTr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TFlt const &
        _Val3: TStr const &

        __init__(TFltFltStrTr self, TSIn SIn) -> TFltFltStrTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltFltStrTr_swiginit(self, _snap.new_TFltFltStrTr(*args))
    Save = _swig_new_instance_method(_snap.TFltFltStrTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltFltStrTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltFltStrTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltFltStrTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltFltStrTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TFltFltStrTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TFltFltStrTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltFltStrTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltFltStrTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TFltFltStrTr_GetVal3)
    __swig_destroy__ = _snap.delete_TFltFltStrTr

# Register TFltFltStrTr in _snap:
_snap.TFltFltStrTr_swigregister(TFltFltStrTr)

class TChATr(object):
    r"""Proxy of C++ TTriple< TChA,TChA,TChA > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TChATr_Val1_get, _snap.TChATr_Val1_set, doc=r"""Val1 : TChA""")
    Val2 = property(_snap.TChATr_Val2_get, _snap.TChATr_Val2_set, doc=r"""Val2 : TChA""")
    Val3 = property(_snap.TChATr_Val3_get, _snap.TChATr_Val3_set, doc=r"""Val3 : TChA""")

    def __init__(self, *args):
        r"""
        __init__(TChATr self) -> TChATr
        __init__(TChATr self, TChATr Triple) -> TChATr

        Parameters
        ----------
        Triple: TTriple< TChA,TChA,TChA > const &

        __init__(TChATr self, TChA _Val1, TChA _Val2, TChA _Val3) -> TChATr

        Parameters
        ----------
        _Val1: TChA const &
        _Val2: TChA const &
        _Val3: TChA const &

        __init__(TChATr self, TSIn SIn) -> TChATr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChATr_swiginit(self, _snap.new_TChATr(*args))
    Save = _swig_new_instance_method(_snap.TChATr_Save)
    __eq__ = _swig_new_instance_method(_snap.TChATr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TChATr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TChATr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TChATr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TChATr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TChATr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TChATr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TChATr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TChATr_GetVal3)
    __swig_destroy__ = _snap.delete_TChATr

# Register TChATr in _snap:
_snap.TChATr_swigregister(TChATr)

class TStrTr(object):
    r"""Proxy of C++ TTriple< TStr,TStr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrTr_Val1_get, _snap.TStrTr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrTr_Val2_get, _snap.TStrTr_Val2_set, doc=r"""Val2 : TStr""")
    Val3 = property(_snap.TStrTr_Val3_get, _snap.TStrTr_Val3_set, doc=r"""Val3 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TStrTr self) -> TStrTr
        __init__(TStrTr self, TStrTr Triple) -> TStrTr

        Parameters
        ----------
        Triple: TTriple< TStr,TStr,TStr > const &

        __init__(TStrTr self, TStr _Val1, TStr _Val2, TStr _Val3) -> TStrTr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TStr const &
        _Val3: TStr const &

        __init__(TStrTr self, TSIn SIn) -> TStrTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrTr_swiginit(self, _snap.new_TStrTr(*args))
    Save = _swig_new_instance_method(_snap.TStrTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TStrTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TStrTr_GetVal3)
    __swig_destroy__ = _snap.delete_TStrTr

# Register TStrTr in _snap:
_snap.TStrTr_swigregister(TStrTr)

class TStrIntIntTr(object):
    r"""Proxy of C++ TTriple< TStr,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrIntIntTr_Val1_get, _snap.TStrIntIntTr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrIntIntTr_Val2_get, _snap.TStrIntIntTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TStrIntIntTr_Val3_get, _snap.TStrIntIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TStrIntIntTr self) -> TStrIntIntTr
        __init__(TStrIntIntTr self, TStrIntIntTr Triple) -> TStrIntIntTr

        Parameters
        ----------
        Triple: TTriple< TStr,TInt,TInt > const &

        __init__(TStrIntIntTr self, TStr _Val1, TInt _Val2, TInt _Val3) -> TStrIntIntTr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TInt const &
        _Val3: TInt const &

        __init__(TStrIntIntTr self, TSIn SIn) -> TStrIntIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntIntTr_swiginit(self, _snap.new_TStrIntIntTr(*args))
    Save = _swig_new_instance_method(_snap.TStrIntIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TStrIntIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrIntIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrIntIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TStrIntIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TStrIntIntTr

# Register TStrIntIntTr in _snap:
_snap.TStrIntIntTr_swigregister(TStrIntIntTr)

class TStrFltFltTr(object):
    r"""Proxy of C++ TTriple< TStr,TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrFltFltTr_Val1_get, _snap.TStrFltFltTr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrFltFltTr_Val2_get, _snap.TStrFltFltTr_Val2_set, doc=r"""Val2 : TFlt""")
    Val3 = property(_snap.TStrFltFltTr_Val3_get, _snap.TStrFltFltTr_Val3_set, doc=r"""Val3 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TStrFltFltTr self) -> TStrFltFltTr
        __init__(TStrFltFltTr self, TStrFltFltTr Triple) -> TStrFltFltTr

        Parameters
        ----------
        Triple: TTriple< TStr,TFlt,TFlt > const &

        __init__(TStrFltFltTr self, TStr _Val1, TFlt _Val2, TFlt _Val3) -> TStrFltFltTr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TFlt const &
        _Val3: TFlt const &

        __init__(TStrFltFltTr self, TSIn SIn) -> TStrFltFltTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltFltTr_swiginit(self, _snap.new_TStrFltFltTr(*args))
    Save = _swig_new_instance_method(_snap.TStrFltFltTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrFltFltTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltFltTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrFltFltTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrFltFltTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrFltFltTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TStrFltFltTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrFltFltTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrFltFltTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TStrFltFltTr_GetVal3)
    __swig_destroy__ = _snap.delete_TStrFltFltTr

# Register TStrFltFltTr in _snap:
_snap.TStrFltFltTr_swigregister(TStrFltFltTr)

class TStrStrIntTr(object):
    r"""Proxy of C++ TTriple< TStr,TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrStrIntTr_Val1_get, _snap.TStrStrIntTr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrStrIntTr_Val2_get, _snap.TStrStrIntTr_Val2_set, doc=r"""Val2 : TStr""")
    Val3 = property(_snap.TStrStrIntTr_Val3_get, _snap.TStrStrIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TStrStrIntTr self) -> TStrStrIntTr
        __init__(TStrStrIntTr self, TStrStrIntTr Triple) -> TStrStrIntTr

        Parameters
        ----------
        Triple: TTriple< TStr,TStr,TInt > const &

        __init__(TStrStrIntTr self, TStr _Val1, TStr _Val2, TInt _Val3) -> TStrStrIntTr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TStr const &
        _Val3: TInt const &

        __init__(TStrStrIntTr self, TSIn SIn) -> TStrStrIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrIntTr_swiginit(self, _snap.new_TStrStrIntTr(*args))
    Save = _swig_new_instance_method(_snap.TStrStrIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrStrIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrStrIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TStrStrIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrStrIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrStrIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TStrStrIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TStrStrIntTr

# Register TStrStrIntTr in _snap:
_snap.TStrStrIntTr_swigregister(TStrStrIntTr)

class TStrIntStrVTr(object):
    r"""Proxy of C++ TTriple< TStr,TInt,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrIntStrVTr_Val1_get, _snap.TStrIntStrVTr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrIntStrVTr_Val2_get, _snap.TStrIntStrVTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TStrIntStrVTr_Val3_get, _snap.TStrIntStrVTr_Val3_set, doc=r"""Val3 : TVec<(TStr,int)>""")

    def __init__(self, *args):
        r"""
        __init__(TStrIntStrVTr self) -> TStrIntStrVTr
        __init__(TStrIntStrVTr self, TStrIntStrVTr Triple) -> TStrIntStrVTr

        Parameters
        ----------
        Triple: TTriple< TStr,TInt,TStrV > const &

        __init__(TStrIntStrVTr self, TStr _Val1, TInt _Val2, TStrV _Val3) -> TStrIntStrVTr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TInt const &
        _Val3: TVec< TStr,int > const &

        __init__(TStrIntStrVTr self, TSIn SIn) -> TStrIntStrVTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntStrVTr_swiginit(self, _snap.new_TStrIntStrVTr(*args))
    Save = _swig_new_instance_method(_snap.TStrIntStrVTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntStrVTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntStrVTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntStrVTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntStrVTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntStrVTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TStrIntStrVTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrIntStrVTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrIntStrVTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TStrIntStrVTr_GetVal3)
    __swig_destroy__ = _snap.delete_TStrIntStrVTr

# Register TStrIntStrVTr in _snap:
_snap.TStrIntStrVTr_swigregister(TStrIntStrVTr)

class TStrStrIntIntQu(object):
    r"""Proxy of C++ TQuad< TStr,TStr,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrStrIntIntQu_Val1_get, _snap.TStrStrIntIntQu_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrStrIntIntQu_Val2_get, _snap.TStrStrIntIntQu_Val2_set, doc=r"""Val2 : TStr""")
    Val3 = property(_snap.TStrStrIntIntQu_Val3_get, _snap.TStrStrIntIntQu_Val3_set, doc=r"""Val3 : TInt""")
    Val4 = property(_snap.TStrStrIntIntQu_Val4_get, _snap.TStrStrIntIntQu_Val4_set, doc=r"""Val4 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TStrStrIntIntQu self) -> TStrStrIntIntQu
        __init__(TStrStrIntIntQu self, TStrStrIntIntQu Quad) -> TStrStrIntIntQu

        Parameters
        ----------
        Quad: TQuad< TStr,TStr,TInt,TInt > const &

        __init__(TStrStrIntIntQu self, TStr _Val1, TStr _Val2, TInt _Val3, TInt _Val4) -> TStrStrIntIntQu

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TStr const &
        _Val3: TInt const &
        _Val4: TInt const &

        __init__(TStrStrIntIntQu self, TSIn SIn) -> TStrStrIntIntQu

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrIntIntQu_swiginit(self, _snap.new_TStrStrIntIntQu(*args))
    Save = _swig_new_instance_method(_snap.TStrStrIntIntQu_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrIntIntQu___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrIntIntQu___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrStrIntIntQu_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrStrIntIntQu_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrStrIntIntQu_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrStrIntIntQu_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrStrIntIntQu_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TStrStrIntIntQu_GetVal3)
    GetVal4 = _swig_new_instance_method(_snap.TStrStrIntIntQu_GetVal4)
    __swig_destroy__ = _snap.delete_TStrStrIntIntQu

# Register TStrStrIntIntQu in _snap:
_snap.TStrStrIntIntQu_swigregister(TStrStrIntIntQu)

class TStrQu(object):
    r"""Proxy of C++ TQuad< TStr,TStr,TStr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrQu_Val1_get, _snap.TStrQu_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrQu_Val2_get, _snap.TStrQu_Val2_set, doc=r"""Val2 : TStr""")
    Val3 = property(_snap.TStrQu_Val3_get, _snap.TStrQu_Val3_set, doc=r"""Val3 : TStr""")
    Val4 = property(_snap.TStrQu_Val4_get, _snap.TStrQu_Val4_set, doc=r"""Val4 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TStrQu self) -> TStrQu
        __init__(TStrQu self, TStrQu Quad) -> TStrQu

        Parameters
        ----------
        Quad: TQuad< TStr,TStr,TStr,TStr > const &

        __init__(TStrQu self, TStr _Val1, TStr _Val2, TStr _Val3, TStr _Val4) -> TStrQu

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TStr const &
        _Val3: TStr const &
        _Val4: TStr const &

        __init__(TStrQu self, TSIn SIn) -> TStrQu

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrQu_swiginit(self, _snap.new_TStrQu(*args))
    Save = _swig_new_instance_method(_snap.TStrQu_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrQu___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrQu___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrQu_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrQu_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrQu_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrQu_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrQu_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TStrQu_GetVal3)
    GetVal4 = _swig_new_instance_method(_snap.TStrQu_GetVal4)
    __swig_destroy__ = _snap.delete_TStrQu

# Register TStrQu in _snap:
_snap.TStrQu_swigregister(TStrQu)

class TIntQu(object):
    r"""Proxy of C++ TQuad< TInt,TInt,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntQu_Val1_get, _snap.TIntQu_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntQu_Val2_get, _snap.TIntQu_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TIntQu_Val3_get, _snap.TIntQu_Val3_set, doc=r"""Val3 : TInt""")
    Val4 = property(_snap.TIntQu_Val4_get, _snap.TIntQu_Val4_set, doc=r"""Val4 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntQu self) -> TIntQu
        __init__(TIntQu self, TIntQu Quad) -> TIntQu

        Parameters
        ----------
        Quad: TQuad< TInt,TInt,TInt,TInt > const &

        __init__(TIntQu self, TInt _Val1, TInt _Val2, TInt _Val3, TInt _Val4) -> TIntQu

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TInt const &
        _Val4: TInt const &

        __init__(TIntQu self, TSIn SIn) -> TIntQu

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntQu_swiginit(self, _snap.new_TIntQu(*args))
    Save = _swig_new_instance_method(_snap.TIntQu_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntQu___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntQu___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntQu_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntQu_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntQu_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntQu_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntQu_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntQu_GetVal3)
    GetVal4 = _swig_new_instance_method(_snap.TIntQu_GetVal4)
    __swig_destroy__ = _snap.delete_TIntQu

# Register TIntQu in _snap:
_snap.TIntQu_swigregister(TIntQu)

class TFltQu(object):
    r"""Proxy of C++ TQuad< TFlt,TFlt,TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltQu_Val1_get, _snap.TFltQu_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltQu_Val2_get, _snap.TFltQu_Val2_set, doc=r"""Val2 : TFlt""")
    Val3 = property(_snap.TFltQu_Val3_get, _snap.TFltQu_Val3_set, doc=r"""Val3 : TFlt""")
    Val4 = property(_snap.TFltQu_Val4_get, _snap.TFltQu_Val4_set, doc=r"""Val4 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TFltQu self) -> TFltQu
        __init__(TFltQu self, TFltQu Quad) -> TFltQu

        Parameters
        ----------
        Quad: TQuad< TFlt,TFlt,TFlt,TFlt > const &

        __init__(TFltQu self, TFlt _Val1, TFlt _Val2, TFlt _Val3, TFlt _Val4) -> TFltQu

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TFlt const &
        _Val3: TFlt const &
        _Val4: TFlt const &

        __init__(TFltQu self, TSIn SIn) -> TFltQu

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltQu_swiginit(self, _snap.new_TFltQu(*args))
    Save = _swig_new_instance_method(_snap.TFltQu_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltQu___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltQu___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltQu_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltQu_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltQu_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltQu_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltQu_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TFltQu_GetVal3)
    GetVal4 = _swig_new_instance_method(_snap.TFltQu_GetVal4)
    __swig_destroy__ = _snap.delete_TFltQu

# Register TFltQu in _snap:
_snap.TFltQu_swigregister(TFltQu)

class TFltIntIntIntQu(object):
    r"""Proxy of C++ TQuad< TFlt,TInt,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltIntIntIntQu_Val1_get, _snap.TFltIntIntIntQu_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltIntIntIntQu_Val2_get, _snap.TFltIntIntIntQu_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TFltIntIntIntQu_Val3_get, _snap.TFltIntIntIntQu_Val3_set, doc=r"""Val3 : TInt""")
    Val4 = property(_snap.TFltIntIntIntQu_Val4_get, _snap.TFltIntIntIntQu_Val4_set, doc=r"""Val4 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TFltIntIntIntQu self) -> TFltIntIntIntQu
        __init__(TFltIntIntIntQu self, TFltIntIntIntQu Quad) -> TFltIntIntIntQu

        Parameters
        ----------
        Quad: TQuad< TFlt,TInt,TInt,TInt > const &

        __init__(TFltIntIntIntQu self, TFlt _Val1, TInt _Val2, TInt _Val3, TInt _Val4) -> TFltIntIntIntQu

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TInt const &
        _Val3: TInt const &
        _Val4: TInt const &

        __init__(TFltIntIntIntQu self, TSIn SIn) -> TFltIntIntIntQu

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntIntIntQu_swiginit(self, _snap.new_TFltIntIntIntQu(*args))
    Save = _swig_new_instance_method(_snap.TFltIntIntIntQu_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltIntIntIntQu___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntIntIntQu___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntIntIntQu_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntIntIntQu_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltIntIntIntQu_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltIntIntIntQu_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltIntIntIntQu_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TFltIntIntIntQu_GetVal3)
    GetVal4 = _swig_new_instance_method(_snap.TFltIntIntIntQu_GetVal4)
    __swig_destroy__ = _snap.delete_TFltIntIntIntQu

# Register TFltIntIntIntQu in _snap:
_snap.TFltIntIntIntQu_swigregister(TFltIntIntIntQu)

class TIntStrIntIntQu(object):
    r"""Proxy of C++ TQuad< TInt,TStr,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntStrIntIntQu_Val1_get, _snap.TIntStrIntIntQu_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntStrIntIntQu_Val2_get, _snap.TIntStrIntIntQu_Val2_set, doc=r"""Val2 : TStr""")
    Val3 = property(_snap.TIntStrIntIntQu_Val3_get, _snap.TIntStrIntIntQu_Val3_set, doc=r"""Val3 : TInt""")
    Val4 = property(_snap.TIntStrIntIntQu_Val4_get, _snap.TIntStrIntIntQu_Val4_set, doc=r"""Val4 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntStrIntIntQu self) -> TIntStrIntIntQu
        __init__(TIntStrIntIntQu self, TIntStrIntIntQu Quad) -> TIntStrIntIntQu

        Parameters
        ----------
        Quad: TQuad< TInt,TStr,TInt,TInt > const &

        __init__(TIntStrIntIntQu self, TInt _Val1, TStr _Val2, TInt _Val3, TInt _Val4) -> TIntStrIntIntQu

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TStr const &
        _Val3: TInt const &
        _Val4: TInt const &

        __init__(TIntStrIntIntQu self, TSIn SIn) -> TIntStrIntIntQu

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrIntIntQu_swiginit(self, _snap.new_TIntStrIntIntQu(*args))
    Save = _swig_new_instance_method(_snap.TIntStrIntIntQu_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrIntIntQu___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrIntIntQu___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrIntIntQu_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrIntIntQu_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntStrIntIntQu_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntStrIntIntQu_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntStrIntIntQu_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntStrIntIntQu_GetVal3)
    GetVal4 = _swig_new_instance_method(_snap.TIntStrIntIntQu_GetVal4)
    __swig_destroy__ = _snap.delete_TIntStrIntIntQu

# Register TIntStrIntIntQu in _snap:
_snap.TIntStrIntIntQu_swigregister(TIntStrIntIntQu)

class TIntIntFltFltQu(object):
    r"""Proxy of C++ TQuad< TInt,TInt,TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntIntFltFltQu_Val1_get, _snap.TIntIntFltFltQu_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntIntFltFltQu_Val2_get, _snap.TIntIntFltFltQu_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TIntIntFltFltQu_Val3_get, _snap.TIntIntFltFltQu_Val3_set, doc=r"""Val3 : TFlt""")
    Val4 = property(_snap.TIntIntFltFltQu_Val4_get, _snap.TIntIntFltFltQu_Val4_set, doc=r"""Val4 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntIntFltFltQu self) -> TIntIntFltFltQu
        __init__(TIntIntFltFltQu self, TIntIntFltFltQu Quad) -> TIntIntFltFltQu

        Parameters
        ----------
        Quad: TQuad< TInt,TInt,TFlt,TFlt > const &

        __init__(TIntIntFltFltQu self, TInt _Val1, TInt _Val2, TFlt _Val3, TFlt _Val4) -> TIntIntFltFltQu

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TFlt const &
        _Val4: TFlt const &

        __init__(TIntIntFltFltQu self, TSIn SIn) -> TIntIntFltFltQu

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntFltFltQu_swiginit(self, _snap.new_TIntIntFltFltQu(*args))
    Save = _swig_new_instance_method(_snap.TIntIntFltFltQu_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntFltFltQu___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntFltFltQu___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntFltFltQu_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntFltFltQu_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntIntFltFltQu_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntIntFltFltQu_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntIntFltFltQu_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntIntFltFltQu_GetVal3)
    GetVal4 = _swig_new_instance_method(_snap.TIntIntFltFltQu_GetVal4)
    __swig_destroy__ = _snap.delete_TIntIntFltFltQu

# Register TIntIntFltFltQu in _snap:
_snap.TIntIntFltFltQu_swigregister(TIntIntFltFltQu)

class TIntKd(object):
    r"""Proxy of C++ TKeyDat< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntKd_Key_get, _snap.TIntKd_Key_set, doc=r"""Key : TInt""")
    Dat = property(_snap.TIntKd_Dat_get, _snap.TIntKd_Dat_set, doc=r"""Dat : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntKd self) -> TIntKd
        __init__(TIntKd self, TIntKd KeyDat) -> TIntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TInt > const &

        __init__(TIntKd self, TInt _Key) -> TIntKd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TIntKd self, TInt _Key, TInt _Dat) -> TIntKd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TInt const &

        __init__(TIntKd self, TSIn SIn) -> TIntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntKd_swiginit(self, _snap.new_TIntKd(*args))
    Save = _swig_new_instance_method(_snap.TIntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntKd

# Register TIntKd in _snap:
_snap.TIntKd_swigregister(TIntKd)

class TIntUInt64Kd(object):
    r"""Proxy of C++ TKeyDat< TInt,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntUInt64Kd_Key_get, _snap.TIntUInt64Kd_Key_set, doc=r"""Key : TInt""")
    Dat = property(_snap.TIntUInt64Kd_Dat_get, _snap.TIntUInt64Kd_Dat_set, doc=r"""Dat : TUInt64""")

    def __init__(self, *args):
        r"""
        __init__(TIntUInt64Kd self) -> TIntUInt64Kd
        __init__(TIntUInt64Kd self, TIntUInt64Kd KeyDat) -> TIntUInt64Kd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TUInt64 > const &

        __init__(TIntUInt64Kd self, TInt _Key) -> TIntUInt64Kd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TIntUInt64Kd self, TInt _Key, TUInt64 _Dat) -> TIntUInt64Kd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TUInt64 const &

        __init__(TIntUInt64Kd self, TSIn SIn) -> TIntUInt64Kd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntUInt64Kd_swiginit(self, _snap.new_TIntUInt64Kd(*args))
    Save = _swig_new_instance_method(_snap.TIntUInt64Kd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntUInt64Kd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntUInt64Kd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntUInt64Kd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntUInt64Kd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntUInt64Kd

# Register TIntUInt64Kd in _snap:
_snap.TIntUInt64Kd_swigregister(TIntUInt64Kd)

class TIntPrFltKd(object):
    r"""Proxy of C++ TKeyDat< TIntPr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntPrFltKd_Key_get, _snap.TIntPrFltKd_Key_set, doc=r"""Key : TPair<(TInt,TInt)>""")
    Dat = property(_snap.TIntPrFltKd_Dat_get, _snap.TIntPrFltKd_Dat_set, doc=r"""Dat : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntPrFltKd self) -> TIntPrFltKd
        __init__(TIntPrFltKd self, TIntPrFltKd KeyDat) -> TIntPrFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TIntPr,TFlt > const &

        __init__(TIntPrFltKd self, TIntPr _Key) -> TIntPrFltKd

        Parameters
        ----------
        _Key: TPair< TInt,TInt > const &

        __init__(TIntPrFltKd self, TIntPr _Key, TFlt _Dat) -> TIntPrFltKd

        Parameters
        ----------
        _Key: TPair< TInt,TInt > const &
        _Dat: TFlt const &

        __init__(TIntPrFltKd self, TSIn SIn) -> TIntPrFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrFltKd_swiginit(self, _snap.new_TIntPrFltKd(*args))
    Save = _swig_new_instance_method(_snap.TIntPrFltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrFltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrFltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntPrFltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntPrFltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntPrFltKd

# Register TIntPrFltKd in _snap:
_snap.TIntPrFltKd_swigregister(TIntPrFltKd)

class TIntFltPrKd(object):
    r"""Proxy of C++ TKeyDat< TInt,TFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntFltPrKd_Key_get, _snap.TIntFltPrKd_Key_set, doc=r"""Key : TInt""")
    Dat = property(_snap.TIntFltPrKd_Dat_get, _snap.TIntFltPrKd_Dat_set, doc=r"""Dat : TPair<(TFlt,TFlt)>""")

    def __init__(self, *args):
        r"""
        __init__(TIntFltPrKd self) -> TIntFltPrKd
        __init__(TIntFltPrKd self, TIntFltPrKd KeyDat) -> TIntFltPrKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TFltPr > const &

        __init__(TIntFltPrKd self, TInt _Key) -> TIntFltPrKd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TIntFltPrKd self, TInt _Key, TFltPr _Dat) -> TIntFltPrKd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TPair< TFlt,TFlt > const &

        __init__(TIntFltPrKd self, TSIn SIn) -> TIntFltPrKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltPrKd_swiginit(self, _snap.new_TIntFltPrKd(*args))
    Save = _swig_new_instance_method(_snap.TIntFltPrKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltPrKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltPrKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltPrKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltPrKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntFltPrKd

# Register TIntFltPrKd in _snap:
_snap.TIntFltPrKd_swigregister(TIntFltPrKd)

class TIntSFltKd(object):
    r"""Proxy of C++ TKeyDat< TInt,TSFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntSFltKd_Key_get, _snap.TIntSFltKd_Key_set, doc=r"""Key : TInt""")
    Dat = property(_snap.TIntSFltKd_Dat_get, _snap.TIntSFltKd_Dat_set, doc=r"""Dat : TSFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntSFltKd self) -> TIntSFltKd
        __init__(TIntSFltKd self, TIntSFltKd KeyDat) -> TIntSFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TSFlt > const &

        __init__(TIntSFltKd self, TInt _Key) -> TIntSFltKd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TIntSFltKd self, TInt _Key, TSFlt _Dat) -> TIntSFltKd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TSFlt const &

        __init__(TIntSFltKd self, TSIn SIn) -> TIntSFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntSFltKd_swiginit(self, _snap.new_TIntSFltKd(*args))
    Save = _swig_new_instance_method(_snap.TIntSFltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntSFltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntSFltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntSFltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntSFltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntSFltKd

# Register TIntSFltKd in _snap:
_snap.TIntSFltKd_swigregister(TIntSFltKd)

class TIntStrKd(object):
    r"""Proxy of C++ TKeyDat< TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntStrKd_Key_get, _snap.TIntStrKd_Key_set, doc=r"""Key : TInt""")
    Dat = property(_snap.TIntStrKd_Dat_get, _snap.TIntStrKd_Dat_set, doc=r"""Dat : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TIntStrKd self) -> TIntStrKd
        __init__(TIntStrKd self, TIntStrKd KeyDat) -> TIntStrKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TStr > const &

        __init__(TIntStrKd self, TInt _Key) -> TIntStrKd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TIntStrKd self, TInt _Key, TStr _Dat) -> TIntStrKd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TStr const &

        __init__(TIntStrKd self, TSIn SIn) -> TIntStrKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrKd_swiginit(self, _snap.new_TIntStrKd(*args))
    Save = _swig_new_instance_method(_snap.TIntStrKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntStrKd

# Register TIntStrKd in _snap:
_snap.TIntStrKd_swigregister(TIntStrKd)

class TUIntIntKd(object):
    r"""Proxy of C++ TKeyDat< TUInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TUIntIntKd_Key_get, _snap.TUIntIntKd_Key_set, doc=r"""Key : TUInt""")
    Dat = property(_snap.TUIntIntKd_Dat_get, _snap.TUIntIntKd_Dat_set, doc=r"""Dat : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TUIntIntKd self) -> TUIntIntKd
        __init__(TUIntIntKd self, TUIntIntKd KeyDat) -> TUIntIntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TUInt,TInt > const &

        __init__(TUIntIntKd self, TUInt _Key) -> TUIntIntKd

        Parameters
        ----------
        _Key: TUInt const &

        __init__(TUIntIntKd self, TUInt _Key, TInt _Dat) -> TUIntIntKd

        Parameters
        ----------
        _Key: TUInt const &
        _Dat: TInt const &

        __init__(TUIntIntKd self, TSIn SIn) -> TUIntIntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUIntIntKd_swiginit(self, _snap.new_TUIntIntKd(*args))
    Save = _swig_new_instance_method(_snap.TUIntIntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TUIntIntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntIntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUIntIntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUIntIntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TUIntIntKd

# Register TUIntIntKd in _snap:
_snap.TUIntIntKd_swigregister(TUIntIntKd)

class TUIntKd(object):
    r"""Proxy of C++ TKeyDat< TUInt,TUInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TUIntKd_Key_get, _snap.TUIntKd_Key_set, doc=r"""Key : TUInt""")
    Dat = property(_snap.TUIntKd_Dat_get, _snap.TUIntKd_Dat_set, doc=r"""Dat : TUInt""")

    def __init__(self, *args):
        r"""
        __init__(TUIntKd self) -> TUIntKd
        __init__(TUIntKd self, TUIntKd KeyDat) -> TUIntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TUInt,TUInt > const &

        __init__(TUIntKd self, TUInt _Key) -> TUIntKd

        Parameters
        ----------
        _Key: TUInt const &

        __init__(TUIntKd self, TUInt _Key, TUInt _Dat) -> TUIntKd

        Parameters
        ----------
        _Key: TUInt const &
        _Dat: TUInt const &

        __init__(TUIntKd self, TSIn SIn) -> TUIntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUIntKd_swiginit(self, _snap.new_TUIntKd(*args))
    Save = _swig_new_instance_method(_snap.TUIntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TUIntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUIntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUIntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TUIntKd

# Register TUIntKd in _snap:
_snap.TUIntKd_swigregister(TUIntKd)

class TUInt64IntKd(object):
    r"""Proxy of C++ TKeyDat< TUInt64,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TUInt64IntKd_Key_get, _snap.TUInt64IntKd_Key_set, doc=r"""Key : TUInt64""")
    Dat = property(_snap.TUInt64IntKd_Dat_get, _snap.TUInt64IntKd_Dat_set, doc=r"""Dat : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64IntKd self) -> TUInt64IntKd
        __init__(TUInt64IntKd self, TUInt64IntKd KeyDat) -> TUInt64IntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TUInt64,TInt > const &

        __init__(TUInt64IntKd self, TUInt64 _Key) -> TUInt64IntKd

        Parameters
        ----------
        _Key: TUInt64 const &

        __init__(TUInt64IntKd self, TUInt64 _Key, TInt _Dat) -> TUInt64IntKd

        Parameters
        ----------
        _Key: TUInt64 const &
        _Dat: TInt const &

        __init__(TUInt64IntKd self, TSIn SIn) -> TUInt64IntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64IntKd_swiginit(self, _snap.new_TUInt64IntKd(*args))
    Save = _swig_new_instance_method(_snap.TUInt64IntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TUInt64IntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64IntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64IntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64IntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TUInt64IntKd

# Register TUInt64IntKd in _snap:
_snap.TUInt64IntKd_swigregister(TUInt64IntKd)

class TUInt64FltKd(object):
    r"""Proxy of C++ TKeyDat< TUInt64,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TUInt64FltKd_Key_get, _snap.TUInt64FltKd_Key_set, doc=r"""Key : TUInt64""")
    Dat = property(_snap.TUInt64FltKd_Dat_get, _snap.TUInt64FltKd_Dat_set, doc=r"""Dat : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64FltKd self) -> TUInt64FltKd
        __init__(TUInt64FltKd self, TUInt64FltKd KeyDat) -> TUInt64FltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TUInt64,TFlt > const &

        __init__(TUInt64FltKd self, TUInt64 _Key) -> TUInt64FltKd

        Parameters
        ----------
        _Key: TUInt64 const &

        __init__(TUInt64FltKd self, TUInt64 _Key, TFlt _Dat) -> TUInt64FltKd

        Parameters
        ----------
        _Key: TUInt64 const &
        _Dat: TFlt const &

        __init__(TUInt64FltKd self, TSIn SIn) -> TUInt64FltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64FltKd_swiginit(self, _snap.new_TUInt64FltKd(*args))
    Save = _swig_new_instance_method(_snap.TUInt64FltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TUInt64FltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64FltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64FltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64FltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TUInt64FltKd

# Register TUInt64FltKd in _snap:
_snap.TUInt64FltKd_swigregister(TUInt64FltKd)

class TUInt64StrKd(object):
    r"""Proxy of C++ TKeyDat< TUInt64,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TUInt64StrKd_Key_get, _snap.TUInt64StrKd_Key_set, doc=r"""Key : TUInt64""")
    Dat = property(_snap.TUInt64StrKd_Dat_get, _snap.TUInt64StrKd_Dat_set, doc=r"""Dat : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64StrKd self) -> TUInt64StrKd
        __init__(TUInt64StrKd self, TUInt64StrKd KeyDat) -> TUInt64StrKd

        Parameters
        ----------
        KeyDat: TKeyDat< TUInt64,TStr > const &

        __init__(TUInt64StrKd self, TUInt64 _Key) -> TUInt64StrKd

        Parameters
        ----------
        _Key: TUInt64 const &

        __init__(TUInt64StrKd self, TUInt64 _Key, TStr _Dat) -> TUInt64StrKd

        Parameters
        ----------
        _Key: TUInt64 const &
        _Dat: TStr const &

        __init__(TUInt64StrKd self, TSIn SIn) -> TUInt64StrKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64StrKd_swiginit(self, _snap.new_TUInt64StrKd(*args))
    Save = _swig_new_instance_method(_snap.TUInt64StrKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TUInt64StrKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64StrKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64StrKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64StrKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TUInt64StrKd

# Register TUInt64StrKd in _snap:
_snap.TUInt64StrKd_swigregister(TUInt64StrKd)

class TFltBoolKd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltBoolKd_Key_get, _snap.TFltBoolKd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltBoolKd_Dat_get, _snap.TFltBoolKd_Dat_set, doc=r"""Dat : TBool""")

    def __init__(self, *args):
        r"""
        __init__(TFltBoolKd self) -> TFltBoolKd
        __init__(TFltBoolKd self, TFltBoolKd KeyDat) -> TFltBoolKd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TBool > const &

        __init__(TFltBoolKd self, TFlt _Key) -> TFltBoolKd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltBoolKd self, TFlt _Key, TBool _Dat) -> TFltBoolKd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TBool const &

        __init__(TFltBoolKd self, TSIn SIn) -> TFltBoolKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltBoolKd_swiginit(self, _snap.new_TFltBoolKd(*args))
    Save = _swig_new_instance_method(_snap.TFltBoolKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltBoolKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltBoolKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltBoolKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltBoolKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltBoolKd

# Register TFltBoolKd in _snap:
_snap.TFltBoolKd_swigregister(TFltBoolKd)

class TFltIntKd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltIntKd_Key_get, _snap.TFltIntKd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltIntKd_Dat_get, _snap.TFltIntKd_Dat_set, doc=r"""Dat : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TFltIntKd self) -> TFltIntKd
        __init__(TFltIntKd self, TFltIntKd KeyDat) -> TFltIntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TInt > const &

        __init__(TFltIntKd self, TFlt _Key) -> TFltIntKd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltIntKd self, TFlt _Key, TInt _Dat) -> TFltIntKd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TInt const &

        __init__(TFltIntKd self, TSIn SIn) -> TFltIntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntKd_swiginit(self, _snap.new_TFltIntKd(*args))
    Save = _swig_new_instance_method(_snap.TFltIntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltIntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltIntKd

# Register TFltIntKd in _snap:
_snap.TFltIntKd_swigregister(TFltIntKd)

class TFltUInt64Kd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltUInt64Kd_Key_get, _snap.TFltUInt64Kd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltUInt64Kd_Dat_get, _snap.TFltUInt64Kd_Dat_set, doc=r"""Dat : TUInt64""")

    def __init__(self, *args):
        r"""
        __init__(TFltUInt64Kd self) -> TFltUInt64Kd
        __init__(TFltUInt64Kd self, TFltUInt64Kd KeyDat) -> TFltUInt64Kd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TUInt64 > const &

        __init__(TFltUInt64Kd self, TFlt _Key) -> TFltUInt64Kd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltUInt64Kd self, TFlt _Key, TUInt64 _Dat) -> TFltUInt64Kd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TUInt64 const &

        __init__(TFltUInt64Kd self, TSIn SIn) -> TFltUInt64Kd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltUInt64Kd_swiginit(self, _snap.new_TFltUInt64Kd(*args))
    Save = _swig_new_instance_method(_snap.TFltUInt64Kd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltUInt64Kd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltUInt64Kd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltUInt64Kd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltUInt64Kd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltUInt64Kd

# Register TFltUInt64Kd in _snap:
_snap.TFltUInt64Kd_swigregister(TFltUInt64Kd)

class TFltIntPrKd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltIntPrKd_Key_get, _snap.TFltIntPrKd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltIntPrKd_Dat_get, _snap.TFltIntPrKd_Dat_set, doc=r"""Dat : TPair<(TInt,TInt)>""")

    def __init__(self, *args):
        r"""
        __init__(TFltIntPrKd self) -> TFltIntPrKd
        __init__(TFltIntPrKd self, TFltIntPrKd KeyDat) -> TFltIntPrKd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TIntPr > const &

        __init__(TFltIntPrKd self, TFlt _Key) -> TFltIntPrKd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltIntPrKd self, TFlt _Key, TIntPr _Dat) -> TFltIntPrKd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TPair< TInt,TInt > const &

        __init__(TFltIntPrKd self, TSIn SIn) -> TFltIntPrKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntPrKd_swiginit(self, _snap.new_TFltIntPrKd(*args))
    Save = _swig_new_instance_method(_snap.TFltIntPrKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltIntPrKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntPrKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntPrKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntPrKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltIntPrKd

# Register TFltIntPrKd in _snap:
_snap.TFltIntPrKd_swigregister(TFltIntPrKd)

class TFltUIntKd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TUInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltUIntKd_Key_get, _snap.TFltUIntKd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltUIntKd_Dat_get, _snap.TFltUIntKd_Dat_set, doc=r"""Dat : TUInt""")

    def __init__(self, *args):
        r"""
        __init__(TFltUIntKd self) -> TFltUIntKd
        __init__(TFltUIntKd self, TFltUIntKd KeyDat) -> TFltUIntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TUInt > const &

        __init__(TFltUIntKd self, TFlt _Key) -> TFltUIntKd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltUIntKd self, TFlt _Key, TUInt _Dat) -> TFltUIntKd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TUInt const &

        __init__(TFltUIntKd self, TSIn SIn) -> TFltUIntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltUIntKd_swiginit(self, _snap.new_TFltUIntKd(*args))
    Save = _swig_new_instance_method(_snap.TFltUIntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltUIntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltUIntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltUIntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltUIntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltUIntKd

# Register TFltUIntKd in _snap:
_snap.TFltUIntKd_swigregister(TFltUIntKd)

class TFltKd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltKd_Key_get, _snap.TFltKd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltKd_Dat_get, _snap.TFltKd_Dat_set, doc=r"""Dat : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TFltKd self) -> TFltKd
        __init__(TFltKd self, TFltKd KeyDat) -> TFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TFlt > const &

        __init__(TFltKd self, TFlt _Key) -> TFltKd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltKd self, TFlt _Key, TFlt _Dat) -> TFltKd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TFlt const &

        __init__(TFltKd self, TSIn SIn) -> TFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltKd_swiginit(self, _snap.new_TFltKd(*args))
    Save = _swig_new_instance_method(_snap.TFltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltKd

# Register TFltKd in _snap:
_snap.TFltKd_swigregister(TFltKd)

class TFltStrKd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltStrKd_Key_get, _snap.TFltStrKd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltStrKd_Dat_get, _snap.TFltStrKd_Dat_set, doc=r"""Dat : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TFltStrKd self) -> TFltStrKd
        __init__(TFltStrKd self, TFltStrKd KeyDat) -> TFltStrKd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TStr > const &

        __init__(TFltStrKd self, TFlt _Key) -> TFltStrKd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltStrKd self, TFlt _Key, TStr _Dat) -> TFltStrKd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TStr const &

        __init__(TFltStrKd self, TSIn SIn) -> TFltStrKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltStrKd_swiginit(self, _snap.new_TFltStrKd(*args))
    Save = _swig_new_instance_method(_snap.TFltStrKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltStrKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltStrKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltStrKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltStrKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltStrKd

# Register TFltStrKd in _snap:
_snap.TFltStrKd_swigregister(TFltStrKd)

class TFltIntBoolPrKd(object):
    r"""Proxy of C++ TKeyDat< TFlt,TIntBoolPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TFltIntBoolPrKd_Key_get, _snap.TFltIntBoolPrKd_Key_set, doc=r"""Key : TFlt""")
    Dat = property(_snap.TFltIntBoolPrKd_Dat_get, _snap.TFltIntBoolPrKd_Dat_set, doc=r"""Dat : TPair<(TInt,TBool)>""")

    def __init__(self, *args):
        r"""
        __init__(TFltIntBoolPrKd self) -> TFltIntBoolPrKd
        __init__(TFltIntBoolPrKd self, TFltIntBoolPrKd KeyDat) -> TFltIntBoolPrKd

        Parameters
        ----------
        KeyDat: TKeyDat< TFlt,TIntBoolPr > const &

        __init__(TFltIntBoolPrKd self, TFlt _Key) -> TFltIntBoolPrKd

        Parameters
        ----------
        _Key: TFlt const &

        __init__(TFltIntBoolPrKd self, TFlt _Key, TIntBoolPr _Dat) -> TFltIntBoolPrKd

        Parameters
        ----------
        _Key: TFlt const &
        _Dat: TPair< TInt,TBool > const &

        __init__(TFltIntBoolPrKd self, TSIn SIn) -> TFltIntBoolPrKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntBoolPrKd_swiginit(self, _snap.new_TFltIntBoolPrKd(*args))
    Save = _swig_new_instance_method(_snap.TFltIntBoolPrKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltIntBoolPrKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntBoolPrKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntBoolPrKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntBoolPrKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TFltIntBoolPrKd

# Register TFltIntBoolPrKd in _snap:
_snap.TFltIntBoolPrKd_swigregister(TFltIntBoolPrKd)

class TAscFltIntKd(object):
    r"""Proxy of C++ TKeyDat< TAscFlt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TAscFltIntKd_Key_get, _snap.TAscFltIntKd_Key_set, doc=r"""Key : TAscFlt""")
    Dat = property(_snap.TAscFltIntKd_Dat_get, _snap.TAscFltIntKd_Dat_set, doc=r"""Dat : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TAscFltIntKd self) -> TAscFltIntKd
        __init__(TAscFltIntKd self, TAscFltIntKd KeyDat) -> TAscFltIntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TAscFlt,TInt > const &

        __init__(TAscFltIntKd self, TAscFlt _Key) -> TAscFltIntKd

        Parameters
        ----------
        _Key: TAscFlt const &

        __init__(TAscFltIntKd self, TAscFlt _Key, TInt _Dat) -> TAscFltIntKd

        Parameters
        ----------
        _Key: TAscFlt const &
        _Dat: TInt const &

        __init__(TAscFltIntKd self, TSIn SIn) -> TAscFltIntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltIntKd_swiginit(self, _snap.new_TAscFltIntKd(*args))
    Save = _swig_new_instance_method(_snap.TAscFltIntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TAscFltIntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltIntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltIntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltIntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TAscFltIntKd

# Register TAscFltIntKd in _snap:
_snap.TAscFltIntKd_swigregister(TAscFltIntKd)

class TStrBoolKd(object):
    r"""Proxy of C++ TKeyDat< TStr,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TStrBoolKd_Key_get, _snap.TStrBoolKd_Key_set, doc=r"""Key : TStr""")
    Dat = property(_snap.TStrBoolKd_Dat_get, _snap.TStrBoolKd_Dat_set, doc=r"""Dat : TBool""")

    def __init__(self, *args):
        r"""
        __init__(TStrBoolKd self) -> TStrBoolKd
        __init__(TStrBoolKd self, TStrBoolKd KeyDat) -> TStrBoolKd

        Parameters
        ----------
        KeyDat: TKeyDat< TStr,TBool > const &

        __init__(TStrBoolKd self, TStr _Key) -> TStrBoolKd

        Parameters
        ----------
        _Key: TStr const &

        __init__(TStrBoolKd self, TStr _Key, TBool _Dat) -> TStrBoolKd

        Parameters
        ----------
        _Key: TStr const &
        _Dat: TBool const &

        __init__(TStrBoolKd self, TSIn SIn) -> TStrBoolKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrBoolKd_swiginit(self, _snap.new_TStrBoolKd(*args))
    Save = _swig_new_instance_method(_snap.TStrBoolKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrBoolKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrBoolKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrBoolKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrBoolKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TStrBoolKd

# Register TStrBoolKd in _snap:
_snap.TStrBoolKd_swigregister(TStrBoolKd)

class TStrIntKd(object):
    r"""Proxy of C++ TKeyDat< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TStrIntKd_Key_get, _snap.TStrIntKd_Key_set, doc=r"""Key : TStr""")
    Dat = property(_snap.TStrIntKd_Dat_get, _snap.TStrIntKd_Dat_set, doc=r"""Dat : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TStrIntKd self) -> TStrIntKd
        __init__(TStrIntKd self, TStrIntKd KeyDat) -> TStrIntKd

        Parameters
        ----------
        KeyDat: TKeyDat< TStr,TInt > const &

        __init__(TStrIntKd self, TStr _Key) -> TStrIntKd

        Parameters
        ----------
        _Key: TStr const &

        __init__(TStrIntKd self, TStr _Key, TInt _Dat) -> TStrIntKd

        Parameters
        ----------
        _Key: TStr const &
        _Dat: TInt const &

        __init__(TStrIntKd self, TSIn SIn) -> TStrIntKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntKd_swiginit(self, _snap.new_TStrIntKd(*args))
    Save = _swig_new_instance_method(_snap.TStrIntKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TStrIntKd

# Register TStrIntKd in _snap:
_snap.TStrIntKd_swigregister(TStrIntKd)

class TStrFltKd(object):
    r"""Proxy of C++ TKeyDat< TStr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TStrFltKd_Key_get, _snap.TStrFltKd_Key_set, doc=r"""Key : TStr""")
    Dat = property(_snap.TStrFltKd_Dat_get, _snap.TStrFltKd_Dat_set, doc=r"""Dat : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TStrFltKd self) -> TStrFltKd
        __init__(TStrFltKd self, TStrFltKd KeyDat) -> TStrFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TStr,TFlt > const &

        __init__(TStrFltKd self, TStr _Key) -> TStrFltKd

        Parameters
        ----------
        _Key: TStr const &

        __init__(TStrFltKd self, TStr _Key, TFlt _Dat) -> TStrFltKd

        Parameters
        ----------
        _Key: TStr const &
        _Dat: TFlt const &

        __init__(TStrFltKd self, TSIn SIn) -> TStrFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltKd_swiginit(self, _snap.new_TStrFltKd(*args))
    Save = _swig_new_instance_method(_snap.TStrFltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrFltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrFltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrFltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TStrFltKd

# Register TStrFltKd in _snap:
_snap.TStrFltKd_swigregister(TStrFltKd)

class TStrAscFltKd(object):
    r"""Proxy of C++ TKeyDat< TStr,TAscFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TStrAscFltKd_Key_get, _snap.TStrAscFltKd_Key_set, doc=r"""Key : TStr""")
    Dat = property(_snap.TStrAscFltKd_Dat_get, _snap.TStrAscFltKd_Dat_set, doc=r"""Dat : TAscFlt""")

    def __init__(self, *args):
        r"""
        __init__(TStrAscFltKd self) -> TStrAscFltKd
        __init__(TStrAscFltKd self, TStrAscFltKd KeyDat) -> TStrAscFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TStr,TAscFlt > const &

        __init__(TStrAscFltKd self, TStr _Key) -> TStrAscFltKd

        Parameters
        ----------
        _Key: TStr const &

        __init__(TStrAscFltKd self, TStr _Key, TAscFlt _Dat) -> TStrAscFltKd

        Parameters
        ----------
        _Key: TStr const &
        _Dat: TAscFlt const &

        __init__(TStrAscFltKd self, TSIn SIn) -> TStrAscFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrAscFltKd_swiginit(self, _snap.new_TStrAscFltKd(*args))
    Save = _swig_new_instance_method(_snap.TStrAscFltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrAscFltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrAscFltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrAscFltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrAscFltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TStrAscFltKd

# Register TStrAscFltKd in _snap:
_snap.TStrAscFltKd_swigregister(TStrAscFltKd)

class TStrKd(object):
    r"""Proxy of C++ TKeyDat< TStr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TStrKd_Key_get, _snap.TStrKd_Key_set, doc=r"""Key : TStr""")
    Dat = property(_snap.TStrKd_Dat_get, _snap.TStrKd_Dat_set, doc=r"""Dat : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TStrKd self) -> TStrKd
        __init__(TStrKd self, TStrKd KeyDat) -> TStrKd

        Parameters
        ----------
        KeyDat: TKeyDat< TStr,TStr > const &

        __init__(TStrKd self, TStr _Key) -> TStrKd

        Parameters
        ----------
        _Key: TStr const &

        __init__(TStrKd self, TStr _Key, TStr _Dat) -> TStrKd

        Parameters
        ----------
        _Key: TStr const &
        _Dat: TStr const &

        __init__(TStrKd self, TSIn SIn) -> TStrKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrKd_swiginit(self, _snap.new_TStrKd(*args))
    Save = _swig_new_instance_method(_snap.TStrKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TStrKd

# Register TStrKd in _snap:
_snap.TStrKd_swigregister(TStrKd)

class TBoolV(object):
    r"""Proxy of C++ TVec< TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TBoolV

    def __init__(self, *args):
        r"""
        __init__(TBoolV self) -> TBoolV
        __init__(TBoolV self, TBoolV Vec) -> TBoolV

        Parameters
        ----------
        Vec: TVec< TBool,int > const &

        __init__(TBoolV self, int const & _Vals) -> TBoolV

        Parameters
        ----------
        _Vals: int const &

        __init__(TBoolV self, int const & _MxVals, int const & _Vals) -> TBoolV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TBoolV self, TBool _ValT, int const & _Vals) -> TBoolV

        Parameters
        ----------
        _ValT: TBool *
        _Vals: int const &

        __init__(TBoolV self, TSIn SIn) -> TBoolV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBoolV_swiginit(self, _snap.new_TBoolV(*args))
    LoadShM = _swig_new_instance_method(_snap.TBoolV_LoadShM)
    Load = _swig_new_instance_method(_snap.TBoolV_Load)
    Save = _swig_new_instance_method(_snap.TBoolV_Save)
    __add__ = _swig_new_instance_method(_snap.TBoolV___add__)
    __eq__ = _swig_new_instance_method(_snap.TBoolV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TBoolV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TBoolV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TBoolV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TBoolV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TBoolV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TBoolV_Gen)
    GenExt = _swig_new_instance_method(_snap.TBoolV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TBoolV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TBoolV_Reserve)
    Clr = _swig_new_instance_method(_snap.TBoolV_Clr)
    Trunc = _swig_new_instance_method(_snap.TBoolV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TBoolV_Reduce)
    Pack = _swig_new_instance_method(_snap.TBoolV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TBoolV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TBoolV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TBoolV_Empty)
    Len = _swig_new_instance_method(_snap.TBoolV_Len)
    Reserved = _swig_new_instance_method(_snap.TBoolV_Reserved)
    Last = _swig_new_instance_method(_snap.TBoolV_Last)
    LastValN = _swig_new_instance_method(_snap.TBoolV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TBoolV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TBoolV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TBoolV_BegI)
    EndI = _swig_new_instance_method(_snap.TBoolV_EndI)
    GetI = _swig_new_instance_method(_snap.TBoolV_GetI)
    Add = _swig_new_instance_method(_snap.TBoolV_Add)
    AddV = _swig_new_instance_method(_snap.TBoolV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TBoolV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TBoolV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TBoolV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TBoolV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TBoolV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TBoolV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TBoolV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TBoolV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TBoolV_Ins)
    Del = _swig_new_instance_method(_snap.TBoolV_Del)
    DelLast = _swig_new_instance_method(_snap.TBoolV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TBoolV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TBoolV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TBoolV_PutAll)
    Swap = _swig_new_instance_method(_snap.TBoolV_Swap)
    SwapI = _swig_new_static_method(_snap.TBoolV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TBoolV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TBoolV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TBoolV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TBoolV_BSort)
    ISort = _swig_new_instance_method(_snap.TBoolV_ISort)
    Partition = _swig_new_instance_method(_snap.TBoolV_Partition)
    QSort = _swig_new_instance_method(_snap.TBoolV_QSort)
    Sort = _swig_new_instance_method(_snap.TBoolV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TBoolV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TBoolV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TBoolV_Reverse)
    Merge = _swig_new_instance_method(_snap.TBoolV_Merge)
    Intrs = _swig_new_instance_method(_snap.TBoolV_Intrs)
    Union = _swig_new_instance_method(_snap.TBoolV_Union)
    Diff = _swig_new_instance_method(_snap.TBoolV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TBoolV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TBoolV_UnionLen)
    Count = _swig_new_instance_method(_snap.TBoolV_Count)
    SearchBin = _swig_new_instance_method(_snap.TBoolV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TBoolV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TBoolV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TBoolV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TBoolV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TBoolV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TBoolV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TBoolV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TBoolV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TBoolV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TBoolV_GetV)

# Register TBoolV in _snap:
_snap.TBoolV_swigregister(TBoolV)
TBoolV_SwapI = _snap.TBoolV_SwapI
TBoolV_GetV = _snap.TBoolV_GetV

class TChV(object):
    r"""Proxy of C++ TVec< TCh > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TChV

    def __init__(self, *args):
        r"""
        __init__(TChV self) -> TChV
        __init__(TChV self, TChV Vec) -> TChV

        Parameters
        ----------
        Vec: TVec< TCh,int > const &

        __init__(TChV self, int const & _Vals) -> TChV

        Parameters
        ----------
        _Vals: int const &

        __init__(TChV self, int const & _MxVals, int const & _Vals) -> TChV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TChV self, TCh _ValT, int const & _Vals) -> TChV

        Parameters
        ----------
        _ValT: TCh *
        _Vals: int const &

        __init__(TChV self, TSIn SIn) -> TChV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChV_swiginit(self, _snap.new_TChV(*args))
    LoadShM = _swig_new_instance_method(_snap.TChV_LoadShM)
    Load = _swig_new_instance_method(_snap.TChV_Load)
    Save = _swig_new_instance_method(_snap.TChV_Save)
    __add__ = _swig_new_instance_method(_snap.TChV___add__)
    __eq__ = _swig_new_instance_method(_snap.TChV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TChV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TChV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TChV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TChV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TChV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TChV_Gen)
    GenExt = _swig_new_instance_method(_snap.TChV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TChV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TChV_Reserve)
    Clr = _swig_new_instance_method(_snap.TChV_Clr)
    Trunc = _swig_new_instance_method(_snap.TChV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TChV_Reduce)
    Pack = _swig_new_instance_method(_snap.TChV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TChV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TChV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TChV_Empty)
    Len = _swig_new_instance_method(_snap.TChV_Len)
    Reserved = _swig_new_instance_method(_snap.TChV_Reserved)
    Last = _swig_new_instance_method(_snap.TChV_Last)
    LastValN = _swig_new_instance_method(_snap.TChV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TChV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TChV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TChV_BegI)
    EndI = _swig_new_instance_method(_snap.TChV_EndI)
    GetI = _swig_new_instance_method(_snap.TChV_GetI)
    Add = _swig_new_instance_method(_snap.TChV_Add)
    AddV = _swig_new_instance_method(_snap.TChV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TChV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TChV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TChV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TChV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TChV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TChV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TChV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TChV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TChV_Ins)
    Del = _swig_new_instance_method(_snap.TChV_Del)
    DelLast = _swig_new_instance_method(_snap.TChV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TChV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TChV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TChV_PutAll)
    Swap = _swig_new_instance_method(_snap.TChV_Swap)
    SwapI = _swig_new_static_method(_snap.TChV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TChV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TChV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TChV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TChV_BSort)
    ISort = _swig_new_instance_method(_snap.TChV_ISort)
    Partition = _swig_new_instance_method(_snap.TChV_Partition)
    QSort = _swig_new_instance_method(_snap.TChV_QSort)
    Sort = _swig_new_instance_method(_snap.TChV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TChV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TChV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TChV_Reverse)
    Merge = _swig_new_instance_method(_snap.TChV_Merge)
    Intrs = _swig_new_instance_method(_snap.TChV_Intrs)
    Union = _swig_new_instance_method(_snap.TChV_Union)
    Diff = _swig_new_instance_method(_snap.TChV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TChV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TChV_UnionLen)
    Count = _swig_new_instance_method(_snap.TChV_Count)
    SearchBin = _swig_new_instance_method(_snap.TChV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TChV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TChV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TChV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TChV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TChV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TChV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TChV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TChV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TChV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TChV_GetV)

# Register TChV in _snap:
_snap.TChV_swigregister(TChV)
TChV_SwapI = _snap.TChV_SwapI
TChV_GetV = _snap.TChV_GetV

class TUChV(object):
    r"""Proxy of C++ TVec< TUCh > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUChV

    def __init__(self, *args):
        r"""
        __init__(TUChV self) -> TUChV
        __init__(TUChV self, TUChV Vec) -> TUChV

        Parameters
        ----------
        Vec: TVec< TUCh,int > const &

        __init__(TUChV self, int const & _Vals) -> TUChV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUChV self, int const & _MxVals, int const & _Vals) -> TUChV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUChV self, TUCh _ValT, int const & _Vals) -> TUChV

        Parameters
        ----------
        _ValT: TUCh *
        _Vals: int const &

        __init__(TUChV self, TSIn SIn) -> TUChV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUChV_swiginit(self, _snap.new_TUChV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUChV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUChV_Load)
    Save = _swig_new_instance_method(_snap.TUChV_Save)
    __add__ = _swig_new_instance_method(_snap.TUChV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUChV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUChV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUChV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUChV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUChV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUChV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUChV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUChV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUChV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUChV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUChV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUChV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUChV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUChV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUChV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUChV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUChV_Empty)
    Len = _swig_new_instance_method(_snap.TUChV_Len)
    Reserved = _swig_new_instance_method(_snap.TUChV_Reserved)
    Last = _swig_new_instance_method(_snap.TUChV_Last)
    LastValN = _swig_new_instance_method(_snap.TUChV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUChV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUChV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUChV_BegI)
    EndI = _swig_new_instance_method(_snap.TUChV_EndI)
    GetI = _swig_new_instance_method(_snap.TUChV_GetI)
    Add = _swig_new_instance_method(_snap.TUChV_Add)
    AddV = _swig_new_instance_method(_snap.TUChV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUChV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUChV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUChV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUChV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUChV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUChV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUChV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUChV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUChV_Ins)
    Del = _swig_new_instance_method(_snap.TUChV_Del)
    DelLast = _swig_new_instance_method(_snap.TUChV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUChV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUChV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUChV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUChV_Swap)
    SwapI = _swig_new_static_method(_snap.TUChV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUChV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUChV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUChV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUChV_BSort)
    ISort = _swig_new_instance_method(_snap.TUChV_ISort)
    Partition = _swig_new_instance_method(_snap.TUChV_Partition)
    QSort = _swig_new_instance_method(_snap.TUChV_QSort)
    Sort = _swig_new_instance_method(_snap.TUChV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUChV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUChV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUChV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUChV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUChV_Intrs)
    Union = _swig_new_instance_method(_snap.TUChV_Union)
    Diff = _swig_new_instance_method(_snap.TUChV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUChV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUChV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUChV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUChV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUChV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUChV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUChV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUChV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUChV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUChV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUChV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUChV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUChV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUChV_GetV)

# Register TUChV in _snap:
_snap.TUChV_swigregister(TUChV)
TUChV_SwapI = _snap.TUChV_SwapI
TUChV_GetV = _snap.TUChV_GetV

class TUIntV(object):
    r"""Proxy of C++ TVec< TUInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUIntV

    def __init__(self, *args):
        r"""
        __init__(TUIntV self) -> TUIntV
        __init__(TUIntV self, TUIntV Vec) -> TUIntV

        Parameters
        ----------
        Vec: TVec< TUInt,int > const &

        __init__(TUIntV self, int const & _Vals) -> TUIntV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUIntV self, int const & _MxVals, int const & _Vals) -> TUIntV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUIntV self, TUInt _ValT, int const & _Vals) -> TUIntV

        Parameters
        ----------
        _ValT: TUInt *
        _Vals: int const &

        __init__(TUIntV self, TSIn SIn) -> TUIntV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUIntV_swiginit(self, _snap.new_TUIntV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUIntV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUIntV_Load)
    Save = _swig_new_instance_method(_snap.TUIntV_Save)
    __add__ = _swig_new_instance_method(_snap.TUIntV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUIntV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUIntV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUIntV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUIntV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUIntV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUIntV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUIntV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUIntV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUIntV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUIntV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUIntV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUIntV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUIntV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUIntV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUIntV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUIntV_Empty)
    Len = _swig_new_instance_method(_snap.TUIntV_Len)
    Reserved = _swig_new_instance_method(_snap.TUIntV_Reserved)
    Last = _swig_new_instance_method(_snap.TUIntV_Last)
    LastValN = _swig_new_instance_method(_snap.TUIntV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUIntV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUIntV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUIntV_BegI)
    EndI = _swig_new_instance_method(_snap.TUIntV_EndI)
    GetI = _swig_new_instance_method(_snap.TUIntV_GetI)
    Add = _swig_new_instance_method(_snap.TUIntV_Add)
    AddV = _swig_new_instance_method(_snap.TUIntV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUIntV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUIntV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUIntV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUIntV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUIntV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUIntV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUIntV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUIntV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUIntV_Ins)
    Del = _swig_new_instance_method(_snap.TUIntV_Del)
    DelLast = _swig_new_instance_method(_snap.TUIntV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUIntV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUIntV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUIntV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUIntV_Swap)
    SwapI = _swig_new_static_method(_snap.TUIntV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUIntV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUIntV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUIntV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUIntV_BSort)
    ISort = _swig_new_instance_method(_snap.TUIntV_ISort)
    Partition = _swig_new_instance_method(_snap.TUIntV_Partition)
    QSort = _swig_new_instance_method(_snap.TUIntV_QSort)
    Sort = _swig_new_instance_method(_snap.TUIntV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUIntV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUIntV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUIntV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUIntV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUIntV_Intrs)
    Union = _swig_new_instance_method(_snap.TUIntV_Union)
    Diff = _swig_new_instance_method(_snap.TUIntV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUIntV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUIntV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUIntV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUIntV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUIntV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUIntV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUIntV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUIntV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUIntV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUIntV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUIntV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUIntV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUIntV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUIntV_GetV)

# Register TUIntV in _snap:
_snap.TUIntV_swigregister(TUIntV)
TUIntV_SwapI = _snap.TUIntV_SwapI
TUIntV_GetV = _snap.TUIntV_GetV

class TUInt64V(object):
    r"""Proxy of C++ TVec< TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUInt64V

    def __init__(self, *args):
        r"""
        __init__(TUInt64V self) -> TUInt64V
        __init__(TUInt64V self, TUInt64V Vec) -> TUInt64V

        Parameters
        ----------
        Vec: TVec< TUInt64,int > const &

        __init__(TUInt64V self, int const & _Vals) -> TUInt64V

        Parameters
        ----------
        _Vals: int const &

        __init__(TUInt64V self, int const & _MxVals, int const & _Vals) -> TUInt64V

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUInt64V self, TUInt64 _ValT, int const & _Vals) -> TUInt64V

        Parameters
        ----------
        _ValT: TUInt64 *
        _Vals: int const &

        __init__(TUInt64V self, TSIn SIn) -> TUInt64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64V_swiginit(self, _snap.new_TUInt64V(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64V_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64V_Load)
    Save = _swig_new_instance_method(_snap.TUInt64V_Save)
    __add__ = _swig_new_instance_method(_snap.TUInt64V___add__)
    __eq__ = _swig_new_instance_method(_snap.TUInt64V___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64V___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64V_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUInt64V_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64V_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64V_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUInt64V_Gen)
    GenExt = _swig_new_instance_method(_snap.TUInt64V_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUInt64V_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUInt64V_Reserve)
    Clr = _swig_new_instance_method(_snap.TUInt64V_Clr)
    Trunc = _swig_new_instance_method(_snap.TUInt64V_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUInt64V_Reduce)
    Pack = _swig_new_instance_method(_snap.TUInt64V_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUInt64V_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUInt64V_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUInt64V_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64V_Len)
    Reserved = _swig_new_instance_method(_snap.TUInt64V_Reserved)
    Last = _swig_new_instance_method(_snap.TUInt64V_Last)
    LastValN = _swig_new_instance_method(_snap.TUInt64V_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUInt64V_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUInt64V_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUInt64V_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64V_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64V_GetI)
    Add = _swig_new_instance_method(_snap.TUInt64V_Add)
    AddV = _swig_new_instance_method(_snap.TUInt64V_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUInt64V_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUInt64V_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUInt64V_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUInt64V_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUInt64V_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUInt64V_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUInt64V_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUInt64V_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUInt64V_Ins)
    Del = _swig_new_instance_method(_snap.TUInt64V_Del)
    DelLast = _swig_new_instance_method(_snap.TUInt64V_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUInt64V_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUInt64V_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUInt64V_PutAll)
    Swap = _swig_new_instance_method(_snap.TUInt64V_Swap)
    SwapI = _swig_new_static_method(_snap.TUInt64V_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUInt64V_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUInt64V_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUInt64V_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUInt64V_BSort)
    ISort = _swig_new_instance_method(_snap.TUInt64V_ISort)
    Partition = _swig_new_instance_method(_snap.TUInt64V_Partition)
    QSort = _swig_new_instance_method(_snap.TUInt64V_QSort)
    Sort = _swig_new_instance_method(_snap.TUInt64V_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUInt64V_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUInt64V_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUInt64V_Reverse)
    Merge = _swig_new_instance_method(_snap.TUInt64V_Merge)
    Intrs = _swig_new_instance_method(_snap.TUInt64V_Intrs)
    Union = _swig_new_instance_method(_snap.TUInt64V_Union)
    Diff = _swig_new_instance_method(_snap.TUInt64V_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUInt64V_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUInt64V_UnionLen)
    Count = _swig_new_instance_method(_snap.TUInt64V_Count)
    SearchBin = _swig_new_instance_method(_snap.TUInt64V_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUInt64V_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUInt64V_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUInt64V_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUInt64V_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUInt64V_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUInt64V_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUInt64V_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUInt64V_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUInt64V_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUInt64V_GetV)

# Register TUInt64V in _snap:
_snap.TUInt64V_swigregister(TUInt64V)
TUInt64V_SwapI = _snap.TUInt64V_SwapI
TUInt64V_GetV = _snap.TUInt64V_GetV

class TSFltV(object):
    r"""Proxy of C++ TVec< TSFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSFltV

    def __init__(self, *args):
        r"""
        __init__(TSFltV self) -> TSFltV
        __init__(TSFltV self, TSFltV Vec) -> TSFltV

        Parameters
        ----------
        Vec: TVec< TSFlt,int > const &

        __init__(TSFltV self, int const & _Vals) -> TSFltV

        Parameters
        ----------
        _Vals: int const &

        __init__(TSFltV self, int const & _MxVals, int const & _Vals) -> TSFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TSFltV self, TSFlt _ValT, int const & _Vals) -> TSFltV

        Parameters
        ----------
        _ValT: TSFlt *
        _Vals: int const &

        __init__(TSFltV self, TSIn SIn) -> TSFltV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TSFltV_swiginit(self, _snap.new_TSFltV(*args))
    LoadShM = _swig_new_instance_method(_snap.TSFltV_LoadShM)
    Load = _swig_new_instance_method(_snap.TSFltV_Load)
    Save = _swig_new_instance_method(_snap.TSFltV_Save)
    __add__ = _swig_new_instance_method(_snap.TSFltV___add__)
    __eq__ = _swig_new_instance_method(_snap.TSFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TSFltV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TSFltV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TSFltV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TSFltV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TSFltV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TSFltV_Gen)
    GenExt = _swig_new_instance_method(_snap.TSFltV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TSFltV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TSFltV_Reserve)
    Clr = _swig_new_instance_method(_snap.TSFltV_Clr)
    Trunc = _swig_new_instance_method(_snap.TSFltV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TSFltV_Reduce)
    Pack = _swig_new_instance_method(_snap.TSFltV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TSFltV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TSFltV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TSFltV_Empty)
    Len = _swig_new_instance_method(_snap.TSFltV_Len)
    Reserved = _swig_new_instance_method(_snap.TSFltV_Reserved)
    Last = _swig_new_instance_method(_snap.TSFltV_Last)
    LastValN = _swig_new_instance_method(_snap.TSFltV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TSFltV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TSFltV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TSFltV_BegI)
    EndI = _swig_new_instance_method(_snap.TSFltV_EndI)
    GetI = _swig_new_instance_method(_snap.TSFltV_GetI)
    Add = _swig_new_instance_method(_snap.TSFltV_Add)
    AddV = _swig_new_instance_method(_snap.TSFltV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TSFltV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TSFltV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TSFltV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TSFltV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TSFltV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TSFltV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TSFltV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TSFltV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TSFltV_Ins)
    Del = _swig_new_instance_method(_snap.TSFltV_Del)
    DelLast = _swig_new_instance_method(_snap.TSFltV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TSFltV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TSFltV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TSFltV_PutAll)
    Swap = _swig_new_instance_method(_snap.TSFltV_Swap)
    SwapI = _swig_new_static_method(_snap.TSFltV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TSFltV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TSFltV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TSFltV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TSFltV_BSort)
    ISort = _swig_new_instance_method(_snap.TSFltV_ISort)
    Partition = _swig_new_instance_method(_snap.TSFltV_Partition)
    QSort = _swig_new_instance_method(_snap.TSFltV_QSort)
    Sort = _swig_new_instance_method(_snap.TSFltV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TSFltV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TSFltV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TSFltV_Reverse)
    Merge = _swig_new_instance_method(_snap.TSFltV_Merge)
    Intrs = _swig_new_instance_method(_snap.TSFltV_Intrs)
    Union = _swig_new_instance_method(_snap.TSFltV_Union)
    Diff = _swig_new_instance_method(_snap.TSFltV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TSFltV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TSFltV_UnionLen)
    Count = _swig_new_instance_method(_snap.TSFltV_Count)
    SearchBin = _swig_new_instance_method(_snap.TSFltV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TSFltV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TSFltV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TSFltV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TSFltV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TSFltV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TSFltV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TSFltV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TSFltV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TSFltV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TSFltV_GetV)

# Register TSFltV in _snap:
_snap.TSFltV_swigregister(TSFltV)
TSFltV_SwapI = _snap.TSFltV_SwapI
TSFltV_GetV = _snap.TSFltV_GetV

class TAscFltV(object):
    r"""Proxy of C++ TVec< TAscFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TAscFltV

    def __init__(self, *args):
        r"""
        __init__(TAscFltV self) -> TAscFltV
        __init__(TAscFltV self, TAscFltV Vec) -> TAscFltV

        Parameters
        ----------
        Vec: TVec< TAscFlt,int > const &

        __init__(TAscFltV self, int const & _Vals) -> TAscFltV

        Parameters
        ----------
        _Vals: int const &

        __init__(TAscFltV self, int const & _MxVals, int const & _Vals) -> TAscFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TAscFltV self, TAscFlt _ValT, int const & _Vals) -> TAscFltV

        Parameters
        ----------
        _ValT: TAscFlt *
        _Vals: int const &

        __init__(TAscFltV self, TSIn SIn) -> TAscFltV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltV_swiginit(self, _snap.new_TAscFltV(*args))
    LoadShM = _swig_new_instance_method(_snap.TAscFltV_LoadShM)
    Load = _swig_new_instance_method(_snap.TAscFltV_Load)
    Save = _swig_new_instance_method(_snap.TAscFltV_Save)
    __add__ = _swig_new_instance_method(_snap.TAscFltV___add__)
    __eq__ = _swig_new_instance_method(_snap.TAscFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TAscFltV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TAscFltV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TAscFltV_Gen)
    GenExt = _swig_new_instance_method(_snap.TAscFltV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TAscFltV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TAscFltV_Reserve)
    Clr = _swig_new_instance_method(_snap.TAscFltV_Clr)
    Trunc = _swig_new_instance_method(_snap.TAscFltV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TAscFltV_Reduce)
    Pack = _swig_new_instance_method(_snap.TAscFltV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TAscFltV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TAscFltV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TAscFltV_Empty)
    Len = _swig_new_instance_method(_snap.TAscFltV_Len)
    Reserved = _swig_new_instance_method(_snap.TAscFltV_Reserved)
    Last = _swig_new_instance_method(_snap.TAscFltV_Last)
    LastValN = _swig_new_instance_method(_snap.TAscFltV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TAscFltV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TAscFltV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TAscFltV_BegI)
    EndI = _swig_new_instance_method(_snap.TAscFltV_EndI)
    GetI = _swig_new_instance_method(_snap.TAscFltV_GetI)
    Add = _swig_new_instance_method(_snap.TAscFltV_Add)
    AddV = _swig_new_instance_method(_snap.TAscFltV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TAscFltV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TAscFltV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TAscFltV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TAscFltV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TAscFltV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TAscFltV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TAscFltV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TAscFltV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TAscFltV_Ins)
    Del = _swig_new_instance_method(_snap.TAscFltV_Del)
    DelLast = _swig_new_instance_method(_snap.TAscFltV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TAscFltV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TAscFltV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TAscFltV_PutAll)
    Swap = _swig_new_instance_method(_snap.TAscFltV_Swap)
    SwapI = _swig_new_static_method(_snap.TAscFltV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TAscFltV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TAscFltV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TAscFltV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TAscFltV_BSort)
    ISort = _swig_new_instance_method(_snap.TAscFltV_ISort)
    Partition = _swig_new_instance_method(_snap.TAscFltV_Partition)
    QSort = _swig_new_instance_method(_snap.TAscFltV_QSort)
    Sort = _swig_new_instance_method(_snap.TAscFltV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TAscFltV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TAscFltV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TAscFltV_Reverse)
    Merge = _swig_new_instance_method(_snap.TAscFltV_Merge)
    Intrs = _swig_new_instance_method(_snap.TAscFltV_Intrs)
    Union = _swig_new_instance_method(_snap.TAscFltV_Union)
    Diff = _swig_new_instance_method(_snap.TAscFltV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TAscFltV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TAscFltV_UnionLen)
    Count = _swig_new_instance_method(_snap.TAscFltV_Count)
    SearchBin = _swig_new_instance_method(_snap.TAscFltV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TAscFltV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TAscFltV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TAscFltV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TAscFltV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TAscFltV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TAscFltV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TAscFltV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TAscFltV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TAscFltV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TAscFltV_GetV)

# Register TAscFltV in _snap:
_snap.TAscFltV_swigregister(TAscFltV)
TAscFltV_SwapI = _snap.TAscFltV_SwapI
TAscFltV_GetV = _snap.TAscFltV_GetV

class TChAV(object):
    r"""Proxy of C++ TVec< TChA > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TChAV

    def __init__(self, *args):
        r"""
        __init__(TChAV self) -> TChAV
        __init__(TChAV self, TChAV Vec) -> TChAV

        Parameters
        ----------
        Vec: TVec< TChA,int > const &

        __init__(TChAV self, int const & _Vals) -> TChAV

        Parameters
        ----------
        _Vals: int const &

        __init__(TChAV self, int const & _MxVals, int const & _Vals) -> TChAV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TChAV self, TChA _ValT, int const & _Vals) -> TChAV

        Parameters
        ----------
        _ValT: TChA *
        _Vals: int const &

        __init__(TChAV self, TSIn SIn) -> TChAV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChAV_swiginit(self, _snap.new_TChAV(*args))
    LoadShM = _swig_new_instance_method(_snap.TChAV_LoadShM)
    Load = _swig_new_instance_method(_snap.TChAV_Load)
    Save = _swig_new_instance_method(_snap.TChAV_Save)
    __add__ = _swig_new_instance_method(_snap.TChAV___add__)
    __eq__ = _swig_new_instance_method(_snap.TChAV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TChAV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TChAV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TChAV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TChAV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TChAV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TChAV_Gen)
    GenExt = _swig_new_instance_method(_snap.TChAV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TChAV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TChAV_Reserve)
    Clr = _swig_new_instance_method(_snap.TChAV_Clr)
    Trunc = _swig_new_instance_method(_snap.TChAV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TChAV_Reduce)
    Pack = _swig_new_instance_method(_snap.TChAV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TChAV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TChAV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TChAV_Empty)
    Len = _swig_new_instance_method(_snap.TChAV_Len)
    Reserved = _swig_new_instance_method(_snap.TChAV_Reserved)
    Last = _swig_new_instance_method(_snap.TChAV_Last)
    LastValN = _swig_new_instance_method(_snap.TChAV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TChAV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TChAV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TChAV_BegI)
    EndI = _swig_new_instance_method(_snap.TChAV_EndI)
    GetI = _swig_new_instance_method(_snap.TChAV_GetI)
    Add = _swig_new_instance_method(_snap.TChAV_Add)
    AddV = _swig_new_instance_method(_snap.TChAV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TChAV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TChAV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TChAV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TChAV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TChAV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TChAV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TChAV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TChAV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TChAV_Ins)
    Del = _swig_new_instance_method(_snap.TChAV_Del)
    DelLast = _swig_new_instance_method(_snap.TChAV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TChAV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TChAV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TChAV_PutAll)
    Swap = _swig_new_instance_method(_snap.TChAV_Swap)
    SwapI = _swig_new_static_method(_snap.TChAV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TChAV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TChAV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TChAV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TChAV_BSort)
    ISort = _swig_new_instance_method(_snap.TChAV_ISort)
    Partition = _swig_new_instance_method(_snap.TChAV_Partition)
    QSort = _swig_new_instance_method(_snap.TChAV_QSort)
    Sort = _swig_new_instance_method(_snap.TChAV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TChAV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TChAV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TChAV_Reverse)
    Merge = _swig_new_instance_method(_snap.TChAV_Merge)
    Intrs = _swig_new_instance_method(_snap.TChAV_Intrs)
    Union = _swig_new_instance_method(_snap.TChAV_Union)
    Diff = _swig_new_instance_method(_snap.TChAV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TChAV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TChAV_UnionLen)
    Count = _swig_new_instance_method(_snap.TChAV_Count)
    SearchBin = _swig_new_instance_method(_snap.TChAV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TChAV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TChAV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TChAV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TChAV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TChAV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TChAV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TChAV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TChAV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TChAV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TChAV_GetV)

# Register TChAV in _snap:
_snap.TChAV_swigregister(TChAV)
TChAV_SwapI = _snap.TChAV_SwapI
TChAV_GetV = _snap.TChAV_GetV

class TIntQuV(object):
    r"""Proxy of C++ TVec< TIntQu > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntQuV

    def __init__(self, *args):
        r"""
        __init__(TIntQuV self) -> TIntQuV
        __init__(TIntQuV self, TIntQuV Vec) -> TIntQuV

        Parameters
        ----------
        Vec: TVec< TQuad< TInt,TInt,TInt,TInt >,int > const &

        __init__(TIntQuV self, int const & _Vals) -> TIntQuV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntQuV self, int const & _MxVals, int const & _Vals) -> TIntQuV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntQuV self, TIntQu _ValT, int const & _Vals) -> TIntQuV

        Parameters
        ----------
        _ValT: TQuad< TInt,TInt,TInt,TInt > *
        _Vals: int const &

        __init__(TIntQuV self, TSIn SIn) -> TIntQuV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntQuV_swiginit(self, _snap.new_TIntQuV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntQuV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntQuV_Load)
    Save = _swig_new_instance_method(_snap.TIntQuV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntQuV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntQuV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntQuV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntQuV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntQuV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntQuV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntQuV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntQuV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntQuV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntQuV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntQuV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntQuV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntQuV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntQuV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntQuV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntQuV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntQuV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntQuV_Empty)
    Len = _swig_new_instance_method(_snap.TIntQuV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntQuV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntQuV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntQuV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntQuV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntQuV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntQuV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntQuV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntQuV_GetI)
    Add = _swig_new_instance_method(_snap.TIntQuV_Add)
    AddV = _swig_new_instance_method(_snap.TIntQuV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntQuV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntQuV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntQuV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntQuV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntQuV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntQuV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntQuV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntQuV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntQuV_Ins)
    Del = _swig_new_instance_method(_snap.TIntQuV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntQuV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntQuV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntQuV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntQuV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntQuV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntQuV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntQuV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntQuV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntQuV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntQuV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntQuV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntQuV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntQuV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntQuV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntQuV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntQuV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntQuV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntQuV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntQuV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntQuV_Union)
    Diff = _swig_new_instance_method(_snap.TIntQuV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntQuV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntQuV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntQuV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntQuV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntQuV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntQuV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntQuV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntQuV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntQuV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntQuV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntQuV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntQuV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntQuV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntQuV_GetV)

# Register TIntQuV in _snap:
_snap.TIntQuV_swigregister(TIntQuV)
TIntQuV_SwapI = _snap.TIntQuV_SwapI
TIntQuV_GetV = _snap.TIntQuV_GetV

class TFltTrV(object):
    r"""Proxy of C++ TVec< TFltTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltTrV

    def __init__(self, *args):
        r"""
        __init__(TFltTrV self) -> TFltTrV
        __init__(TFltTrV self, TFltTrV Vec) -> TFltTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TFlt,TFlt,TFlt >,int > const &

        __init__(TFltTrV self, int const & _Vals) -> TFltTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltTrV self, int const & _MxVals, int const & _Vals) -> TFltTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltTrV self, TFltTr _ValT, int const & _Vals) -> TFltTrV

        Parameters
        ----------
        _ValT: TTriple< TFlt,TFlt,TFlt > *
        _Vals: int const &

        __init__(TFltTrV self, TSIn SIn) -> TFltTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltTrV_swiginit(self, _snap.new_TFltTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltTrV_Load)
    Save = _swig_new_instance_method(_snap.TFltTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltTrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltTrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltTrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltTrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltTrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltTrV_GetV)

# Register TFltTrV in _snap:
_snap.TFltTrV_swigregister(TFltTrV)
TFltTrV_SwapI = _snap.TFltTrV_SwapI
TFltTrV_GetV = _snap.TFltTrV_GetV

class TIntKdV(object):
    r"""Proxy of C++ TVec< TIntKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntKdV

    def __init__(self, *args):
        r"""
        __init__(TIntKdV self) -> TIntKdV
        __init__(TIntKdV self, TIntKdV Vec) -> TIntKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TInt >,int > const &

        __init__(TIntKdV self, int const & _Vals) -> TIntKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntKdV self, int const & _MxVals, int const & _Vals) -> TIntKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntKdV self, TIntKd _ValT, int const & _Vals) -> TIntKdV

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TInt > *
        _Vals: int const &

        __init__(TIntKdV self, TSIn SIn) -> TIntKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntKdV_swiginit(self, _snap.new_TIntKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntKdV_Load)
    Save = _swig_new_instance_method(_snap.TIntKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntKdV_Empty)
    Len = _swig_new_instance_method(_snap.TIntKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntKdV_GetI)
    Add = _swig_new_instance_method(_snap.TIntKdV_Add)
    AddV = _swig_new_instance_method(_snap.TIntKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntKdV_Ins)
    Del = _swig_new_instance_method(_snap.TIntKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntKdV_Union)
    Diff = _swig_new_instance_method(_snap.TIntKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntKdV_GetV)

# Register TIntKdV in _snap:
_snap.TIntKdV_swigregister(TIntKdV)
TIntKdV_SwapI = _snap.TIntKdV_SwapI
TIntKdV_GetV = _snap.TIntKdV_GetV

class TUChIntPrV(object):
    r"""Proxy of C++ TVec< TUChIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUChIntPrV

    def __init__(self, *args):
        r"""
        __init__(TUChIntPrV self) -> TUChIntPrV
        __init__(TUChIntPrV self, TUChIntPrV Vec) -> TUChIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TUCh,TInt >,int > const &

        __init__(TUChIntPrV self, int const & _Vals) -> TUChIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUChIntPrV self, int const & _MxVals, int const & _Vals) -> TUChIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUChIntPrV self, TPair< TUCh,TInt > * _ValT, int const & _Vals) -> TUChIntPrV

        Parameters
        ----------
        _ValT: TPair< TUCh,TInt > *
        _Vals: int const &

        __init__(TUChIntPrV self, TSIn SIn) -> TUChIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUChIntPrV_swiginit(self, _snap.new_TUChIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUChIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUChIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TUChIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TUChIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUChIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUChIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUChIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUChIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUChIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUChIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUChIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUChIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUChIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUChIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUChIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUChIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUChIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUChIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUChIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUChIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUChIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TUChIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TUChIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TUChIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TUChIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUChIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUChIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUChIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TUChIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TUChIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TUChIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TUChIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUChIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUChIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUChIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUChIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUChIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUChIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUChIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUChIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUChIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TUChIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TUChIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUChIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUChIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUChIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUChIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TUChIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUChIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUChIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUChIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUChIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TUChIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TUChIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TUChIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TUChIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUChIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUChIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUChIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUChIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUChIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TUChIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TUChIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUChIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUChIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUChIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUChIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUChIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUChIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUChIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUChIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUChIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUChIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUChIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUChIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUChIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUChIntPrV_GetV)

# Register TUChIntPrV in _snap:
_snap.TUChIntPrV_swigregister(TUChIntPrV)
TUChIntPrV_SwapI = _snap.TUChIntPrV_SwapI
TUChIntPrV_GetV = _snap.TUChIntPrV_GetV

class TUChUInt64PrV(object):
    r"""Proxy of C++ TVec< TUChUInt64Pr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUChUInt64PrV

    def __init__(self, *args):
        r"""
        __init__(TUChUInt64PrV self) -> TUChUInt64PrV
        __init__(TUChUInt64PrV self, TUChUInt64PrV Vec) -> TUChUInt64PrV

        Parameters
        ----------
        Vec: TVec< TPair< TUCh,TUInt64 >,int > const &

        __init__(TUChUInt64PrV self, int const & _Vals) -> TUChUInt64PrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUChUInt64PrV self, int const & _MxVals, int const & _Vals) -> TUChUInt64PrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUChUInt64PrV self, TPair< TUCh,TUInt64 > * _ValT, int const & _Vals) -> TUChUInt64PrV

        Parameters
        ----------
        _ValT: TPair< TUCh,TUInt64 > *
        _Vals: int const &

        __init__(TUChUInt64PrV self, TSIn SIn) -> TUChUInt64PrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUChUInt64PrV_swiginit(self, _snap.new_TUChUInt64PrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUChUInt64PrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUChUInt64PrV_Load)
    Save = _swig_new_instance_method(_snap.TUChUInt64PrV_Save)
    __add__ = _swig_new_instance_method(_snap.TUChUInt64PrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUChUInt64PrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUChUInt64PrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUChUInt64PrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUChUInt64PrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUChUInt64PrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUChUInt64PrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUChUInt64PrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUChUInt64PrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUChUInt64PrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUChUInt64PrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUChUInt64PrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUChUInt64PrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUChUInt64PrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUChUInt64PrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUChUInt64PrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUChUInt64PrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUChUInt64PrV_Empty)
    Len = _swig_new_instance_method(_snap.TUChUInt64PrV_Len)
    Reserved = _swig_new_instance_method(_snap.TUChUInt64PrV_Reserved)
    Last = _swig_new_instance_method(_snap.TUChUInt64PrV_Last)
    LastValN = _swig_new_instance_method(_snap.TUChUInt64PrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUChUInt64PrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUChUInt64PrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUChUInt64PrV_BegI)
    EndI = _swig_new_instance_method(_snap.TUChUInt64PrV_EndI)
    GetI = _swig_new_instance_method(_snap.TUChUInt64PrV_GetI)
    Add = _swig_new_instance_method(_snap.TUChUInt64PrV_Add)
    AddV = _swig_new_instance_method(_snap.TUChUInt64PrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUChUInt64PrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUChUInt64PrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUChUInt64PrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUChUInt64PrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUChUInt64PrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUChUInt64PrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUChUInt64PrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUChUInt64PrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUChUInt64PrV_Ins)
    Del = _swig_new_instance_method(_snap.TUChUInt64PrV_Del)
    DelLast = _swig_new_instance_method(_snap.TUChUInt64PrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUChUInt64PrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUChUInt64PrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUChUInt64PrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUChUInt64PrV_Swap)
    SwapI = _swig_new_static_method(_snap.TUChUInt64PrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUChUInt64PrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUChUInt64PrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUChUInt64PrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUChUInt64PrV_BSort)
    ISort = _swig_new_instance_method(_snap.TUChUInt64PrV_ISort)
    Partition = _swig_new_instance_method(_snap.TUChUInt64PrV_Partition)
    QSort = _swig_new_instance_method(_snap.TUChUInt64PrV_QSort)
    Sort = _swig_new_instance_method(_snap.TUChUInt64PrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUChUInt64PrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUChUInt64PrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUChUInt64PrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUChUInt64PrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUChUInt64PrV_Intrs)
    Union = _swig_new_instance_method(_snap.TUChUInt64PrV_Union)
    Diff = _swig_new_instance_method(_snap.TUChUInt64PrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUChUInt64PrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUChUInt64PrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUChUInt64PrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUChUInt64PrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUChUInt64PrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUChUInt64PrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUChUInt64PrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUChUInt64PrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUChUInt64PrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUChUInt64PrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUChUInt64PrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUChUInt64PrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUChUInt64PrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUChUInt64PrV_GetV)

# Register TUChUInt64PrV in _snap:
_snap.TUChUInt64PrV_swigregister(TUChUInt64PrV)
TUChUInt64PrV_SwapI = _snap.TUChUInt64PrV_SwapI
TUChUInt64PrV_GetV = _snap.TUChUInt64PrV_GetV

class TIntUInt64PrV(object):
    r"""Proxy of C++ TVec< TIntUInt64Pr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntUInt64PrV

    def __init__(self, *args):
        r"""
        __init__(TIntUInt64PrV self) -> TIntUInt64PrV
        __init__(TIntUInt64PrV self, TIntUInt64PrV Vec) -> TIntUInt64PrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TUInt64 >,int > const &

        __init__(TIntUInt64PrV self, int const & _Vals) -> TIntUInt64PrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntUInt64PrV self, int const & _MxVals, int const & _Vals) -> TIntUInt64PrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntUInt64PrV self, TIntUInt64Pr _ValT, int const & _Vals) -> TIntUInt64PrV

        Parameters
        ----------
        _ValT: TPair< TInt,TUInt64 > *
        _Vals: int const &

        __init__(TIntUInt64PrV self, TSIn SIn) -> TIntUInt64PrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntUInt64PrV_swiginit(self, _snap.new_TIntUInt64PrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntUInt64PrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntUInt64PrV_Load)
    Save = _swig_new_instance_method(_snap.TIntUInt64PrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntUInt64PrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntUInt64PrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntUInt64PrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntUInt64PrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntUInt64PrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntUInt64PrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntUInt64PrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntUInt64PrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntUInt64PrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntUInt64PrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntUInt64PrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntUInt64PrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntUInt64PrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntUInt64PrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntUInt64PrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntUInt64PrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntUInt64PrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntUInt64PrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntUInt64PrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntUInt64PrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntUInt64PrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntUInt64PrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntUInt64PrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntUInt64PrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntUInt64PrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntUInt64PrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntUInt64PrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntUInt64PrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntUInt64PrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntUInt64PrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntUInt64PrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntUInt64PrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntUInt64PrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntUInt64PrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntUInt64PrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntUInt64PrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntUInt64PrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntUInt64PrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntUInt64PrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntUInt64PrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntUInt64PrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntUInt64PrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntUInt64PrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntUInt64PrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntUInt64PrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntUInt64PrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntUInt64PrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntUInt64PrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntUInt64PrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntUInt64PrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntUInt64PrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntUInt64PrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntUInt64PrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntUInt64PrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntUInt64PrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntUInt64PrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntUInt64PrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntUInt64PrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntUInt64PrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntUInt64PrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntUInt64PrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntUInt64PrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntUInt64PrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntUInt64PrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntUInt64PrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntUInt64PrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntUInt64PrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntUInt64PrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntUInt64PrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntUInt64PrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntUInt64PrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntUInt64PrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntUInt64PrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntUInt64PrV_GetV)

# Register TIntUInt64PrV in _snap:
_snap.TIntUInt64PrV_swigregister(TIntUInt64PrV)
TIntUInt64PrV_SwapI = _snap.TIntUInt64PrV_SwapI
TIntUInt64PrV_GetV = _snap.TIntUInt64PrV_GetV

class TIntUInt64KdV(object):
    r"""Proxy of C++ TVec< TIntUInt64Kd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntUInt64KdV

    def __init__(self, *args):
        r"""
        __init__(TIntUInt64KdV self) -> TIntUInt64KdV
        __init__(TIntUInt64KdV self, TIntUInt64KdV Vec) -> TIntUInt64KdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TUInt64 >,int > const &

        __init__(TIntUInt64KdV self, int const & _Vals) -> TIntUInt64KdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntUInt64KdV self, int const & _MxVals, int const & _Vals) -> TIntUInt64KdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntUInt64KdV self, TIntUInt64Kd _ValT, int const & _Vals) -> TIntUInt64KdV

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TUInt64 > *
        _Vals: int const &

        __init__(TIntUInt64KdV self, TSIn SIn) -> TIntUInt64KdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntUInt64KdV_swiginit(self, _snap.new_TIntUInt64KdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntUInt64KdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntUInt64KdV_Load)
    Save = _swig_new_instance_method(_snap.TIntUInt64KdV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntUInt64KdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntUInt64KdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntUInt64KdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntUInt64KdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntUInt64KdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntUInt64KdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntUInt64KdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntUInt64KdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntUInt64KdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntUInt64KdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntUInt64KdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntUInt64KdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntUInt64KdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntUInt64KdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntUInt64KdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntUInt64KdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntUInt64KdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntUInt64KdV_Empty)
    Len = _swig_new_instance_method(_snap.TIntUInt64KdV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntUInt64KdV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntUInt64KdV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntUInt64KdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntUInt64KdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntUInt64KdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntUInt64KdV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntUInt64KdV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntUInt64KdV_GetI)
    Add = _swig_new_instance_method(_snap.TIntUInt64KdV_Add)
    AddV = _swig_new_instance_method(_snap.TIntUInt64KdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntUInt64KdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntUInt64KdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntUInt64KdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntUInt64KdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntUInt64KdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntUInt64KdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntUInt64KdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntUInt64KdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntUInt64KdV_Ins)
    Del = _swig_new_instance_method(_snap.TIntUInt64KdV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntUInt64KdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntUInt64KdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntUInt64KdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntUInt64KdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntUInt64KdV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntUInt64KdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntUInt64KdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntUInt64KdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntUInt64KdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntUInt64KdV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntUInt64KdV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntUInt64KdV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntUInt64KdV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntUInt64KdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntUInt64KdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntUInt64KdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntUInt64KdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntUInt64KdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntUInt64KdV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntUInt64KdV_Union)
    Diff = _swig_new_instance_method(_snap.TIntUInt64KdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntUInt64KdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntUInt64KdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntUInt64KdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntUInt64KdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntUInt64KdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntUInt64KdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntUInt64KdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntUInt64KdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntUInt64KdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntUInt64KdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntUInt64KdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntUInt64KdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntUInt64KdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntUInt64KdV_GetV)

# Register TIntUInt64KdV in _snap:
_snap.TIntUInt64KdV_swigregister(TIntUInt64KdV)
TIntUInt64KdV_SwapI = _snap.TIntUInt64KdV_SwapI
TIntUInt64KdV_GetV = _snap.TIntUInt64KdV_GetV

class TIntFltPrV(object):
    r"""Proxy of C++ TVec< TIntFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntFltPrV

    def __init__(self, *args):
        r"""
        __init__(TIntFltPrV self) -> TIntFltPrV
        __init__(TIntFltPrV self, TIntFltPrV Vec) -> TIntFltPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TFlt >,int > const &

        __init__(TIntFltPrV self, int const & _Vals) -> TIntFltPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntFltPrV self, int const & _MxVals, int const & _Vals) -> TIntFltPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntFltPrV self, TIntFltPr _ValT, int const & _Vals) -> TIntFltPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TFlt > *
        _Vals: int const &

        __init__(TIntFltPrV self, TSIn SIn) -> TIntFltPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltPrV_swiginit(self, _snap.new_TIntFltPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltPrV_Load)
    Save = _swig_new_instance_method(_snap.TIntFltPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntFltPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntFltPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntFltPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntFltPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntFltPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntFltPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntFltPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntFltPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntFltPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntFltPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntFltPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntFltPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntFltPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntFltPrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntFltPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntFltPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntFltPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntFltPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntFltPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntFltPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltPrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntFltPrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntFltPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntFltPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntFltPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntFltPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntFltPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntFltPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntFltPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntFltPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntFltPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntFltPrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntFltPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntFltPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntFltPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntFltPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntFltPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntFltPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntFltPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntFltPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntFltPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntFltPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntFltPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntFltPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntFltPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntFltPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntFltPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntFltPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntFltPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntFltPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntFltPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntFltPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntFltPrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntFltPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntFltPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntFltPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntFltPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntFltPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntFltPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntFltPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntFltPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntFltPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntFltPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntFltPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntFltPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntFltPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntFltPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntFltPrV_GetV)

# Register TIntFltPrV in _snap:
_snap.TIntFltPrV_swigregister(TIntFltPrV)
TIntFltPrV_SwapI = _snap.TIntFltPrV_SwapI
TIntFltPrV_GetV = _snap.TIntFltPrV_GetV

class TIntFltPrKdV(object):
    r"""Proxy of C++ TVec< TIntFltPrKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntFltPrKdV

    def __init__(self, *args):
        r"""
        __init__(TIntFltPrKdV self) -> TIntFltPrKdV
        __init__(TIntFltPrKdV self, TVec< TKeyDat< TInt,TPair< TFlt,TFlt > >,int > const & Vec) -> TIntFltPrKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TPair< TFlt,TFlt > >,int > const &

        __init__(TIntFltPrKdV self, int const & _Vals) -> TIntFltPrKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntFltPrKdV self, int const & _MxVals, int const & _Vals) -> TIntFltPrKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntFltPrKdV self, TIntFltPrKd _ValT, int const & _Vals) -> TIntFltPrKdV

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TPair< TFlt,TFlt > > *
        _Vals: int const &

        __init__(TIntFltPrKdV self, TSIn SIn) -> TIntFltPrKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltPrKdV_swiginit(self, _snap.new_TIntFltPrKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltPrKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltPrKdV_Load)
    Save = _swig_new_instance_method(_snap.TIntFltPrKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntFltPrKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntFltPrKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltPrKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltPrKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntFltPrKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltPrKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltPrKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntFltPrKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntFltPrKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntFltPrKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntFltPrKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntFltPrKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntFltPrKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntFltPrKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntFltPrKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntFltPrKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntFltPrKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntFltPrKdV_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltPrKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntFltPrKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntFltPrKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntFltPrKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntFltPrKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntFltPrKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntFltPrKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltPrKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltPrKdV_GetI)
    Add = _swig_new_instance_method(_snap.TIntFltPrKdV_Add)
    AddV = _swig_new_instance_method(_snap.TIntFltPrKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntFltPrKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntFltPrKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntFltPrKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntFltPrKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntFltPrKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntFltPrKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntFltPrKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntFltPrKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntFltPrKdV_Ins)
    Del = _swig_new_instance_method(_snap.TIntFltPrKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntFltPrKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntFltPrKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntFltPrKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntFltPrKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntFltPrKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntFltPrKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntFltPrKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntFltPrKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntFltPrKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntFltPrKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntFltPrKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntFltPrKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntFltPrKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntFltPrKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntFltPrKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntFltPrKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntFltPrKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntFltPrKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntFltPrKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntFltPrKdV_Union)
    Diff = _swig_new_instance_method(_snap.TIntFltPrKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntFltPrKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntFltPrKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntFltPrKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntFltPrKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntFltPrKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntFltPrKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntFltPrKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntFltPrKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntFltPrKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntFltPrKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntFltPrKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntFltPrKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntFltPrKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntFltPrKdV_GetV)

# Register TIntFltPrKdV in _snap:
_snap.TIntFltPrKdV_swigregister(TIntFltPrKdV)
TIntFltPrKdV_SwapI = _snap.TIntFltPrKdV_SwapI
TIntFltPrKdV_GetV = _snap.TIntFltPrKdV_GetV

class TFltIntPrV(object):
    r"""Proxy of C++ TVec< TFltIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltIntPrV

    def __init__(self, *args):
        r"""
        __init__(TFltIntPrV self) -> TFltIntPrV
        __init__(TFltIntPrV self, TFltIntPrV Vec) -> TFltIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TInt >,int > const &

        __init__(TFltIntPrV self, int const & _Vals) -> TFltIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltIntPrV self, int const & _MxVals, int const & _Vals) -> TFltIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltIntPrV self, TFltIntPr _ValT, int const & _Vals) -> TFltIntPrV

        Parameters
        ----------
        _ValT: TPair< TFlt,TInt > *
        _Vals: int const &

        __init__(TFltIntPrV self, TSIn SIn) -> TFltIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntPrV_swiginit(self, _snap.new_TFltIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TFltIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltIntPrV_GetV)

# Register TFltIntPrV in _snap:
_snap.TFltIntPrV_swigregister(TFltIntPrV)
TFltIntPrV_SwapI = _snap.TFltIntPrV_SwapI
TFltIntPrV_GetV = _snap.TFltIntPrV_GetV

class TFltUInt64PrV(object):
    r"""Proxy of C++ TVec< TFltUInt64Pr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltUInt64PrV

    def __init__(self, *args):
        r"""
        __init__(TFltUInt64PrV self) -> TFltUInt64PrV
        __init__(TFltUInt64PrV self, TFltUInt64PrV Vec) -> TFltUInt64PrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TUInt64 >,int > const &

        __init__(TFltUInt64PrV self, int const & _Vals) -> TFltUInt64PrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltUInt64PrV self, int const & _MxVals, int const & _Vals) -> TFltUInt64PrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltUInt64PrV self, TFltUInt64Pr _ValT, int const & _Vals) -> TFltUInt64PrV

        Parameters
        ----------
        _ValT: TPair< TFlt,TUInt64 > *
        _Vals: int const &

        __init__(TFltUInt64PrV self, TSIn SIn) -> TFltUInt64PrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltUInt64PrV_swiginit(self, _snap.new_TFltUInt64PrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltUInt64PrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltUInt64PrV_Load)
    Save = _swig_new_instance_method(_snap.TFltUInt64PrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltUInt64PrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltUInt64PrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltUInt64PrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltUInt64PrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltUInt64PrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltUInt64PrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltUInt64PrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltUInt64PrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltUInt64PrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltUInt64PrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltUInt64PrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltUInt64PrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltUInt64PrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltUInt64PrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltUInt64PrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltUInt64PrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltUInt64PrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltUInt64PrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltUInt64PrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltUInt64PrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltUInt64PrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltUInt64PrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltUInt64PrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltUInt64PrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltUInt64PrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltUInt64PrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltUInt64PrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltUInt64PrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltUInt64PrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltUInt64PrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltUInt64PrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltUInt64PrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltUInt64PrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltUInt64PrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltUInt64PrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltUInt64PrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltUInt64PrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltUInt64PrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltUInt64PrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltUInt64PrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltUInt64PrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltUInt64PrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltUInt64PrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltUInt64PrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltUInt64PrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltUInt64PrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltUInt64PrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltUInt64PrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltUInt64PrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltUInt64PrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltUInt64PrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltUInt64PrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltUInt64PrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltUInt64PrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltUInt64PrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltUInt64PrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltUInt64PrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltUInt64PrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltUInt64PrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltUInt64PrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltUInt64PrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltUInt64PrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltUInt64PrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltUInt64PrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltUInt64PrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltUInt64PrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltUInt64PrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltUInt64PrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltUInt64PrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltUInt64PrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltUInt64PrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltUInt64PrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltUInt64PrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltUInt64PrV_GetV)

# Register TFltUInt64PrV in _snap:
_snap.TFltUInt64PrV_swigregister(TFltUInt64PrV)
TFltUInt64PrV_SwapI = _snap.TFltUInt64PrV_SwapI
TFltUInt64PrV_GetV = _snap.TFltUInt64PrV_GetV

class TFltStrPrV(object):
    r"""Proxy of C++ TVec< TFltStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltStrPrV

    def __init__(self, *args):
        r"""
        __init__(TFltStrPrV self) -> TFltStrPrV
        __init__(TFltStrPrV self, TFltStrPrV Vec) -> TFltStrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TStr >,int > const &

        __init__(TFltStrPrV self, int const & _Vals) -> TFltStrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltStrPrV self, int const & _MxVals, int const & _Vals) -> TFltStrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltStrPrV self, TFltStrPr _ValT, int const & _Vals) -> TFltStrPrV

        Parameters
        ----------
        _ValT: TPair< TFlt,TStr > *
        _Vals: int const &

        __init__(TFltStrPrV self, TSIn SIn) -> TFltStrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltStrPrV_swiginit(self, _snap.new_TFltStrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltStrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltStrPrV_Load)
    Save = _swig_new_instance_method(_snap.TFltStrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltStrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltStrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltStrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltStrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltStrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltStrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltStrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltStrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltStrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltStrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltStrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltStrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltStrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltStrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltStrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltStrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltStrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltStrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltStrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltStrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltStrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltStrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltStrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltStrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltStrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltStrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltStrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltStrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltStrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltStrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltStrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltStrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltStrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltStrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltStrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltStrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltStrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltStrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltStrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltStrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltStrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltStrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltStrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltStrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltStrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltStrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltStrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltStrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltStrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltStrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltStrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltStrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltStrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltStrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltStrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltStrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltStrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltStrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltStrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltStrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltStrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltStrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltStrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltStrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltStrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltStrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltStrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltStrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltStrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltStrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltStrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltStrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltStrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltStrPrV_GetV)

# Register TFltStrPrV in _snap:
_snap.TFltStrPrV_swigregister(TFltStrPrV)
TFltStrPrV_SwapI = _snap.TFltStrPrV_SwapI
TFltStrPrV_GetV = _snap.TFltStrPrV_GetV

class TAscFltStrPrV(object):
    r"""Proxy of C++ TVec< TAscFltStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TAscFltStrPrV

    def __init__(self, *args):
        r"""
        __init__(TAscFltStrPrV self) -> TAscFltStrPrV
        __init__(TAscFltStrPrV self, TAscFltStrPrV Vec) -> TAscFltStrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TAscFlt,TStr >,int > const &

        __init__(TAscFltStrPrV self, int const & _Vals) -> TAscFltStrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TAscFltStrPrV self, int const & _MxVals, int const & _Vals) -> TAscFltStrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TAscFltStrPrV self, TAscFltStrPr _ValT, int const & _Vals) -> TAscFltStrPrV

        Parameters
        ----------
        _ValT: TPair< TAscFlt,TStr > *
        _Vals: int const &

        __init__(TAscFltStrPrV self, TSIn SIn) -> TAscFltStrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltStrPrV_swiginit(self, _snap.new_TAscFltStrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TAscFltStrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TAscFltStrPrV_Load)
    Save = _swig_new_instance_method(_snap.TAscFltStrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TAscFltStrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TAscFltStrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltStrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TAscFltStrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TAscFltStrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltStrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltStrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TAscFltStrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TAscFltStrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TAscFltStrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TAscFltStrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TAscFltStrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TAscFltStrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TAscFltStrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TAscFltStrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TAscFltStrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TAscFltStrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TAscFltStrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TAscFltStrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TAscFltStrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TAscFltStrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TAscFltStrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TAscFltStrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TAscFltStrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TAscFltStrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TAscFltStrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TAscFltStrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TAscFltStrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TAscFltStrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TAscFltStrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TAscFltStrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TAscFltStrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TAscFltStrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TAscFltStrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TAscFltStrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TAscFltStrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TAscFltStrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TAscFltStrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TAscFltStrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TAscFltStrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TAscFltStrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TAscFltStrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TAscFltStrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TAscFltStrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TAscFltStrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TAscFltStrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TAscFltStrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TAscFltStrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TAscFltStrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TAscFltStrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TAscFltStrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TAscFltStrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TAscFltStrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TAscFltStrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TAscFltStrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TAscFltStrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TAscFltStrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TAscFltStrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TAscFltStrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TAscFltStrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TAscFltStrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TAscFltStrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TAscFltStrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TAscFltStrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TAscFltStrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TAscFltStrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TAscFltStrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TAscFltStrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TAscFltStrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TAscFltStrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TAscFltStrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TAscFltStrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TAscFltStrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TAscFltStrPrV_GetV)

# Register TAscFltStrPrV in _snap:
_snap.TAscFltStrPrV_swigregister(TAscFltStrPrV)
TAscFltStrPrV_SwapI = _snap.TAscFltStrPrV_SwapI
TAscFltStrPrV_GetV = _snap.TAscFltStrPrV_GetV

class TIntStrPrV(object):
    r"""Proxy of C++ TVec< TIntStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntStrPrV

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrV self) -> TIntStrPrV
        __init__(TIntStrPrV self, TIntStrPrV Vec) -> TIntStrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TStr >,int > const &

        __init__(TIntStrPrV self, int const & _Vals) -> TIntStrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntStrPrV self, int const & _MxVals, int const & _Vals) -> TIntStrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntStrPrV self, TIntStrPr _ValT, int const & _Vals) -> TIntStrPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TStr > *
        _Vals: int const &

        __init__(TIntStrPrV self, TSIn SIn) -> TIntStrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPrV_swiginit(self, _snap.new_TIntStrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrPrV_Load)
    Save = _swig_new_instance_method(_snap.TIntStrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntStrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntStrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntStrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntStrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntStrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntStrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntStrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntStrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntStrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntStrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntStrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntStrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntStrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntStrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntStrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntStrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntStrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntStrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntStrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntStrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntStrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntStrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntStrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntStrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntStrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntStrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntStrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntStrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntStrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntStrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntStrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntStrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntStrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntStrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntStrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntStrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntStrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntStrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntStrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntStrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntStrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntStrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntStrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntStrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntStrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntStrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntStrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntStrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntStrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntStrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntStrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntStrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntStrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntStrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntStrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntStrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntStrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntStrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntStrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntStrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntStrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntStrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntStrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntStrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntStrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntStrPrV_GetV)

# Register TIntStrPrV in _snap:
_snap.TIntStrPrV_swigregister(TIntStrPrV)
TIntStrPrV_SwapI = _snap.TIntStrPrV_SwapI
TIntStrPrV_GetV = _snap.TIntStrPrV_GetV

class TIntIntStrTrV(object):
    r"""Proxy of C++ TVec< TIntIntStrTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntStrTrV

    def __init__(self, *args):
        r"""
        __init__(TIntIntStrTrV self) -> TIntIntStrTrV
        __init__(TIntIntStrTrV self, TIntIntStrTrV Vec) -> TIntIntStrTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TStr >,int > const &

        __init__(TIntIntStrTrV self, int const & _Vals) -> TIntIntStrTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntIntStrTrV self, int const & _MxVals, int const & _Vals) -> TIntIntStrTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntIntStrTrV self, TIntIntStrTr _ValT, int const & _Vals) -> TIntIntStrTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TInt,TStr > *
        _Vals: int const &

        __init__(TIntIntStrTrV self, TSIn SIn) -> TIntIntStrTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntStrTrV_swiginit(self, _snap.new_TIntIntStrTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntStrTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntStrTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntIntStrTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntIntStrTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntIntStrTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntStrTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntStrTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntIntStrTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntStrTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntStrTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntIntStrTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntIntStrTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntIntStrTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntIntStrTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntIntStrTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntIntStrTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntIntStrTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntIntStrTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntIntStrTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntIntStrTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntIntStrTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntStrTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntIntStrTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntIntStrTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntIntStrTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntIntStrTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntIntStrTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntIntStrTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntStrTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntStrTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntIntStrTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntIntStrTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntIntStrTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntIntStrTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntIntStrTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntIntStrTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntIntStrTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntIntStrTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntIntStrTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntIntStrTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntIntStrTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntIntStrTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntIntStrTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntIntStrTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntIntStrTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntIntStrTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntIntStrTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntIntStrTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntIntStrTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntIntStrTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntIntStrTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntIntStrTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntIntStrTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntIntStrTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntIntStrTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntIntStrTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntIntStrTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntIntStrTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntIntStrTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntIntStrTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntIntStrTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntIntStrTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntIntStrTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntIntStrTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntIntStrTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntIntStrTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntIntStrTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntIntStrTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntIntStrTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntIntStrTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntIntStrTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntIntStrTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntIntStrTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntIntStrTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntIntStrTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntIntStrTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntIntStrTrV_GetV)

# Register TIntIntStrTrV in _snap:
_snap.TIntIntStrTrV_swigregister(TIntIntStrTrV)
TIntIntStrTrV_SwapI = _snap.TIntIntStrTrV_SwapI
TIntIntStrTrV_GetV = _snap.TIntIntStrTrV_GetV

class TIntIntFltTrV(object):
    r"""Proxy of C++ TVec< TIntIntFltTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntFltTrV

    def __init__(self, *args):
        r"""
        __init__(TIntIntFltTrV self) -> TIntIntFltTrV
        __init__(TIntIntFltTrV self, TIntIntFltTrV Vec) -> TIntIntFltTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TFlt >,int > const &

        __init__(TIntIntFltTrV self, int const & _Vals) -> TIntIntFltTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntIntFltTrV self, int const & _MxVals, int const & _Vals) -> TIntIntFltTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntIntFltTrV self, TIntIntFltTr _ValT, int const & _Vals) -> TIntIntFltTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TInt,TFlt > *
        _Vals: int const &

        __init__(TIntIntFltTrV self, TSIn SIn) -> TIntIntFltTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntFltTrV_swiginit(self, _snap.new_TIntIntFltTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntFltTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntFltTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntIntFltTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntIntFltTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntIntFltTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntFltTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntFltTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntIntFltTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntFltTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntFltTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntIntFltTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntIntFltTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntIntFltTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntIntFltTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntIntFltTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntIntFltTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntIntFltTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntIntFltTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntIntFltTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntIntFltTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntIntFltTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntFltTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntIntFltTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntIntFltTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntIntFltTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntIntFltTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntIntFltTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntIntFltTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntFltTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntFltTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntIntFltTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntIntFltTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntIntFltTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntIntFltTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntIntFltTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntIntFltTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntIntFltTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntIntFltTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntIntFltTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntIntFltTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntIntFltTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntIntFltTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntIntFltTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntIntFltTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntIntFltTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntIntFltTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntIntFltTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntIntFltTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntIntFltTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntIntFltTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntIntFltTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntIntFltTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntIntFltTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntIntFltTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntIntFltTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntIntFltTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntIntFltTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntIntFltTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntIntFltTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntIntFltTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntIntFltTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntIntFltTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntIntFltTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntIntFltTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntIntFltTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntIntFltTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntIntFltTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntIntFltTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntIntFltTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntIntFltTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntIntFltTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntIntFltTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntIntFltTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntIntFltTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntIntFltTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntIntFltTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntIntFltTrV_GetV)

# Register TIntIntFltTrV in _snap:
_snap.TIntIntFltTrV_swigregister(TIntIntFltTrV)
TIntIntFltTrV_SwapI = _snap.TIntIntFltTrV_SwapI
TIntIntFltTrV_GetV = _snap.TIntIntFltTrV_GetV

class TIntFltIntTrV(object):
    r"""Proxy of C++ TVec< TIntFltIntTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntFltIntTrV

    def __init__(self, *args):
        r"""
        __init__(TIntFltIntTrV self) -> TIntFltIntTrV
        __init__(TIntFltIntTrV self, TIntFltIntTrV Vec) -> TIntFltIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TFlt,TInt >,int > const &

        __init__(TIntFltIntTrV self, int const & _Vals) -> TIntFltIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntFltIntTrV self, int const & _MxVals, int const & _Vals) -> TIntFltIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntFltIntTrV self, TIntFltIntTr _ValT, int const & _Vals) -> TIntFltIntTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TFlt,TInt > *
        _Vals: int const &

        __init__(TIntFltIntTrV self, TSIn SIn) -> TIntFltIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltIntTrV_swiginit(self, _snap.new_TIntFltIntTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltIntTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltIntTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntFltIntTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntFltIntTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntFltIntTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltIntTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltIntTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntFltIntTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltIntTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltIntTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntFltIntTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntFltIntTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntFltIntTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntFltIntTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntFltIntTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntFltIntTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntFltIntTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntFltIntTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntFltIntTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntFltIntTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntFltIntTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltIntTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntFltIntTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntFltIntTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntFltIntTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntFltIntTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntFltIntTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntFltIntTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltIntTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltIntTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntFltIntTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntFltIntTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntFltIntTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntFltIntTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntFltIntTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntFltIntTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntFltIntTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntFltIntTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntFltIntTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntFltIntTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntFltIntTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntFltIntTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntFltIntTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntFltIntTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntFltIntTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntFltIntTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntFltIntTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntFltIntTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntFltIntTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntFltIntTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntFltIntTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntFltIntTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntFltIntTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntFltIntTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntFltIntTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntFltIntTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntFltIntTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntFltIntTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntFltIntTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntFltIntTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntFltIntTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntFltIntTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntFltIntTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntFltIntTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntFltIntTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntFltIntTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntFltIntTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntFltIntTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntFltIntTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntFltIntTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntFltIntTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntFltIntTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntFltIntTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntFltIntTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntFltIntTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntFltIntTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntFltIntTrV_GetV)

# Register TIntFltIntTrV in _snap:
_snap.TIntFltIntTrV_swigregister(TIntFltIntTrV)
TIntFltIntTrV_SwapI = _snap.TIntFltIntTrV_SwapI
TIntFltIntTrV_GetV = _snap.TIntFltIntTrV_GetV

class TIntStrIntTrV(object):
    r"""Proxy of C++ TVec< TIntStrIntTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntStrIntTrV

    def __init__(self, *args):
        r"""
        __init__(TIntStrIntTrV self) -> TIntStrIntTrV
        __init__(TIntStrIntTrV self, TIntStrIntTrV Vec) -> TIntStrIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TStr,TInt >,int > const &

        __init__(TIntStrIntTrV self, int const & _Vals) -> TIntStrIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntStrIntTrV self, int const & _MxVals, int const & _Vals) -> TIntStrIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntStrIntTrV self, TIntStrIntTr _ValT, int const & _Vals) -> TIntStrIntTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TStr,TInt > *
        _Vals: int const &

        __init__(TIntStrIntTrV self, TSIn SIn) -> TIntStrIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrIntTrV_swiginit(self, _snap.new_TIntStrIntTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrIntTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrIntTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntStrIntTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntStrIntTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntStrIntTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrIntTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrIntTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntStrIntTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrIntTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrIntTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntStrIntTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntStrIntTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntStrIntTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntStrIntTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntStrIntTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntStrIntTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntStrIntTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntStrIntTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntStrIntTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntStrIntTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntStrIntTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrIntTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntStrIntTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntStrIntTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntStrIntTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntStrIntTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntStrIntTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntStrIntTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrIntTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrIntTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntStrIntTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntStrIntTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntStrIntTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntStrIntTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntStrIntTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntStrIntTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntStrIntTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntStrIntTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntStrIntTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrIntTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntStrIntTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntStrIntTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntStrIntTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntStrIntTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntStrIntTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntStrIntTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntStrIntTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntStrIntTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntStrIntTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntStrIntTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntStrIntTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntStrIntTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntStrIntTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntStrIntTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntStrIntTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntStrIntTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntStrIntTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntStrIntTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntStrIntTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntStrIntTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntStrIntTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntStrIntTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntStrIntTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntStrIntTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntStrIntTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntStrIntTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntStrIntTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntStrIntTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntStrIntTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntStrIntTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntStrIntTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntStrIntTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntStrIntTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntStrIntTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntStrIntTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntStrIntTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntStrIntTrV_GetV)

# Register TIntStrIntTrV in _snap:
_snap.TIntStrIntTrV_swigregister(TIntStrIntTrV)
TIntStrIntTrV_SwapI = _snap.TIntStrIntTrV_SwapI
TIntStrIntTrV_GetV = _snap.TIntStrIntTrV_GetV

class TIntStrStrTrV(object):
    r"""Proxy of C++ TVec< TIntStrStrTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntStrStrTrV

    def __init__(self, *args):
        r"""
        __init__(TIntStrStrTrV self) -> TIntStrStrTrV
        __init__(TIntStrStrTrV self, TIntStrStrTrV Vec) -> TIntStrStrTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TStr,TStr >,int > const &

        __init__(TIntStrStrTrV self, int const & _Vals) -> TIntStrStrTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntStrStrTrV self, int const & _MxVals, int const & _Vals) -> TIntStrStrTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntStrStrTrV self, TTriple< TInt,TStr,TStr > * _ValT, int const & _Vals) -> TIntStrStrTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TStr,TStr > *
        _Vals: int const &

        __init__(TIntStrStrTrV self, TSIn SIn) -> TIntStrStrTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrStrTrV_swiginit(self, _snap.new_TIntStrStrTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrStrTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrStrTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntStrStrTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntStrStrTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntStrStrTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrStrTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrStrTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntStrStrTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrStrTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrStrTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntStrStrTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntStrStrTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntStrStrTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntStrStrTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntStrStrTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntStrStrTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntStrStrTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntStrStrTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntStrStrTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntStrStrTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntStrStrTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrStrTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntStrStrTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntStrStrTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntStrStrTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntStrStrTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntStrStrTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntStrStrTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrStrTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrStrTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntStrStrTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntStrStrTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntStrStrTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntStrStrTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntStrStrTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntStrStrTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntStrStrTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntStrStrTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntStrStrTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrStrTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntStrStrTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntStrStrTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntStrStrTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntStrStrTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntStrStrTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntStrStrTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntStrStrTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntStrStrTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntStrStrTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntStrStrTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntStrStrTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntStrStrTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntStrStrTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntStrStrTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntStrStrTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntStrStrTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntStrStrTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntStrStrTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntStrStrTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntStrStrTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntStrStrTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntStrStrTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntStrStrTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntStrStrTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntStrStrTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntStrStrTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntStrStrTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntStrStrTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntStrStrTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntStrStrTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntStrStrTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntStrStrTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntStrStrTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntStrStrTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntStrStrTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntStrStrTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntStrStrTrV_GetV)

# Register TIntStrStrTrV in _snap:
_snap.TIntStrStrTrV_swigregister(TIntStrStrTrV)
TIntStrStrTrV_SwapI = _snap.TIntStrStrTrV_SwapI
TIntStrStrTrV_GetV = _snap.TIntStrStrTrV_GetV

class TUIntIntKdV(object):
    r"""Proxy of C++ TVec< TUIntIntKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUIntIntKdV

    def __init__(self, *args):
        r"""
        __init__(TUIntIntKdV self) -> TUIntIntKdV
        __init__(TUIntIntKdV self, TUIntIntKdV Vec) -> TUIntIntKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TUInt,TInt >,int > const &

        __init__(TUIntIntKdV self, int const & _Vals) -> TUIntIntKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUIntIntKdV self, int const & _MxVals, int const & _Vals) -> TUIntIntKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUIntIntKdV self, TUIntIntKd _ValT, int const & _Vals) -> TUIntIntKdV

        Parameters
        ----------
        _ValT: TKeyDat< TUInt,TInt > *
        _Vals: int const &

        __init__(TUIntIntKdV self, TSIn SIn) -> TUIntIntKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUIntIntKdV_swiginit(self, _snap.new_TUIntIntKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUIntIntKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUIntIntKdV_Load)
    Save = _swig_new_instance_method(_snap.TUIntIntKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TUIntIntKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUIntIntKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntIntKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUIntIntKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUIntIntKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUIntIntKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUIntIntKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUIntIntKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUIntIntKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUIntIntKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUIntIntKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUIntIntKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUIntIntKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUIntIntKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUIntIntKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUIntIntKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUIntIntKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUIntIntKdV_Empty)
    Len = _swig_new_instance_method(_snap.TUIntIntKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TUIntIntKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TUIntIntKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TUIntIntKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUIntIntKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUIntIntKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUIntIntKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TUIntIntKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TUIntIntKdV_GetI)
    Add = _swig_new_instance_method(_snap.TUIntIntKdV_Add)
    AddV = _swig_new_instance_method(_snap.TUIntIntKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUIntIntKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUIntIntKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUIntIntKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUIntIntKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUIntIntKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUIntIntKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUIntIntKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUIntIntKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUIntIntKdV_Ins)
    Del = _swig_new_instance_method(_snap.TUIntIntKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TUIntIntKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUIntIntKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUIntIntKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUIntIntKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUIntIntKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TUIntIntKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUIntIntKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUIntIntKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUIntIntKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUIntIntKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TUIntIntKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TUIntIntKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TUIntIntKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TUIntIntKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUIntIntKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUIntIntKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUIntIntKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUIntIntKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUIntIntKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TUIntIntKdV_Union)
    Diff = _swig_new_instance_method(_snap.TUIntIntKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUIntIntKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUIntIntKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUIntIntKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUIntIntKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUIntIntKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUIntIntKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUIntIntKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUIntIntKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUIntIntKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUIntIntKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUIntIntKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUIntIntKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUIntIntKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUIntIntKdV_GetV)

# Register TUIntIntKdV in _snap:
_snap.TUIntIntKdV_swigregister(TUIntIntKdV)
TUIntIntKdV_SwapI = _snap.TUIntIntKdV_SwapI
TUIntIntKdV_GetV = _snap.TUIntIntKdV_GetV

class TIntPrFltKdV(object):
    r"""Proxy of C++ TVec< TIntPrFltKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntPrFltKdV

    def __init__(self, *args):
        r"""
        __init__(TIntPrFltKdV self) -> TIntPrFltKdV
        __init__(TIntPrFltKdV self, TVec< TKeyDat< TPair< TInt,TInt >,TFlt >,int > const & Vec) -> TIntPrFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TPair< TInt,TInt >,TFlt >,int > const &

        __init__(TIntPrFltKdV self, int const & _Vals) -> TIntPrFltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntPrFltKdV self, int const & _MxVals, int const & _Vals) -> TIntPrFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntPrFltKdV self, TIntPrFltKd _ValT, int const & _Vals) -> TIntPrFltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TPair< TInt,TInt >,TFlt > *
        _Vals: int const &

        __init__(TIntPrFltKdV self, TSIn SIn) -> TIntPrFltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrFltKdV_swiginit(self, _snap.new_TIntPrFltKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrFltKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrFltKdV_Load)
    Save = _swig_new_instance_method(_snap.TIntPrFltKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntPrFltKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntPrFltKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrFltKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrFltKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntPrFltKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntPrFltKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntPrFltKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntPrFltKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntPrFltKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntPrFltKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntPrFltKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntPrFltKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntPrFltKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntPrFltKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntPrFltKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntPrFltKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntPrFltKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntPrFltKdV_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrFltKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntPrFltKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntPrFltKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntPrFltKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntPrFltKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntPrFltKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntPrFltKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrFltKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrFltKdV_GetI)
    Add = _swig_new_instance_method(_snap.TIntPrFltKdV_Add)
    AddV = _swig_new_instance_method(_snap.TIntPrFltKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntPrFltKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntPrFltKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntPrFltKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntPrFltKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntPrFltKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntPrFltKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntPrFltKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntPrFltKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntPrFltKdV_Ins)
    Del = _swig_new_instance_method(_snap.TIntPrFltKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntPrFltKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntPrFltKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntPrFltKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntPrFltKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntPrFltKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntPrFltKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntPrFltKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntPrFltKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntPrFltKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntPrFltKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntPrFltKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntPrFltKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntPrFltKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntPrFltKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntPrFltKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntPrFltKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntPrFltKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntPrFltKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntPrFltKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntPrFltKdV_Union)
    Diff = _swig_new_instance_method(_snap.TIntPrFltKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntPrFltKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntPrFltKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntPrFltKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntPrFltKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntPrFltKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntPrFltKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntPrFltKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntPrFltKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntPrFltKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntPrFltKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntPrFltKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntPrFltKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntPrFltKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntPrFltKdV_GetV)

# Register TIntPrFltKdV in _snap:
_snap.TIntPrFltKdV_swigregister(TIntPrFltKdV)
TIntPrFltKdV_SwapI = _snap.TIntPrFltKdV_SwapI
TIntPrFltKdV_GetV = _snap.TIntPrFltKdV_GetV

class TIntStrKdV(object):
    r"""Proxy of C++ TVec< TIntStrKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntStrKdV

    def __init__(self, *args):
        r"""
        __init__(TIntStrKdV self) -> TIntStrKdV
        __init__(TIntStrKdV self, TIntStrKdV Vec) -> TIntStrKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TStr >,int > const &

        __init__(TIntStrKdV self, int const & _Vals) -> TIntStrKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntStrKdV self, int const & _MxVals, int const & _Vals) -> TIntStrKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntStrKdV self, TIntStrKd _ValT, int const & _Vals) -> TIntStrKdV

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TStr > *
        _Vals: int const &

        __init__(TIntStrKdV self, TSIn SIn) -> TIntStrKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrKdV_swiginit(self, _snap.new_TIntStrKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrKdV_Load)
    Save = _swig_new_instance_method(_snap.TIntStrKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntStrKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntStrKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntStrKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntStrKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntStrKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntStrKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntStrKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntStrKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntStrKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntStrKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntStrKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntStrKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntStrKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntStrKdV_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntStrKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntStrKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntStrKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntStrKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntStrKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntStrKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrKdV_GetI)
    Add = _swig_new_instance_method(_snap.TIntStrKdV_Add)
    AddV = _swig_new_instance_method(_snap.TIntStrKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntStrKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntStrKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntStrKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntStrKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntStrKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntStrKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntStrKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntStrKdV_Ins)
    Del = _swig_new_instance_method(_snap.TIntStrKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntStrKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntStrKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntStrKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntStrKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntStrKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntStrKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntStrKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntStrKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntStrKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntStrKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntStrKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntStrKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntStrKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntStrKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntStrKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntStrKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntStrKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntStrKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntStrKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntStrKdV_Union)
    Diff = _swig_new_instance_method(_snap.TIntStrKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntStrKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntStrKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntStrKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntStrKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntStrKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntStrKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntStrKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntStrKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntStrKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntStrKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntStrKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntStrKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntStrKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntStrKdV_GetV)

# Register TIntStrKdV in _snap:
_snap.TIntStrKdV_swigregister(TIntStrKdV)
TIntStrKdV_SwapI = _snap.TIntStrKdV_SwapI
TIntStrKdV_GetV = _snap.TIntStrKdV_GetV

class TIntStrPrPrV(object):
    r"""Proxy of C++ TVec< TIntStrPrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntStrPrPrV

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrPrV self) -> TIntStrPrPrV
        __init__(TIntStrPrPrV self, TVec< TPair< TInt,TPair< TStr,TStr > >,int > const & Vec) -> TIntStrPrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TPair< TStr,TStr > >,int > const &

        __init__(TIntStrPrPrV self, int const & _Vals) -> TIntStrPrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntStrPrPrV self, int const & _MxVals, int const & _Vals) -> TIntStrPrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntStrPrPrV self, TIntStrPrPr _ValT, int const & _Vals) -> TIntStrPrPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TPair< TStr,TStr > > *
        _Vals: int const &

        __init__(TIntStrPrPrV self, TSIn SIn) -> TIntStrPrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPrPrV_swiginit(self, _snap.new_TIntStrPrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrPrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrPrPrV_Load)
    Save = _swig_new_instance_method(_snap.TIntStrPrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntStrPrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntStrPrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrPrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntStrPrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrPrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrPrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntStrPrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntStrPrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntStrPrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntStrPrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntStrPrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntStrPrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntStrPrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntStrPrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntStrPrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntStrPrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntStrPrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrPrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntStrPrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntStrPrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntStrPrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntStrPrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntStrPrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntStrPrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrPrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrPrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntStrPrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntStrPrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntStrPrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntStrPrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntStrPrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntStrPrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntStrPrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntStrPrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntStrPrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrPrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntStrPrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntStrPrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntStrPrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntStrPrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntStrPrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntStrPrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntStrPrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntStrPrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntStrPrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntStrPrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntStrPrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntStrPrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntStrPrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntStrPrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntStrPrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntStrPrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntStrPrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntStrPrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntStrPrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntStrPrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntStrPrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntStrPrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntStrPrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntStrPrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntStrPrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntStrPrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntStrPrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntStrPrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntStrPrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntStrPrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntStrPrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntStrPrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntStrPrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntStrPrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntStrPrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntStrPrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntStrPrPrV_GetV)

# Register TIntStrPrPrV in _snap:
_snap.TIntStrPrPrV_swigregister(TIntStrPrPrV)
TIntStrPrPrV_SwapI = _snap.TIntStrPrPrV_SwapI
TIntStrPrPrV_GetV = _snap.TIntStrPrPrV_GetV

class TIntStrVPrV(object):
    r"""Proxy of C++ TVec< TIntStrVPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntStrVPrV

    def __init__(self, *args):
        r"""
        __init__(TIntStrVPrV self) -> TIntStrVPrV
        __init__(TIntStrVPrV self, TVec< TPair< TInt,TVec< TStr,int > >,int > const & Vec) -> TIntStrVPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TVec< TStr,int > >,int > const &

        __init__(TIntStrVPrV self, int const & _Vals) -> TIntStrVPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntStrVPrV self, int const & _MxVals, int const & _Vals) -> TIntStrVPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntStrVPrV self, TIntStrVPr _ValT, int const & _Vals) -> TIntStrVPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TVec< TStr,int > > *
        _Vals: int const &

        __init__(TIntStrVPrV self, TSIn SIn) -> TIntStrVPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrVPrV_swiginit(self, _snap.new_TIntStrVPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrVPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrVPrV_Load)
    Save = _swig_new_instance_method(_snap.TIntStrVPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntStrVPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntStrVPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrVPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrVPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntStrVPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrVPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrVPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntStrVPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntStrVPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntStrVPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntStrVPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntStrVPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntStrVPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntStrVPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntStrVPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntStrVPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntStrVPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntStrVPrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrVPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntStrVPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntStrVPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntStrVPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntStrVPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntStrVPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntStrVPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrVPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrVPrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntStrVPrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntStrVPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntStrVPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntStrVPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntStrVPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntStrVPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntStrVPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntStrVPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntStrVPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrVPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntStrVPrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntStrVPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntStrVPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntStrVPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntStrVPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntStrVPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntStrVPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntStrVPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntStrVPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntStrVPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntStrVPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntStrVPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntStrVPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntStrVPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntStrVPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntStrVPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntStrVPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntStrVPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntStrVPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntStrVPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntStrVPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntStrVPrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntStrVPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntStrVPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntStrVPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntStrVPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntStrVPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntStrVPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntStrVPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntStrVPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntStrVPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntStrVPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntStrVPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntStrVPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntStrVPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntStrVPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntStrVPrV_GetV)

# Register TIntStrVPrV in _snap:
_snap.TIntStrVPrV_swigregister(TIntStrVPrV)
TIntStrVPrV_SwapI = _snap.TIntStrVPrV_SwapI
TIntStrVPrV_GetV = _snap.TIntStrVPrV_GetV

class TIntIntVIntTrV(object):
    r"""Proxy of C++ TVec< TIntIntVIntTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntVIntTrV

    def __init__(self, *args):
        r"""
        __init__(TIntIntVIntTrV self) -> TIntIntVIntTrV
        __init__(TIntIntVIntTrV self, TIntIntVIntTrV Vec) -> TIntIntVIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TVec< TInt,int >,TInt >,int > const &

        __init__(TIntIntVIntTrV self, int const & _Vals) -> TIntIntVIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntIntVIntTrV self, int const & _MxVals, int const & _Vals) -> TIntIntVIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntIntVIntTrV self, TIntIntVIntTr _ValT, int const & _Vals) -> TIntIntVIntTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TVec< TInt,int >,TInt > *
        _Vals: int const &

        __init__(TIntIntVIntTrV self, TSIn SIn) -> TIntIntVIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntVIntTrV_swiginit(self, _snap.new_TIntIntVIntTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntVIntTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntVIntTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntIntVIntTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntIntVIntTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntIntVIntTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntVIntTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntIntVIntTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntIntVIntTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntIntVIntTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntIntVIntTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntIntVIntTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntIntVIntTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntIntVIntTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntIntVIntTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntIntVIntTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntIntVIntTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntIntVIntTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntVIntTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntIntVIntTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntIntVIntTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntIntVIntTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntIntVIntTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntIntVIntTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntVIntTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntIntVIntTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntIntVIntTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntIntVIntTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntIntVIntTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntIntVIntTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntIntVIntTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntIntVIntTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntIntVIntTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntIntVIntTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntIntVIntTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntIntVIntTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntIntVIntTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntIntVIntTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntIntVIntTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntIntVIntTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntIntVIntTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntIntVIntTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntIntVIntTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntIntVIntTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntIntVIntTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntIntVIntTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntIntVIntTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntIntVIntTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntIntVIntTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntIntVIntTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntIntVIntTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntIntVIntTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntIntVIntTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntIntVIntTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntIntVIntTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntIntVIntTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntIntVIntTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntIntVIntTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntIntVIntTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntIntVIntTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntIntVIntTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntIntVIntTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntIntVIntTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntIntVIntTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntIntVIntTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntIntVIntTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntIntVIntTrV_GetV)

# Register TIntIntVIntTrV in _snap:
_snap.TIntIntVIntTrV_swigregister(TIntIntVIntTrV)
TIntIntVIntTrV_SwapI = _snap.TIntIntVIntTrV_SwapI
TIntIntVIntTrV_GetV = _snap.TIntIntVIntTrV_GetV

class TIntIntIntVTrV(object):
    r"""Proxy of C++ TVec< TIntIntIntVTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntIntVTrV

    def __init__(self, *args):
        r"""
        __init__(TIntIntIntVTrV self) -> TIntIntIntVTrV
        __init__(TIntIntIntVTrV self, TIntIntIntVTrV Vec) -> TIntIntIntVTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TVec< TInt,int > >,int > const &

        __init__(TIntIntIntVTrV self, int const & _Vals) -> TIntIntIntVTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntIntIntVTrV self, int const & _MxVals, int const & _Vals) -> TIntIntIntVTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntIntIntVTrV self, TIntIntIntVTr _ValT, int const & _Vals) -> TIntIntIntVTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TInt,TVec< TInt,int > > *
        _Vals: int const &

        __init__(TIntIntIntVTrV self, TSIn SIn) -> TIntIntIntVTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntIntVTrV_swiginit(self, _snap.new_TIntIntIntVTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntIntVTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntIntVTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntIntIntVTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntIntIntVTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntIntIntVTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntIntVTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntIntIntVTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntIntIntVTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntIntIntVTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntIntIntVTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntIntIntVTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntIntIntVTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntIntIntVTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntIntIntVTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntIntIntVTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntIntIntVTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntIntIntVTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntIntVTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntIntIntVTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntIntIntVTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntIntIntVTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntIntIntVTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntIntIntVTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntIntVTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntIntIntVTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntIntIntVTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntIntIntVTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntIntIntVTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntIntIntVTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntIntIntVTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntIntIntVTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntIntIntVTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntIntIntVTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntIntIntVTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntIntIntVTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntIntIntVTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntIntIntVTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntIntIntVTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntIntIntVTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntIntIntVTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntIntIntVTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntIntIntVTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntIntIntVTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntIntIntVTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntIntIntVTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntIntIntVTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntIntIntVTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntIntIntVTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntIntIntVTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntIntIntVTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntIntIntVTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntIntIntVTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntIntIntVTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntIntIntVTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntIntIntVTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntIntIntVTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntIntIntVTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntIntIntVTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntIntIntVTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntIntIntVTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntIntIntVTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntIntIntVTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntIntIntVTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntIntIntVTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntIntIntVTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntIntIntVTrV_GetV)

# Register TIntIntIntVTrV in _snap:
_snap.TIntIntIntVTrV_swigregister(TIntIntIntVTrV)
TIntIntIntVTrV_SwapI = _snap.TIntIntIntVTrV_SwapI
TIntIntIntVTrV_GetV = _snap.TIntIntIntVTrV_GetV

class TUInt64IntPrV(object):
    r"""Proxy of C++ TVec< TUInt64IntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUInt64IntPrV

    def __init__(self, *args):
        r"""
        __init__(TUInt64IntPrV self) -> TUInt64IntPrV
        __init__(TUInt64IntPrV self, TUInt64IntPrV Vec) -> TUInt64IntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TUInt64,TInt >,int > const &

        __init__(TUInt64IntPrV self, int const & _Vals) -> TUInt64IntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUInt64IntPrV self, int const & _MxVals, int const & _Vals) -> TUInt64IntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUInt64IntPrV self, TUInt64IntPr _ValT, int const & _Vals) -> TUInt64IntPrV

        Parameters
        ----------
        _ValT: TPair< TUInt64,TInt > *
        _Vals: int const &

        __init__(TUInt64IntPrV self, TSIn SIn) -> TUInt64IntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64IntPrV_swiginit(self, _snap.new_TUInt64IntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64IntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64IntPrV_Load)
    Save = _swig_new_instance_method(_snap.TUInt64IntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TUInt64IntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUInt64IntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64IntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64IntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUInt64IntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64IntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64IntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUInt64IntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUInt64IntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUInt64IntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUInt64IntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUInt64IntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUInt64IntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUInt64IntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUInt64IntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUInt64IntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUInt64IntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUInt64IntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64IntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TUInt64IntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TUInt64IntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TUInt64IntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUInt64IntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUInt64IntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUInt64IntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64IntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64IntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TUInt64IntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TUInt64IntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUInt64IntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUInt64IntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUInt64IntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUInt64IntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUInt64IntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUInt64IntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUInt64IntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUInt64IntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUInt64IntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TUInt64IntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TUInt64IntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUInt64IntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUInt64IntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUInt64IntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUInt64IntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TUInt64IntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUInt64IntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUInt64IntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUInt64IntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUInt64IntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TUInt64IntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TUInt64IntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TUInt64IntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TUInt64IntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUInt64IntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUInt64IntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUInt64IntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUInt64IntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUInt64IntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TUInt64IntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TUInt64IntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUInt64IntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUInt64IntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUInt64IntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUInt64IntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUInt64IntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUInt64IntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUInt64IntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUInt64IntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUInt64IntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUInt64IntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUInt64IntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUInt64IntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUInt64IntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUInt64IntPrV_GetV)

# Register TUInt64IntPrV in _snap:
_snap.TUInt64IntPrV_swigregister(TUInt64IntPrV)
TUInt64IntPrV_SwapI = _snap.TUInt64IntPrV_SwapI
TUInt64IntPrV_GetV = _snap.TUInt64IntPrV_GetV

class TUInt64FltPrV(object):
    r"""Proxy of C++ TVec< TUInt64FltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUInt64FltPrV

    def __init__(self, *args):
        r"""
        __init__(TUInt64FltPrV self) -> TUInt64FltPrV
        __init__(TUInt64FltPrV self, TUInt64FltPrV Vec) -> TUInt64FltPrV

        Parameters
        ----------
        Vec: TVec< TPair< TUInt64,TFlt >,int > const &

        __init__(TUInt64FltPrV self, int const & _Vals) -> TUInt64FltPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUInt64FltPrV self, int const & _MxVals, int const & _Vals) -> TUInt64FltPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUInt64FltPrV self, TUInt64FltPr _ValT, int const & _Vals) -> TUInt64FltPrV

        Parameters
        ----------
        _ValT: TPair< TUInt64,TFlt > *
        _Vals: int const &

        __init__(TUInt64FltPrV self, TSIn SIn) -> TUInt64FltPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64FltPrV_swiginit(self, _snap.new_TUInt64FltPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64FltPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64FltPrV_Load)
    Save = _swig_new_instance_method(_snap.TUInt64FltPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TUInt64FltPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUInt64FltPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64FltPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64FltPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUInt64FltPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64FltPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64FltPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUInt64FltPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUInt64FltPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUInt64FltPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUInt64FltPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUInt64FltPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUInt64FltPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUInt64FltPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUInt64FltPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUInt64FltPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUInt64FltPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUInt64FltPrV_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64FltPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TUInt64FltPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TUInt64FltPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TUInt64FltPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUInt64FltPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUInt64FltPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUInt64FltPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64FltPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64FltPrV_GetI)
    Add = _swig_new_instance_method(_snap.TUInt64FltPrV_Add)
    AddV = _swig_new_instance_method(_snap.TUInt64FltPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUInt64FltPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUInt64FltPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUInt64FltPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUInt64FltPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUInt64FltPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUInt64FltPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUInt64FltPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUInt64FltPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUInt64FltPrV_Ins)
    Del = _swig_new_instance_method(_snap.TUInt64FltPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TUInt64FltPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUInt64FltPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUInt64FltPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUInt64FltPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUInt64FltPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TUInt64FltPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUInt64FltPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUInt64FltPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUInt64FltPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUInt64FltPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TUInt64FltPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TUInt64FltPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TUInt64FltPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TUInt64FltPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUInt64FltPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUInt64FltPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUInt64FltPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUInt64FltPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUInt64FltPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TUInt64FltPrV_Union)
    Diff = _swig_new_instance_method(_snap.TUInt64FltPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUInt64FltPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUInt64FltPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUInt64FltPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUInt64FltPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUInt64FltPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUInt64FltPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUInt64FltPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUInt64FltPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUInt64FltPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUInt64FltPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUInt64FltPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUInt64FltPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUInt64FltPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUInt64FltPrV_GetV)

# Register TUInt64FltPrV in _snap:
_snap.TUInt64FltPrV_swigregister(TUInt64FltPrV)
TUInt64FltPrV_SwapI = _snap.TUInt64FltPrV_SwapI
TUInt64FltPrV_GetV = _snap.TUInt64FltPrV_GetV

class TUInt64StrPrV(object):
    r"""Proxy of C++ TVec< TUInt64StrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUInt64StrPrV

    def __init__(self, *args):
        r"""
        __init__(TUInt64StrPrV self) -> TUInt64StrPrV
        __init__(TUInt64StrPrV self, TUInt64StrPrV Vec) -> TUInt64StrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TUInt64,TStr >,int > const &

        __init__(TUInt64StrPrV self, int const & _Vals) -> TUInt64StrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUInt64StrPrV self, int const & _MxVals, int const & _Vals) -> TUInt64StrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUInt64StrPrV self, TUInt64StrPr _ValT, int const & _Vals) -> TUInt64StrPrV

        Parameters
        ----------
        _ValT: TPair< TUInt64,TStr > *
        _Vals: int const &

        __init__(TUInt64StrPrV self, TSIn SIn) -> TUInt64StrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64StrPrV_swiginit(self, _snap.new_TUInt64StrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64StrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64StrPrV_Load)
    Save = _swig_new_instance_method(_snap.TUInt64StrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TUInt64StrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUInt64StrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64StrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64StrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUInt64StrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64StrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64StrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUInt64StrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUInt64StrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUInt64StrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUInt64StrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUInt64StrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUInt64StrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUInt64StrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUInt64StrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUInt64StrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUInt64StrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUInt64StrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64StrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TUInt64StrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TUInt64StrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TUInt64StrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUInt64StrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUInt64StrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUInt64StrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64StrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64StrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TUInt64StrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TUInt64StrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUInt64StrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUInt64StrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUInt64StrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUInt64StrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUInt64StrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUInt64StrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUInt64StrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUInt64StrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUInt64StrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TUInt64StrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TUInt64StrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUInt64StrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUInt64StrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUInt64StrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUInt64StrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TUInt64StrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUInt64StrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUInt64StrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUInt64StrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUInt64StrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TUInt64StrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TUInt64StrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TUInt64StrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TUInt64StrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUInt64StrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUInt64StrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUInt64StrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUInt64StrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUInt64StrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TUInt64StrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TUInt64StrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUInt64StrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUInt64StrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUInt64StrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUInt64StrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUInt64StrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUInt64StrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUInt64StrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUInt64StrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUInt64StrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUInt64StrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUInt64StrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUInt64StrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUInt64StrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUInt64StrPrV_GetV)

# Register TUInt64StrPrV in _snap:
_snap.TUInt64StrPrV_swigregister(TUInt64StrPrV)
TUInt64StrPrV_SwapI = _snap.TUInt64StrPrV_SwapI
TUInt64StrPrV_GetV = _snap.TUInt64StrPrV_GetV

class TUInt64IntKdV(object):
    r"""Proxy of C++ TVec< TUInt64IntKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUInt64IntKdV

    def __init__(self, *args):
        r"""
        __init__(TUInt64IntKdV self) -> TUInt64IntKdV
        __init__(TUInt64IntKdV self, TUInt64IntKdV Vec) -> TUInt64IntKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TUInt64,TInt >,int > const &

        __init__(TUInt64IntKdV self, int const & _Vals) -> TUInt64IntKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUInt64IntKdV self, int const & _MxVals, int const & _Vals) -> TUInt64IntKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUInt64IntKdV self, TUInt64IntKd _ValT, int const & _Vals) -> TUInt64IntKdV

        Parameters
        ----------
        _ValT: TKeyDat< TUInt64,TInt > *
        _Vals: int const &

        __init__(TUInt64IntKdV self, TSIn SIn) -> TUInt64IntKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64IntKdV_swiginit(self, _snap.new_TUInt64IntKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64IntKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64IntKdV_Load)
    Save = _swig_new_instance_method(_snap.TUInt64IntKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TUInt64IntKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUInt64IntKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64IntKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64IntKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUInt64IntKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64IntKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64IntKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUInt64IntKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUInt64IntKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUInt64IntKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUInt64IntKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUInt64IntKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUInt64IntKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUInt64IntKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUInt64IntKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUInt64IntKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUInt64IntKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUInt64IntKdV_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64IntKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TUInt64IntKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TUInt64IntKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TUInt64IntKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUInt64IntKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUInt64IntKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUInt64IntKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64IntKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64IntKdV_GetI)
    Add = _swig_new_instance_method(_snap.TUInt64IntKdV_Add)
    AddV = _swig_new_instance_method(_snap.TUInt64IntKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUInt64IntKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUInt64IntKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUInt64IntKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUInt64IntKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUInt64IntKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUInt64IntKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUInt64IntKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUInt64IntKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUInt64IntKdV_Ins)
    Del = _swig_new_instance_method(_snap.TUInt64IntKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TUInt64IntKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUInt64IntKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUInt64IntKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUInt64IntKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUInt64IntKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TUInt64IntKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUInt64IntKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUInt64IntKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUInt64IntKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUInt64IntKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TUInt64IntKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TUInt64IntKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TUInt64IntKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TUInt64IntKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUInt64IntKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUInt64IntKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUInt64IntKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUInt64IntKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUInt64IntKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TUInt64IntKdV_Union)
    Diff = _swig_new_instance_method(_snap.TUInt64IntKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUInt64IntKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUInt64IntKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUInt64IntKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUInt64IntKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUInt64IntKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUInt64IntKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUInt64IntKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUInt64IntKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUInt64IntKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUInt64IntKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUInt64IntKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUInt64IntKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUInt64IntKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUInt64IntKdV_GetV)

# Register TUInt64IntKdV in _snap:
_snap.TUInt64IntKdV_swigregister(TUInt64IntKdV)
TUInt64IntKdV_SwapI = _snap.TUInt64IntKdV_SwapI
TUInt64IntKdV_GetV = _snap.TUInt64IntKdV_GetV

class TUInt64FltKdV(object):
    r"""Proxy of C++ TVec< TUInt64FltKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUInt64FltKdV

    def __init__(self, *args):
        r"""
        __init__(TUInt64FltKdV self) -> TUInt64FltKdV
        __init__(TUInt64FltKdV self, TUInt64FltKdV Vec) -> TUInt64FltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TUInt64,TFlt >,int > const &

        __init__(TUInt64FltKdV self, int const & _Vals) -> TUInt64FltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUInt64FltKdV self, int const & _MxVals, int const & _Vals) -> TUInt64FltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUInt64FltKdV self, TUInt64FltKd _ValT, int const & _Vals) -> TUInt64FltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TUInt64,TFlt > *
        _Vals: int const &

        __init__(TUInt64FltKdV self, TSIn SIn) -> TUInt64FltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64FltKdV_swiginit(self, _snap.new_TUInt64FltKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64FltKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64FltKdV_Load)
    Save = _swig_new_instance_method(_snap.TUInt64FltKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TUInt64FltKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUInt64FltKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64FltKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64FltKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUInt64FltKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64FltKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64FltKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUInt64FltKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUInt64FltKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUInt64FltKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUInt64FltKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUInt64FltKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUInt64FltKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUInt64FltKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUInt64FltKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUInt64FltKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUInt64FltKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUInt64FltKdV_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64FltKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TUInt64FltKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TUInt64FltKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TUInt64FltKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUInt64FltKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUInt64FltKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUInt64FltKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64FltKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64FltKdV_GetI)
    Add = _swig_new_instance_method(_snap.TUInt64FltKdV_Add)
    AddV = _swig_new_instance_method(_snap.TUInt64FltKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUInt64FltKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUInt64FltKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUInt64FltKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUInt64FltKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUInt64FltKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUInt64FltKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUInt64FltKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUInt64FltKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUInt64FltKdV_Ins)
    Del = _swig_new_instance_method(_snap.TUInt64FltKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TUInt64FltKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUInt64FltKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUInt64FltKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUInt64FltKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUInt64FltKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TUInt64FltKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUInt64FltKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUInt64FltKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUInt64FltKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUInt64FltKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TUInt64FltKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TUInt64FltKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TUInt64FltKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TUInt64FltKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUInt64FltKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUInt64FltKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUInt64FltKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUInt64FltKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUInt64FltKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TUInt64FltKdV_Union)
    Diff = _swig_new_instance_method(_snap.TUInt64FltKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUInt64FltKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUInt64FltKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUInt64FltKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUInt64FltKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUInt64FltKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUInt64FltKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUInt64FltKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUInt64FltKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUInt64FltKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUInt64FltKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUInt64FltKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUInt64FltKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUInt64FltKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUInt64FltKdV_GetV)

# Register TUInt64FltKdV in _snap:
_snap.TUInt64FltKdV_swigregister(TUInt64FltKdV)
TUInt64FltKdV_SwapI = _snap.TUInt64FltKdV_SwapI
TUInt64FltKdV_GetV = _snap.TUInt64FltKdV_GetV

class TUInt64StrKdV(object):
    r"""Proxy of C++ TVec< TUInt64StrKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TUInt64StrKdV

    def __init__(self, *args):
        r"""
        __init__(TUInt64StrKdV self) -> TUInt64StrKdV
        __init__(TUInt64StrKdV self, TUInt64StrKdV Vec) -> TUInt64StrKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TUInt64,TStr >,int > const &

        __init__(TUInt64StrKdV self, int const & _Vals) -> TUInt64StrKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TUInt64StrKdV self, int const & _MxVals, int const & _Vals) -> TUInt64StrKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TUInt64StrKdV self, TUInt64StrKd _ValT, int const & _Vals) -> TUInt64StrKdV

        Parameters
        ----------
        _ValT: TKeyDat< TUInt64,TStr > *
        _Vals: int const &

        __init__(TUInt64StrKdV self, TSIn SIn) -> TUInt64StrKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64StrKdV_swiginit(self, _snap.new_TUInt64StrKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64StrKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64StrKdV_Load)
    Save = _swig_new_instance_method(_snap.TUInt64StrKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TUInt64StrKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TUInt64StrKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64StrKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64StrKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TUInt64StrKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64StrKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64StrKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TUInt64StrKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TUInt64StrKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TUInt64StrKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TUInt64StrKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TUInt64StrKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TUInt64StrKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TUInt64StrKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TUInt64StrKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TUInt64StrKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TUInt64StrKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TUInt64StrKdV_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64StrKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TUInt64StrKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TUInt64StrKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TUInt64StrKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TUInt64StrKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TUInt64StrKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TUInt64StrKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64StrKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64StrKdV_GetI)
    Add = _swig_new_instance_method(_snap.TUInt64StrKdV_Add)
    AddV = _swig_new_instance_method(_snap.TUInt64StrKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TUInt64StrKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TUInt64StrKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TUInt64StrKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TUInt64StrKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TUInt64StrKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TUInt64StrKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TUInt64StrKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TUInt64StrKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TUInt64StrKdV_Ins)
    Del = _swig_new_instance_method(_snap.TUInt64StrKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TUInt64StrKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TUInt64StrKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TUInt64StrKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TUInt64StrKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TUInt64StrKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TUInt64StrKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TUInt64StrKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TUInt64StrKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TUInt64StrKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TUInt64StrKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TUInt64StrKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TUInt64StrKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TUInt64StrKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TUInt64StrKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TUInt64StrKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TUInt64StrKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TUInt64StrKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TUInt64StrKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TUInt64StrKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TUInt64StrKdV_Union)
    Diff = _swig_new_instance_method(_snap.TUInt64StrKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TUInt64StrKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TUInt64StrKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TUInt64StrKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TUInt64StrKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TUInt64StrKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TUInt64StrKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TUInt64StrKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TUInt64StrKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TUInt64StrKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TUInt64StrKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TUInt64StrKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TUInt64StrKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TUInt64StrKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TUInt64StrKdV_GetV)

# Register TUInt64StrKdV in _snap:
_snap.TUInt64StrKdV_swigregister(TUInt64StrKdV)
TUInt64StrKdV_SwapI = _snap.TUInt64StrKdV_SwapI
TUInt64StrKdV_GetV = _snap.TUInt64StrKdV_GetV

class TFltBoolKdV(object):
    r"""Proxy of C++ TVec< TFltBoolKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltBoolKdV

    def __init__(self, *args):
        r"""
        __init__(TFltBoolKdV self) -> TFltBoolKdV
        __init__(TFltBoolKdV self, TFltBoolKdV Vec) -> TFltBoolKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TFlt,TBool >,int > const &

        __init__(TFltBoolKdV self, int const & _Vals) -> TFltBoolKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltBoolKdV self, int const & _MxVals, int const & _Vals) -> TFltBoolKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltBoolKdV self, TFltBoolKd _ValT, int const & _Vals) -> TFltBoolKdV

        Parameters
        ----------
        _ValT: TKeyDat< TFlt,TBool > *
        _Vals: int const &

        __init__(TFltBoolKdV self, TSIn SIn) -> TFltBoolKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltBoolKdV_swiginit(self, _snap.new_TFltBoolKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltBoolKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltBoolKdV_Load)
    Save = _swig_new_instance_method(_snap.TFltBoolKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltBoolKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltBoolKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltBoolKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltBoolKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltBoolKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltBoolKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltBoolKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltBoolKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltBoolKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltBoolKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltBoolKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltBoolKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltBoolKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltBoolKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltBoolKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltBoolKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltBoolKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltBoolKdV_Empty)
    Len = _swig_new_instance_method(_snap.TFltBoolKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltBoolKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltBoolKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltBoolKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltBoolKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltBoolKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltBoolKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltBoolKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltBoolKdV_GetI)
    Add = _swig_new_instance_method(_snap.TFltBoolKdV_Add)
    AddV = _swig_new_instance_method(_snap.TFltBoolKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltBoolKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltBoolKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltBoolKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltBoolKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltBoolKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltBoolKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltBoolKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltBoolKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltBoolKdV_Ins)
    Del = _swig_new_instance_method(_snap.TFltBoolKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltBoolKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltBoolKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltBoolKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltBoolKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltBoolKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltBoolKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltBoolKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltBoolKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltBoolKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltBoolKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltBoolKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltBoolKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltBoolKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltBoolKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltBoolKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltBoolKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltBoolKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltBoolKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltBoolKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltBoolKdV_Union)
    Diff = _swig_new_instance_method(_snap.TFltBoolKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltBoolKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltBoolKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltBoolKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltBoolKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltBoolKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltBoolKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltBoolKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltBoolKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltBoolKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltBoolKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltBoolKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltBoolKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltBoolKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltBoolKdV_GetV)

# Register TFltBoolKdV in _snap:
_snap.TFltBoolKdV_swigregister(TFltBoolKdV)
TFltBoolKdV_SwapI = _snap.TFltBoolKdV_SwapI
TFltBoolKdV_GetV = _snap.TFltBoolKdV_GetV

class TFltIntKdV(object):
    r"""Proxy of C++ TVec< TFltIntKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltIntKdV

    def __init__(self, *args):
        r"""
        __init__(TFltIntKdV self) -> TFltIntKdV
        __init__(TFltIntKdV self, TFltIntKdV Vec) -> TFltIntKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TFlt,TInt >,int > const &

        __init__(TFltIntKdV self, int const & _Vals) -> TFltIntKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltIntKdV self, int const & _MxVals, int const & _Vals) -> TFltIntKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltIntKdV self, TFltIntKd _ValT, int const & _Vals) -> TFltIntKdV

        Parameters
        ----------
        _ValT: TKeyDat< TFlt,TInt > *
        _Vals: int const &

        __init__(TFltIntKdV self, TSIn SIn) -> TFltIntKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntKdV_swiginit(self, _snap.new_TFltIntKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltIntKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltIntKdV_Load)
    Save = _swig_new_instance_method(_snap.TFltIntKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltIntKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltIntKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltIntKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltIntKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltIntKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltIntKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltIntKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltIntKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltIntKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltIntKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltIntKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltIntKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltIntKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltIntKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltIntKdV_Empty)
    Len = _swig_new_instance_method(_snap.TFltIntKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltIntKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltIntKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltIntKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltIntKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltIntKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltIntKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltIntKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltIntKdV_GetI)
    Add = _swig_new_instance_method(_snap.TFltIntKdV_Add)
    AddV = _swig_new_instance_method(_snap.TFltIntKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltIntKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltIntKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltIntKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltIntKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltIntKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltIntKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltIntKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltIntKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltIntKdV_Ins)
    Del = _swig_new_instance_method(_snap.TFltIntKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltIntKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltIntKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltIntKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltIntKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltIntKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltIntKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltIntKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltIntKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltIntKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltIntKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltIntKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltIntKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltIntKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltIntKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltIntKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltIntKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltIntKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltIntKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltIntKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltIntKdV_Union)
    Diff = _swig_new_instance_method(_snap.TFltIntKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltIntKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltIntKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltIntKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltIntKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltIntKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltIntKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltIntKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltIntKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltIntKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltIntKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltIntKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltIntKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltIntKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltIntKdV_GetV)

# Register TFltIntKdV in _snap:
_snap.TFltIntKdV_swigregister(TFltIntKdV)
TFltIntKdV_SwapI = _snap.TFltIntKdV_SwapI
TFltIntKdV_GetV = _snap.TFltIntKdV_GetV

class TFltUInt64KdV(object):
    r"""Proxy of C++ TVec< TFltUInt64Kd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltUInt64KdV

    def __init__(self, *args):
        r"""
        __init__(TFltUInt64KdV self) -> TFltUInt64KdV
        __init__(TFltUInt64KdV self, TFltUInt64KdV Vec) -> TFltUInt64KdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TFlt,TUInt64 >,int > const &

        __init__(TFltUInt64KdV self, int const & _Vals) -> TFltUInt64KdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltUInt64KdV self, int const & _MxVals, int const & _Vals) -> TFltUInt64KdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltUInt64KdV self, TFltUInt64Kd _ValT, int const & _Vals) -> TFltUInt64KdV

        Parameters
        ----------
        _ValT: TKeyDat< TFlt,TUInt64 > *
        _Vals: int const &

        __init__(TFltUInt64KdV self, TSIn SIn) -> TFltUInt64KdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltUInt64KdV_swiginit(self, _snap.new_TFltUInt64KdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltUInt64KdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltUInt64KdV_Load)
    Save = _swig_new_instance_method(_snap.TFltUInt64KdV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltUInt64KdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltUInt64KdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltUInt64KdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltUInt64KdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltUInt64KdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltUInt64KdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltUInt64KdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltUInt64KdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltUInt64KdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltUInt64KdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltUInt64KdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltUInt64KdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltUInt64KdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltUInt64KdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltUInt64KdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltUInt64KdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltUInt64KdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltUInt64KdV_Empty)
    Len = _swig_new_instance_method(_snap.TFltUInt64KdV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltUInt64KdV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltUInt64KdV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltUInt64KdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltUInt64KdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltUInt64KdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltUInt64KdV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltUInt64KdV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltUInt64KdV_GetI)
    Add = _swig_new_instance_method(_snap.TFltUInt64KdV_Add)
    AddV = _swig_new_instance_method(_snap.TFltUInt64KdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltUInt64KdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltUInt64KdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltUInt64KdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltUInt64KdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltUInt64KdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltUInt64KdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltUInt64KdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltUInt64KdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltUInt64KdV_Ins)
    Del = _swig_new_instance_method(_snap.TFltUInt64KdV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltUInt64KdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltUInt64KdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltUInt64KdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltUInt64KdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltUInt64KdV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltUInt64KdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltUInt64KdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltUInt64KdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltUInt64KdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltUInt64KdV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltUInt64KdV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltUInt64KdV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltUInt64KdV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltUInt64KdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltUInt64KdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltUInt64KdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltUInt64KdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltUInt64KdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltUInt64KdV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltUInt64KdV_Union)
    Diff = _swig_new_instance_method(_snap.TFltUInt64KdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltUInt64KdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltUInt64KdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltUInt64KdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltUInt64KdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltUInt64KdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltUInt64KdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltUInt64KdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltUInt64KdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltUInt64KdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltUInt64KdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltUInt64KdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltUInt64KdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltUInt64KdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltUInt64KdV_GetV)

# Register TFltUInt64KdV in _snap:
_snap.TFltUInt64KdV_swigregister(TFltUInt64KdV)
TFltUInt64KdV_SwapI = _snap.TFltUInt64KdV_SwapI
TFltUInt64KdV_GetV = _snap.TFltUInt64KdV_GetV

class TFltIntPrKdV(object):
    r"""Proxy of C++ TVec< TFltIntPrKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltIntPrKdV

    def __init__(self, *args):
        r"""
        __init__(TFltIntPrKdV self) -> TFltIntPrKdV
        __init__(TFltIntPrKdV self, TVec< TKeyDat< TFlt,TPair< TInt,TInt > >,int > const & Vec) -> TFltIntPrKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TFlt,TPair< TInt,TInt > >,int > const &

        __init__(TFltIntPrKdV self, int const & _Vals) -> TFltIntPrKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltIntPrKdV self, int const & _MxVals, int const & _Vals) -> TFltIntPrKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltIntPrKdV self, TFltIntPrKd _ValT, int const & _Vals) -> TFltIntPrKdV

        Parameters
        ----------
        _ValT: TKeyDat< TFlt,TPair< TInt,TInt > > *
        _Vals: int const &

        __init__(TFltIntPrKdV self, TSIn SIn) -> TFltIntPrKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntPrKdV_swiginit(self, _snap.new_TFltIntPrKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltIntPrKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltIntPrKdV_Load)
    Save = _swig_new_instance_method(_snap.TFltIntPrKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltIntPrKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltIntPrKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntPrKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltIntPrKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltIntPrKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntPrKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntPrKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltIntPrKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltIntPrKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltIntPrKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltIntPrKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltIntPrKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltIntPrKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltIntPrKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltIntPrKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltIntPrKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltIntPrKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltIntPrKdV_Empty)
    Len = _swig_new_instance_method(_snap.TFltIntPrKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltIntPrKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltIntPrKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltIntPrKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltIntPrKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltIntPrKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltIntPrKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltIntPrKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltIntPrKdV_GetI)
    Add = _swig_new_instance_method(_snap.TFltIntPrKdV_Add)
    AddV = _swig_new_instance_method(_snap.TFltIntPrKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltIntPrKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltIntPrKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltIntPrKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltIntPrKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltIntPrKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltIntPrKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltIntPrKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltIntPrKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltIntPrKdV_Ins)
    Del = _swig_new_instance_method(_snap.TFltIntPrKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltIntPrKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltIntPrKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltIntPrKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltIntPrKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltIntPrKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltIntPrKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltIntPrKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltIntPrKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltIntPrKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltIntPrKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltIntPrKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltIntPrKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltIntPrKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltIntPrKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltIntPrKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltIntPrKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltIntPrKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltIntPrKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltIntPrKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltIntPrKdV_Union)
    Diff = _swig_new_instance_method(_snap.TFltIntPrKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltIntPrKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltIntPrKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltIntPrKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltIntPrKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltIntPrKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltIntPrKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltIntPrKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltIntPrKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltIntPrKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltIntPrKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltIntPrKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltIntPrKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltIntPrKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltIntPrKdV_GetV)

# Register TFltIntPrKdV in _snap:
_snap.TFltIntPrKdV_swigregister(TFltIntPrKdV)
TFltIntPrKdV_SwapI = _snap.TFltIntPrKdV_SwapI
TFltIntPrKdV_GetV = _snap.TFltIntPrKdV_GetV

class TFltKdV(object):
    r"""Proxy of C++ TVec< TFltKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltKdV

    def __init__(self, *args):
        r"""
        __init__(TFltKdV self) -> TFltKdV
        __init__(TFltKdV self, TFltKdV Vec) -> TFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TFlt,TFlt >,int > const &

        __init__(TFltKdV self, int const & _Vals) -> TFltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltKdV self, int const & _MxVals, int const & _Vals) -> TFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltKdV self, TFltKd _ValT, int const & _Vals) -> TFltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TFlt,TFlt > *
        _Vals: int const &

        __init__(TFltKdV self, TSIn SIn) -> TFltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltKdV_swiginit(self, _snap.new_TFltKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltKdV_Load)
    Save = _swig_new_instance_method(_snap.TFltKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltKdV_Empty)
    Len = _swig_new_instance_method(_snap.TFltKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltKdV_GetI)
    Add = _swig_new_instance_method(_snap.TFltKdV_Add)
    AddV = _swig_new_instance_method(_snap.TFltKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltKdV_Ins)
    Del = _swig_new_instance_method(_snap.TFltKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltKdV_Union)
    Diff = _swig_new_instance_method(_snap.TFltKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltKdV_GetV)

# Register TFltKdV in _snap:
_snap.TFltKdV_swigregister(TFltKdV)
TFltKdV_SwapI = _snap.TFltKdV_SwapI
TFltKdV_GetV = _snap.TFltKdV_GetV

class TFltStrKdV(object):
    r"""Proxy of C++ TVec< TFltStrKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltStrKdV

    def __init__(self, *args):
        r"""
        __init__(TFltStrKdV self) -> TFltStrKdV
        __init__(TFltStrKdV self, TFltStrKdV Vec) -> TFltStrKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TFlt,TStr >,int > const &

        __init__(TFltStrKdV self, int const & _Vals) -> TFltStrKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltStrKdV self, int const & _MxVals, int const & _Vals) -> TFltStrKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltStrKdV self, TFltStrKd _ValT, int const & _Vals) -> TFltStrKdV

        Parameters
        ----------
        _ValT: TKeyDat< TFlt,TStr > *
        _Vals: int const &

        __init__(TFltStrKdV self, TSIn SIn) -> TFltStrKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltStrKdV_swiginit(self, _snap.new_TFltStrKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltStrKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltStrKdV_Load)
    Save = _swig_new_instance_method(_snap.TFltStrKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltStrKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltStrKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltStrKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltStrKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltStrKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltStrKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltStrKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltStrKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltStrKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltStrKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltStrKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltStrKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltStrKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltStrKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltStrKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltStrKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltStrKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltStrKdV_Empty)
    Len = _swig_new_instance_method(_snap.TFltStrKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltStrKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltStrKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltStrKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltStrKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltStrKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltStrKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltStrKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltStrKdV_GetI)
    Add = _swig_new_instance_method(_snap.TFltStrKdV_Add)
    AddV = _swig_new_instance_method(_snap.TFltStrKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltStrKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltStrKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltStrKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltStrKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltStrKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltStrKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltStrKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltStrKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltStrKdV_Ins)
    Del = _swig_new_instance_method(_snap.TFltStrKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltStrKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltStrKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltStrKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltStrKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltStrKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltStrKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltStrKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltStrKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltStrKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltStrKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltStrKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltStrKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltStrKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltStrKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltStrKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltStrKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltStrKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltStrKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltStrKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltStrKdV_Union)
    Diff = _swig_new_instance_method(_snap.TFltStrKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltStrKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltStrKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltStrKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltStrKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltStrKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltStrKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltStrKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltStrKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltStrKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltStrKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltStrKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltStrKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltStrKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltStrKdV_GetV)

# Register TFltStrKdV in _snap:
_snap.TFltStrKdV_swigregister(TFltStrKdV)
TFltStrKdV_SwapI = _snap.TFltStrKdV_SwapI
TFltStrKdV_GetV = _snap.TFltStrKdV_GetV

class TFltStrPrPrV(object):
    r"""Proxy of C++ TVec< TFltStrPrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltStrPrPrV

    def __init__(self, *args):
        r"""
        __init__(TFltStrPrPrV self) -> TFltStrPrPrV
        __init__(TFltStrPrPrV self, TVec< TPair< TFlt,TPair< TStr,TStr > >,int > const & Vec) -> TFltStrPrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TPair< TStr,TStr > >,int > const &

        __init__(TFltStrPrPrV self, int const & _Vals) -> TFltStrPrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltStrPrPrV self, int const & _MxVals, int const & _Vals) -> TFltStrPrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltStrPrPrV self, TFltStrPrPr _ValT, int const & _Vals) -> TFltStrPrPrV

        Parameters
        ----------
        _ValT: TPair< TFlt,TPair< TStr,TStr > > *
        _Vals: int const &

        __init__(TFltStrPrPrV self, TSIn SIn) -> TFltStrPrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltStrPrPrV_swiginit(self, _snap.new_TFltStrPrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltStrPrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltStrPrPrV_Load)
    Save = _swig_new_instance_method(_snap.TFltStrPrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltStrPrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltStrPrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltStrPrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltStrPrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltStrPrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltStrPrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltStrPrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltStrPrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltStrPrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltStrPrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltStrPrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltStrPrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltStrPrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltStrPrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltStrPrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltStrPrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltStrPrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltStrPrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltStrPrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltStrPrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltStrPrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltStrPrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltStrPrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltStrPrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltStrPrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltStrPrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltStrPrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltStrPrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltStrPrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltStrPrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltStrPrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltStrPrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltStrPrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltStrPrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltStrPrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltStrPrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltStrPrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltStrPrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltStrPrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltStrPrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltStrPrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltStrPrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltStrPrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltStrPrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltStrPrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltStrPrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltStrPrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltStrPrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltStrPrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltStrPrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltStrPrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltStrPrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltStrPrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltStrPrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltStrPrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltStrPrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltStrPrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltStrPrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltStrPrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltStrPrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltStrPrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltStrPrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltStrPrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltStrPrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltStrPrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltStrPrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltStrPrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltStrPrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltStrPrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltStrPrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltStrPrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltStrPrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltStrPrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltStrPrPrV_GetV)

# Register TFltStrPrPrV in _snap:
_snap.TFltStrPrPrV_swigregister(TFltStrPrPrV)
TFltStrPrPrV_SwapI = _snap.TFltStrPrPrV_SwapI
TFltStrPrPrV_GetV = _snap.TFltStrPrPrV_GetV

class TFltIntIntTrV(object):
    r"""Proxy of C++ TVec< TFltIntIntTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltIntIntTrV

    def __init__(self, *args):
        r"""
        __init__(TFltIntIntTrV self) -> TFltIntIntTrV
        __init__(TFltIntIntTrV self, TFltIntIntTrV Vec) -> TFltIntIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TFlt,TInt,TInt >,int > const &

        __init__(TFltIntIntTrV self, int const & _Vals) -> TFltIntIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltIntIntTrV self, int const & _MxVals, int const & _Vals) -> TFltIntIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltIntIntTrV self, TFltIntIntTr _ValT, int const & _Vals) -> TFltIntIntTrV

        Parameters
        ----------
        _ValT: TTriple< TFlt,TInt,TInt > *
        _Vals: int const &

        __init__(TFltIntIntTrV self, TSIn SIn) -> TFltIntIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntIntTrV_swiginit(self, _snap.new_TFltIntIntTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltIntIntTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltIntIntTrV_Load)
    Save = _swig_new_instance_method(_snap.TFltIntIntTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltIntIntTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltIntIntTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntIntTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltIntIntTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltIntIntTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntIntTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntIntTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltIntIntTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltIntIntTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltIntIntTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltIntIntTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltIntIntTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltIntIntTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltIntIntTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltIntIntTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltIntIntTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltIntIntTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltIntIntTrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltIntIntTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltIntIntTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltIntIntTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltIntIntTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltIntIntTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltIntIntTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltIntIntTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltIntIntTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltIntIntTrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltIntIntTrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltIntIntTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltIntIntTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltIntIntTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltIntIntTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltIntIntTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltIntIntTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltIntIntTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltIntIntTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltIntIntTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltIntIntTrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltIntIntTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltIntIntTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltIntIntTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltIntIntTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltIntIntTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltIntIntTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltIntIntTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltIntIntTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltIntIntTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltIntIntTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltIntIntTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltIntIntTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltIntIntTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltIntIntTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltIntIntTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltIntIntTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltIntIntTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltIntIntTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltIntIntTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltIntIntTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltIntIntTrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltIntIntTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltIntIntTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltIntIntTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltIntIntTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltIntIntTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltIntIntTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltIntIntTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltIntIntTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltIntIntTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltIntIntTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltIntIntTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltIntIntTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltIntIntTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltIntIntTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltIntIntTrV_GetV)

# Register TFltIntIntTrV in _snap:
_snap.TFltIntIntTrV_swigregister(TFltIntIntTrV)
TFltIntIntTrV_SwapI = _snap.TFltIntIntTrV_SwapI
TFltIntIntTrV_GetV = _snap.TFltIntIntTrV_GetV

class TFltFltStrTrV(object):
    r"""Proxy of C++ TVec< TFltFltStrTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltFltStrTrV

    def __init__(self, *args):
        r"""
        __init__(TFltFltStrTrV self) -> TFltFltStrTrV
        __init__(TFltFltStrTrV self, TFltFltStrTrV Vec) -> TFltFltStrTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TFlt,TFlt,TStr >,int > const &

        __init__(TFltFltStrTrV self, int const & _Vals) -> TFltFltStrTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltFltStrTrV self, int const & _MxVals, int const & _Vals) -> TFltFltStrTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltFltStrTrV self, TFltFltStrTr _ValT, int const & _Vals) -> TFltFltStrTrV

        Parameters
        ----------
        _ValT: TTriple< TFlt,TFlt,TStr > *
        _Vals: int const &

        __init__(TFltFltStrTrV self, TSIn SIn) -> TFltFltStrTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltFltStrTrV_swiginit(self, _snap.new_TFltFltStrTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltFltStrTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltFltStrTrV_Load)
    Save = _swig_new_instance_method(_snap.TFltFltStrTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltFltStrTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltFltStrTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltFltStrTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltFltStrTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltFltStrTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltFltStrTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltFltStrTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltFltStrTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltFltStrTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltFltStrTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltFltStrTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltFltStrTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltFltStrTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltFltStrTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltFltStrTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltFltStrTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltFltStrTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltFltStrTrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltFltStrTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltFltStrTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltFltStrTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltFltStrTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltFltStrTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltFltStrTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltFltStrTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltFltStrTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltFltStrTrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltFltStrTrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltFltStrTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltFltStrTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltFltStrTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltFltStrTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltFltStrTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltFltStrTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltFltStrTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltFltStrTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltFltStrTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltFltStrTrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltFltStrTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltFltStrTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltFltStrTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltFltStrTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltFltStrTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltFltStrTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltFltStrTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltFltStrTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltFltStrTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltFltStrTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltFltStrTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltFltStrTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltFltStrTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltFltStrTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltFltStrTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltFltStrTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltFltStrTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltFltStrTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltFltStrTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltFltStrTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltFltStrTrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltFltStrTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltFltStrTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltFltStrTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltFltStrTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltFltStrTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltFltStrTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltFltStrTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltFltStrTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltFltStrTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltFltStrTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltFltStrTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltFltStrTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltFltStrTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltFltStrTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltFltStrTrV_GetV)

# Register TFltFltStrTrV in _snap:
_snap.TFltFltStrTrV_swigregister(TFltFltStrTrV)
TFltFltStrTrV_SwapI = _snap.TFltFltStrTrV_SwapI
TFltFltStrTrV_GetV = _snap.TFltFltStrTrV_GetV

class TAscFltIntPrV(object):
    r"""Proxy of C++ TVec< TAscFltIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TAscFltIntPrV

    def __init__(self, *args):
        r"""
        __init__(TAscFltIntPrV self) -> TAscFltIntPrV
        __init__(TAscFltIntPrV self, TAscFltIntPrV Vec) -> TAscFltIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TAscFlt,TInt >,int > const &

        __init__(TAscFltIntPrV self, int const & _Vals) -> TAscFltIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TAscFltIntPrV self, int const & _MxVals, int const & _Vals) -> TAscFltIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TAscFltIntPrV self, TAscFltIntPr _ValT, int const & _Vals) -> TAscFltIntPrV

        Parameters
        ----------
        _ValT: TPair< TAscFlt,TInt > *
        _Vals: int const &

        __init__(TAscFltIntPrV self, TSIn SIn) -> TAscFltIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltIntPrV_swiginit(self, _snap.new_TAscFltIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TAscFltIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TAscFltIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TAscFltIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TAscFltIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TAscFltIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TAscFltIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TAscFltIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TAscFltIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TAscFltIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TAscFltIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TAscFltIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TAscFltIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TAscFltIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TAscFltIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TAscFltIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TAscFltIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TAscFltIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TAscFltIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TAscFltIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TAscFltIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TAscFltIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TAscFltIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TAscFltIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TAscFltIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TAscFltIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TAscFltIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TAscFltIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TAscFltIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TAscFltIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TAscFltIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TAscFltIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TAscFltIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TAscFltIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TAscFltIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TAscFltIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TAscFltIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TAscFltIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TAscFltIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TAscFltIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TAscFltIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TAscFltIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TAscFltIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TAscFltIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TAscFltIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TAscFltIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TAscFltIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TAscFltIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TAscFltIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TAscFltIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TAscFltIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TAscFltIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TAscFltIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TAscFltIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TAscFltIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TAscFltIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TAscFltIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TAscFltIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TAscFltIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TAscFltIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TAscFltIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TAscFltIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TAscFltIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TAscFltIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TAscFltIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TAscFltIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TAscFltIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TAscFltIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TAscFltIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TAscFltIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TAscFltIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TAscFltIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TAscFltIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TAscFltIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TAscFltIntPrV_GetV)

# Register TAscFltIntPrV in _snap:
_snap.TAscFltIntPrV_swigregister(TAscFltIntPrV)
TAscFltIntPrV_SwapI = _snap.TAscFltIntPrV_SwapI
TAscFltIntPrV_GetV = _snap.TAscFltIntPrV_GetV

class TAscFltIntKdV(object):
    r"""Proxy of C++ TVec< TAscFltIntKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TAscFltIntKdV

    def __init__(self, *args):
        r"""
        __init__(TAscFltIntKdV self) -> TAscFltIntKdV
        __init__(TAscFltIntKdV self, TAscFltIntKdV Vec) -> TAscFltIntKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TAscFlt,TInt >,int > const &

        __init__(TAscFltIntKdV self, int const & _Vals) -> TAscFltIntKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TAscFltIntKdV self, int const & _MxVals, int const & _Vals) -> TAscFltIntKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TAscFltIntKdV self, TAscFltIntKd _ValT, int const & _Vals) -> TAscFltIntKdV

        Parameters
        ----------
        _ValT: TKeyDat< TAscFlt,TInt > *
        _Vals: int const &

        __init__(TAscFltIntKdV self, TSIn SIn) -> TAscFltIntKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltIntKdV_swiginit(self, _snap.new_TAscFltIntKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TAscFltIntKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TAscFltIntKdV_Load)
    Save = _swig_new_instance_method(_snap.TAscFltIntKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TAscFltIntKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TAscFltIntKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltIntKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TAscFltIntKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TAscFltIntKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TAscFltIntKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TAscFltIntKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TAscFltIntKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TAscFltIntKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TAscFltIntKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TAscFltIntKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TAscFltIntKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TAscFltIntKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TAscFltIntKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TAscFltIntKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TAscFltIntKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TAscFltIntKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TAscFltIntKdV_Empty)
    Len = _swig_new_instance_method(_snap.TAscFltIntKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TAscFltIntKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TAscFltIntKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TAscFltIntKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TAscFltIntKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TAscFltIntKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TAscFltIntKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TAscFltIntKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TAscFltIntKdV_GetI)
    Add = _swig_new_instance_method(_snap.TAscFltIntKdV_Add)
    AddV = _swig_new_instance_method(_snap.TAscFltIntKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TAscFltIntKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TAscFltIntKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TAscFltIntKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TAscFltIntKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TAscFltIntKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TAscFltIntKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TAscFltIntKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TAscFltIntKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TAscFltIntKdV_Ins)
    Del = _swig_new_instance_method(_snap.TAscFltIntKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TAscFltIntKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TAscFltIntKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TAscFltIntKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TAscFltIntKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TAscFltIntKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TAscFltIntKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TAscFltIntKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TAscFltIntKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TAscFltIntKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TAscFltIntKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TAscFltIntKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TAscFltIntKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TAscFltIntKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TAscFltIntKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TAscFltIntKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TAscFltIntKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TAscFltIntKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TAscFltIntKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TAscFltIntKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TAscFltIntKdV_Union)
    Diff = _swig_new_instance_method(_snap.TAscFltIntKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TAscFltIntKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TAscFltIntKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TAscFltIntKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TAscFltIntKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TAscFltIntKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TAscFltIntKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TAscFltIntKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TAscFltIntKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TAscFltIntKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TAscFltIntKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TAscFltIntKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TAscFltIntKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TAscFltIntKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TAscFltIntKdV_GetV)

# Register TAscFltIntKdV in _snap:
_snap.TAscFltIntKdV_swigregister(TAscFltIntKdV)
TAscFltIntKdV_SwapI = _snap.TAscFltIntKdV_SwapI
TAscFltIntKdV_GetV = _snap.TAscFltIntKdV_GetV

class TStrPrV(object):
    r"""Proxy of C++ TVec< TStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrPrV

    def __init__(self, *args):
        r"""
        __init__(TStrPrV self) -> TStrPrV
        __init__(TStrPrV self, TStrPrV Vec) -> TStrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TStr >,int > const &

        __init__(TStrPrV self, int const & _Vals) -> TStrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrPrV self, int const & _MxVals, int const & _Vals) -> TStrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrPrV self, TStrPr _ValT, int const & _Vals) -> TStrPrV

        Parameters
        ----------
        _ValT: TPair< TStr,TStr > *
        _Vals: int const &

        __init__(TStrPrV self, TSIn SIn) -> TStrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrPrV_swiginit(self, _snap.new_TStrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrPrV_Load)
    Save = _swig_new_instance_method(_snap.TStrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrPrV_GetV)

# Register TStrPrV in _snap:
_snap.TStrPrV_swigregister(TStrPrV)
TStrPrV_SwapI = _snap.TStrPrV_SwapI
TStrPrV_GetV = _snap.TStrPrV_GetV

class TStrFltPrV(object):
    r"""Proxy of C++ TVec< TStrFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrFltPrV

    def __init__(self, *args):
        r"""
        __init__(TStrFltPrV self) -> TStrFltPrV
        __init__(TStrFltPrV self, TStrFltPrV Vec) -> TStrFltPrV

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TFlt >,int > const &

        __init__(TStrFltPrV self, int const & _Vals) -> TStrFltPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrFltPrV self, int const & _MxVals, int const & _Vals) -> TStrFltPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrFltPrV self, TStrFltPr _ValT, int const & _Vals) -> TStrFltPrV

        Parameters
        ----------
        _ValT: TPair< TStr,TFlt > *
        _Vals: int const &

        __init__(TStrFltPrV self, TSIn SIn) -> TStrFltPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltPrV_swiginit(self, _snap.new_TStrFltPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrFltPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrFltPrV_Load)
    Save = _swig_new_instance_method(_snap.TStrFltPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrFltPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrFltPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrFltPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrFltPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrFltPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrFltPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrFltPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrFltPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrFltPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrFltPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrFltPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrFltPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrFltPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrFltPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrFltPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrFltPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrFltPrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrFltPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrFltPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrFltPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrFltPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrFltPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrFltPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrFltPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrFltPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrFltPrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrFltPrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrFltPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrFltPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrFltPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrFltPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrFltPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrFltPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrFltPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrFltPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrFltPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrFltPrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrFltPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrFltPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrFltPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrFltPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrFltPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrFltPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrFltPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrFltPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrFltPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrFltPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrFltPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrFltPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrFltPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrFltPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrFltPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrFltPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrFltPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrFltPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrFltPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrFltPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrFltPrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrFltPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrFltPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrFltPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrFltPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrFltPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrFltPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrFltPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrFltPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrFltPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrFltPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrFltPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrFltPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrFltPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrFltPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrFltPrV_GetV)

# Register TStrFltPrV in _snap:
_snap.TStrFltPrV_swigregister(TStrFltPrV)
TStrFltPrV_SwapI = _snap.TStrFltPrV_SwapI
TStrFltPrV_GetV = _snap.TStrFltPrV_GetV

class TStrIntKdV(object):
    r"""Proxy of C++ TVec< TStrIntKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrIntKdV

    def __init__(self, *args):
        r"""
        __init__(TStrIntKdV self) -> TStrIntKdV
        __init__(TStrIntKdV self, TStrIntKdV Vec) -> TStrIntKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TStr,TInt >,int > const &

        __init__(TStrIntKdV self, int const & _Vals) -> TStrIntKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrIntKdV self, int const & _MxVals, int const & _Vals) -> TStrIntKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrIntKdV self, TStrIntKd _ValT, int const & _Vals) -> TStrIntKdV

        Parameters
        ----------
        _ValT: TKeyDat< TStr,TInt > *
        _Vals: int const &

        __init__(TStrIntKdV self, TSIn SIn) -> TStrIntKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntKdV_swiginit(self, _snap.new_TStrIntKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntKdV_Load)
    Save = _swig_new_instance_method(_snap.TStrIntKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrIntKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrIntKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrIntKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrIntKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrIntKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrIntKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrIntKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrIntKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrIntKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrIntKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrIntKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrIntKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrIntKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrIntKdV_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrIntKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrIntKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrIntKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrIntKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrIntKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrIntKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntKdV_GetI)
    Add = _swig_new_instance_method(_snap.TStrIntKdV_Add)
    AddV = _swig_new_instance_method(_snap.TStrIntKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrIntKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrIntKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrIntKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrIntKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrIntKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrIntKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrIntKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrIntKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrIntKdV_Ins)
    Del = _swig_new_instance_method(_snap.TStrIntKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrIntKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrIntKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrIntKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrIntKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrIntKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrIntKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrIntKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrIntKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrIntKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrIntKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrIntKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrIntKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrIntKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrIntKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrIntKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrIntKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrIntKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrIntKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrIntKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrIntKdV_Union)
    Diff = _swig_new_instance_method(_snap.TStrIntKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrIntKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrIntKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrIntKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrIntKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrIntKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrIntKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrIntKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrIntKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrIntKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrIntKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrIntKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrIntKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrIntKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrIntKdV_GetV)

# Register TStrIntKdV in _snap:
_snap.TStrIntKdV_swigregister(TStrIntKdV)
TStrIntKdV_SwapI = _snap.TStrIntKdV_SwapI
TStrIntKdV_GetV = _snap.TStrIntKdV_GetV

class TStrFltKdV(object):
    r"""Proxy of C++ TVec< TStrFltKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrFltKdV

    def __init__(self, *args):
        r"""
        __init__(TStrFltKdV self) -> TStrFltKdV
        __init__(TStrFltKdV self, TStrFltKdV Vec) -> TStrFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TStr,TFlt >,int > const &

        __init__(TStrFltKdV self, int const & _Vals) -> TStrFltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrFltKdV self, int const & _MxVals, int const & _Vals) -> TStrFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrFltKdV self, TStrFltKd _ValT, int const & _Vals) -> TStrFltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TStr,TFlt > *
        _Vals: int const &

        __init__(TStrFltKdV self, TSIn SIn) -> TStrFltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltKdV_swiginit(self, _snap.new_TStrFltKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrFltKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrFltKdV_Load)
    Save = _swig_new_instance_method(_snap.TStrFltKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrFltKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrFltKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrFltKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrFltKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrFltKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrFltKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrFltKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrFltKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrFltKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrFltKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrFltKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrFltKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrFltKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrFltKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrFltKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrFltKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrFltKdV_Empty)
    Len = _swig_new_instance_method(_snap.TStrFltKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrFltKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrFltKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrFltKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrFltKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrFltKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrFltKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrFltKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrFltKdV_GetI)
    Add = _swig_new_instance_method(_snap.TStrFltKdV_Add)
    AddV = _swig_new_instance_method(_snap.TStrFltKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrFltKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrFltKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrFltKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrFltKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrFltKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrFltKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrFltKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrFltKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrFltKdV_Ins)
    Del = _swig_new_instance_method(_snap.TStrFltKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrFltKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrFltKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrFltKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrFltKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrFltKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrFltKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrFltKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrFltKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrFltKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrFltKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrFltKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrFltKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrFltKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrFltKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrFltKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrFltKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrFltKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrFltKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrFltKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrFltKdV_Union)
    Diff = _swig_new_instance_method(_snap.TStrFltKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrFltKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrFltKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrFltKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrFltKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrFltKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrFltKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrFltKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrFltKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrFltKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrFltKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrFltKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrFltKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrFltKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrFltKdV_GetV)

# Register TStrFltKdV in _snap:
_snap.TStrFltKdV_swigregister(TStrFltKdV)
TStrFltKdV_SwapI = _snap.TStrFltKdV_SwapI
TStrFltKdV_GetV = _snap.TStrFltKdV_GetV

class TStrAscFltKdV(object):
    r"""Proxy of C++ TVec< TStrAscFltKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrAscFltKdV

    def __init__(self, *args):
        r"""
        __init__(TStrAscFltKdV self) -> TStrAscFltKdV
        __init__(TStrAscFltKdV self, TStrAscFltKdV Vec) -> TStrAscFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TStr,TAscFlt >,int > const &

        __init__(TStrAscFltKdV self, int const & _Vals) -> TStrAscFltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrAscFltKdV self, int const & _MxVals, int const & _Vals) -> TStrAscFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrAscFltKdV self, TStrAscFltKd _ValT, int const & _Vals) -> TStrAscFltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TStr,TAscFlt > *
        _Vals: int const &

        __init__(TStrAscFltKdV self, TSIn SIn) -> TStrAscFltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrAscFltKdV_swiginit(self, _snap.new_TStrAscFltKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrAscFltKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrAscFltKdV_Load)
    Save = _swig_new_instance_method(_snap.TStrAscFltKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrAscFltKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrAscFltKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrAscFltKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrAscFltKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrAscFltKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrAscFltKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrAscFltKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrAscFltKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrAscFltKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrAscFltKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrAscFltKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrAscFltKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrAscFltKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrAscFltKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrAscFltKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrAscFltKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrAscFltKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrAscFltKdV_Empty)
    Len = _swig_new_instance_method(_snap.TStrAscFltKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrAscFltKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrAscFltKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrAscFltKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrAscFltKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrAscFltKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrAscFltKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrAscFltKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrAscFltKdV_GetI)
    Add = _swig_new_instance_method(_snap.TStrAscFltKdV_Add)
    AddV = _swig_new_instance_method(_snap.TStrAscFltKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrAscFltKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrAscFltKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrAscFltKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrAscFltKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrAscFltKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrAscFltKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrAscFltKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrAscFltKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrAscFltKdV_Ins)
    Del = _swig_new_instance_method(_snap.TStrAscFltKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrAscFltKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrAscFltKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrAscFltKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrAscFltKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrAscFltKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrAscFltKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrAscFltKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrAscFltKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrAscFltKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrAscFltKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrAscFltKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrAscFltKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrAscFltKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrAscFltKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrAscFltKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrAscFltKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrAscFltKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrAscFltKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrAscFltKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrAscFltKdV_Union)
    Diff = _swig_new_instance_method(_snap.TStrAscFltKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrAscFltKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrAscFltKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrAscFltKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrAscFltKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrAscFltKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrAscFltKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrAscFltKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrAscFltKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrAscFltKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrAscFltKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrAscFltKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrAscFltKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrAscFltKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrAscFltKdV_GetV)

# Register TStrAscFltKdV in _snap:
_snap.TStrAscFltKdV_swigregister(TStrAscFltKdV)
TStrAscFltKdV_SwapI = _snap.TStrAscFltKdV_SwapI
TStrAscFltKdV_GetV = _snap.TStrAscFltKdV_GetV

class TStrTrV(object):
    r"""Proxy of C++ TVec< TStrTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrTrV

    def __init__(self, *args):
        r"""
        __init__(TStrTrV self) -> TStrTrV
        __init__(TStrTrV self, TStrTrV Vec) -> TStrTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TStr,TStr,TStr >,int > const &

        __init__(TStrTrV self, int const & _Vals) -> TStrTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrTrV self, int const & _MxVals, int const & _Vals) -> TStrTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrTrV self, TStrTr _ValT, int const & _Vals) -> TStrTrV

        Parameters
        ----------
        _ValT: TTriple< TStr,TStr,TStr > *
        _Vals: int const &

        __init__(TStrTrV self, TSIn SIn) -> TStrTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrTrV_swiginit(self, _snap.new_TStrTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrTrV_Load)
    Save = _swig_new_instance_method(_snap.TStrTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrTrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrTrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrTrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrTrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrTrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrTrV_GetV)

# Register TStrTrV in _snap:
_snap.TStrTrV_swigregister(TStrTrV)
TStrTrV_SwapI = _snap.TStrTrV_SwapI
TStrTrV_GetV = _snap.TStrTrV_GetV

class TStrQuV(object):
    r"""Proxy of C++ TVec< TStrQu > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrQuV

    def __init__(self, *args):
        r"""
        __init__(TStrQuV self) -> TStrQuV
        __init__(TStrQuV self, TStrQuV Vec) -> TStrQuV

        Parameters
        ----------
        Vec: TVec< TQuad< TStr,TStr,TStr,TStr >,int > const &

        __init__(TStrQuV self, int const & _Vals) -> TStrQuV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrQuV self, int const & _MxVals, int const & _Vals) -> TStrQuV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrQuV self, TStrQu _ValT, int const & _Vals) -> TStrQuV

        Parameters
        ----------
        _ValT: TQuad< TStr,TStr,TStr,TStr > *
        _Vals: int const &

        __init__(TStrQuV self, TSIn SIn) -> TStrQuV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrQuV_swiginit(self, _snap.new_TStrQuV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrQuV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrQuV_Load)
    Save = _swig_new_instance_method(_snap.TStrQuV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrQuV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrQuV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrQuV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrQuV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrQuV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrQuV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrQuV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrQuV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrQuV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrQuV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrQuV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrQuV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrQuV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrQuV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrQuV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrQuV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrQuV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrQuV_Empty)
    Len = _swig_new_instance_method(_snap.TStrQuV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrQuV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrQuV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrQuV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrQuV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrQuV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrQuV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrQuV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrQuV_GetI)
    Add = _swig_new_instance_method(_snap.TStrQuV_Add)
    AddV = _swig_new_instance_method(_snap.TStrQuV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrQuV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrQuV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrQuV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrQuV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrQuV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrQuV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrQuV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrQuV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrQuV_Ins)
    Del = _swig_new_instance_method(_snap.TStrQuV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrQuV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrQuV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrQuV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrQuV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrQuV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrQuV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrQuV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrQuV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrQuV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrQuV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrQuV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrQuV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrQuV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrQuV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrQuV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrQuV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrQuV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrQuV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrQuV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrQuV_Union)
    Diff = _swig_new_instance_method(_snap.TStrQuV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrQuV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrQuV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrQuV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrQuV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrQuV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrQuV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrQuV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrQuV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrQuV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrQuV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrQuV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrQuV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrQuV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrQuV_GetV)

# Register TStrQuV in _snap:
_snap.TStrQuV_swigregister(TStrQuV)
TStrQuV_SwapI = _snap.TStrQuV_SwapI
TStrQuV_GetV = _snap.TStrQuV_GetV

class TStrFltFltTrV(object):
    r"""Proxy of C++ TVec< TStrFltFltTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrFltFltTrV

    def __init__(self, *args):
        r"""
        __init__(TStrFltFltTrV self) -> TStrFltFltTrV
        __init__(TStrFltFltTrV self, TStrFltFltTrV Vec) -> TStrFltFltTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TStr,TFlt,TFlt >,int > const &

        __init__(TStrFltFltTrV self, int const & _Vals) -> TStrFltFltTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrFltFltTrV self, int const & _MxVals, int const & _Vals) -> TStrFltFltTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrFltFltTrV self, TStrFltFltTr _ValT, int const & _Vals) -> TStrFltFltTrV

        Parameters
        ----------
        _ValT: TTriple< TStr,TFlt,TFlt > *
        _Vals: int const &

        __init__(TStrFltFltTrV self, TSIn SIn) -> TStrFltFltTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltFltTrV_swiginit(self, _snap.new_TStrFltFltTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrFltFltTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrFltFltTrV_Load)
    Save = _swig_new_instance_method(_snap.TStrFltFltTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrFltFltTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrFltFltTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltFltTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrFltFltTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrFltFltTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrFltFltTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrFltFltTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrFltFltTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrFltFltTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrFltFltTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrFltFltTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrFltFltTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrFltFltTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrFltFltTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrFltFltTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrFltFltTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrFltFltTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrFltFltTrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrFltFltTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrFltFltTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrFltFltTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrFltFltTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrFltFltTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrFltFltTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrFltFltTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrFltFltTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrFltFltTrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrFltFltTrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrFltFltTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrFltFltTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrFltFltTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrFltFltTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrFltFltTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrFltFltTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrFltFltTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrFltFltTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrFltFltTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrFltFltTrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrFltFltTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrFltFltTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrFltFltTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrFltFltTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrFltFltTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrFltFltTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrFltFltTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrFltFltTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrFltFltTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrFltFltTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrFltFltTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrFltFltTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrFltFltTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrFltFltTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrFltFltTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrFltFltTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrFltFltTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrFltFltTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrFltFltTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrFltFltTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrFltFltTrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrFltFltTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrFltFltTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrFltFltTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrFltFltTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrFltFltTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrFltFltTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrFltFltTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrFltFltTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrFltFltTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrFltFltTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrFltFltTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrFltFltTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrFltFltTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrFltFltTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrFltFltTrV_GetV)

# Register TStrFltFltTrV in _snap:
_snap.TStrFltFltTrV_swigregister(TStrFltFltTrV)
TStrFltFltTrV_SwapI = _snap.TStrFltFltTrV_SwapI
TStrFltFltTrV_GetV = _snap.TStrFltFltTrV_GetV

class TStrStrIntTrV(object):
    r"""Proxy of C++ TVec< TStrStrIntTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrStrIntTrV

    def __init__(self, *args):
        r"""
        __init__(TStrStrIntTrV self) -> TStrStrIntTrV
        __init__(TStrStrIntTrV self, TStrStrIntTrV Vec) -> TStrStrIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TStr,TStr,TInt >,int > const &

        __init__(TStrStrIntTrV self, int const & _Vals) -> TStrStrIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrStrIntTrV self, int const & _MxVals, int const & _Vals) -> TStrStrIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrStrIntTrV self, TStrStrIntTr _ValT, int const & _Vals) -> TStrStrIntTrV

        Parameters
        ----------
        _ValT: TTriple< TStr,TStr,TInt > *
        _Vals: int const &

        __init__(TStrStrIntTrV self, TSIn SIn) -> TStrStrIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrIntTrV_swiginit(self, _snap.new_TStrStrIntTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrIntTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrIntTrV_Load)
    Save = _swig_new_instance_method(_snap.TStrStrIntTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrStrIntTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrStrIntTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrIntTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrIntTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrStrIntTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrStrIntTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrStrIntTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrStrIntTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrStrIntTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrStrIntTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrStrIntTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrStrIntTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrStrIntTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrStrIntTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrStrIntTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrStrIntTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrStrIntTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrStrIntTrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrIntTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrStrIntTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrStrIntTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrStrIntTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrStrIntTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrStrIntTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrStrIntTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrIntTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrIntTrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrStrIntTrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrStrIntTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrStrIntTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrStrIntTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrStrIntTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrStrIntTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrStrIntTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrStrIntTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrStrIntTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrStrIntTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrStrIntTrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrStrIntTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrStrIntTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrStrIntTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrStrIntTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrStrIntTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrStrIntTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrStrIntTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrStrIntTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrStrIntTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrStrIntTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrStrIntTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrStrIntTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrStrIntTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrStrIntTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrStrIntTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrStrIntTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrStrIntTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrStrIntTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrStrIntTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrStrIntTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrStrIntTrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrStrIntTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrStrIntTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrStrIntTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrStrIntTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrStrIntTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrStrIntTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrStrIntTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrStrIntTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrStrIntTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrStrIntTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrStrIntTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrStrIntTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrStrIntTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrStrIntTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrStrIntTrV_GetV)

# Register TStrStrIntTrV in _snap:
_snap.TStrStrIntTrV_swigregister(TStrStrIntTrV)
TStrStrIntTrV_SwapI = _snap.TStrStrIntTrV_SwapI
TStrStrIntTrV_GetV = _snap.TStrStrIntTrV_GetV

class TStrKdV(object):
    r"""Proxy of C++ TVec< TStrKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrKdV

    def __init__(self, *args):
        r"""
        __init__(TStrKdV self) -> TStrKdV
        __init__(TStrKdV self, TStrKdV Vec) -> TStrKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TStr,TStr >,int > const &

        __init__(TStrKdV self, int const & _Vals) -> TStrKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrKdV self, int const & _MxVals, int const & _Vals) -> TStrKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrKdV self, TStrKd _ValT, int const & _Vals) -> TStrKdV

        Parameters
        ----------
        _ValT: TKeyDat< TStr,TStr > *
        _Vals: int const &

        __init__(TStrKdV self, TSIn SIn) -> TStrKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrKdV_swiginit(self, _snap.new_TStrKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrKdV_Load)
    Save = _swig_new_instance_method(_snap.TStrKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrKdV_Empty)
    Len = _swig_new_instance_method(_snap.TStrKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrKdV_GetI)
    Add = _swig_new_instance_method(_snap.TStrKdV_Add)
    AddV = _swig_new_instance_method(_snap.TStrKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrKdV_Ins)
    Del = _swig_new_instance_method(_snap.TStrKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrKdV_Union)
    Diff = _swig_new_instance_method(_snap.TStrKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrKdV_GetV)

# Register TStrKdV in _snap:
_snap.TStrKdV_swigregister(TStrKdV)
TStrKdV_SwapI = _snap.TStrKdV_SwapI
TStrKdV_GetV = _snap.TStrKdV_GetV

class TStrStrVPrV(object):
    r"""Proxy of C++ TVec< TStrStrVPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrStrVPrV

    def __init__(self, *args):
        r"""
        __init__(TStrStrVPrV self) -> TStrStrVPrV
        __init__(TStrStrVPrV self, TVec< TPair< TStr,TVec< TStr,int > >,int > const & Vec) -> TStrStrVPrV

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TVec< TStr,int > >,int > const &

        __init__(TStrStrVPrV self, int const & _Vals) -> TStrStrVPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrStrVPrV self, int const & _MxVals, int const & _Vals) -> TStrStrVPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrStrVPrV self, TStrStrVPr _ValT, int const & _Vals) -> TStrStrVPrV

        Parameters
        ----------
        _ValT: TPair< TStr,TVec< TStr,int > > *
        _Vals: int const &

        __init__(TStrStrVPrV self, TSIn SIn) -> TStrStrVPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrVPrV_swiginit(self, _snap.new_TStrStrVPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrVPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrVPrV_Load)
    Save = _swig_new_instance_method(_snap.TStrStrVPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrStrVPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrStrVPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrVPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrVPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrStrVPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrStrVPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrStrVPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrStrVPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrStrVPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrStrVPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrStrVPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrStrVPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrStrVPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrStrVPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrStrVPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrStrVPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrStrVPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrStrVPrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrVPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrStrVPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrStrVPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrStrVPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrStrVPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrStrVPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrStrVPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrVPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrVPrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrStrVPrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrStrVPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrStrVPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrStrVPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrStrVPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrStrVPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrStrVPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrStrVPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrStrVPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrStrVPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrStrVPrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrStrVPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrStrVPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrStrVPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrStrVPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrStrVPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrStrVPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrStrVPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrStrVPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrStrVPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrStrVPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrStrVPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrStrVPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrStrVPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrStrVPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrStrVPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrStrVPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrStrVPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrStrVPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrStrVPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrStrVPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrStrVPrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrStrVPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrStrVPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrStrVPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrStrVPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrStrVPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrStrVPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrStrVPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrStrVPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrStrVPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrStrVPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrStrVPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrStrVPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrStrVPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrStrVPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrStrVPrV_GetV)

# Register TStrStrVPrV in _snap:
_snap.TStrStrVPrV_swigregister(TStrStrVPrV)
TStrStrVPrV_SwapI = _snap.TStrStrVPrV_SwapI
TStrStrVPrV_GetV = _snap.TStrStrVPrV_GetV

class TStrVIntPrV(object):
    r"""Proxy of C++ TVec< TStrVIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrVIntPrV

    def __init__(self, *args):
        r"""
        __init__(TStrVIntPrV self) -> TStrVIntPrV
        __init__(TStrVIntPrV self, TVec< TPair< TVec< TStr,int >,TInt >,int > const & Vec) -> TStrVIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TVec< TStr,int >,TInt >,int > const &

        __init__(TStrVIntPrV self, int const & _Vals) -> TStrVIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrVIntPrV self, int const & _MxVals, int const & _Vals) -> TStrVIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrVIntPrV self, TStrVIntPr _ValT, int const & _Vals) -> TStrVIntPrV

        Parameters
        ----------
        _ValT: TPair< TVec< TStr,int >,TInt > *
        _Vals: int const &

        __init__(TStrVIntPrV self, TSIn SIn) -> TStrVIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVIntPrV_swiginit(self, _snap.new_TStrVIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrVIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrVIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TStrVIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrVIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrVIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrVIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrVIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrVIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrVIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrVIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrVIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrVIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrVIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrVIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrVIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrVIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrVIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrVIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrVIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrVIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrVIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrVIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrVIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrVIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrVIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrVIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrVIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrVIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrVIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrVIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrVIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrVIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrVIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrVIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrVIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrVIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrVIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrVIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrVIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrVIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrVIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrVIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrVIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrVIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrVIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrVIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrVIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrVIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrVIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrVIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrVIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrVIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrVIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrVIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrVIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrVIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrVIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrVIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrVIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrVIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrVIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrVIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrVIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrVIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrVIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrVIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrVIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrVIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrVIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrVIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrVIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrVIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrVIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrVIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrVIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrVIntPrV_GetV)

# Register TStrVIntPrV in _snap:
_snap.TStrVIntPrV_swigregister(TStrVIntPrV)
TStrVIntPrV_SwapI = _snap.TStrVIntPrV_SwapI
TStrVIntPrV_GetV = _snap.TStrVIntPrV_GetV

class TFltIntIntIntQuV(object):
    r"""Proxy of C++ TVec< TFltIntIntIntQu > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltIntIntIntQuV

    def __init__(self, *args):
        r"""
        __init__(TFltIntIntIntQuV self) -> TFltIntIntIntQuV
        __init__(TFltIntIntIntQuV self, TFltIntIntIntQuV Vec) -> TFltIntIntIntQuV

        Parameters
        ----------
        Vec: TVec< TQuad< TFlt,TInt,TInt,TInt >,int > const &

        __init__(TFltIntIntIntQuV self, int const & _Vals) -> TFltIntIntIntQuV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltIntIntIntQuV self, int const & _MxVals, int const & _Vals) -> TFltIntIntIntQuV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltIntIntIntQuV self, TFltIntIntIntQu _ValT, int const & _Vals) -> TFltIntIntIntQuV

        Parameters
        ----------
        _ValT: TQuad< TFlt,TInt,TInt,TInt > *
        _Vals: int const &

        __init__(TFltIntIntIntQuV self, TSIn SIn) -> TFltIntIntIntQuV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltIntIntIntQuV_swiginit(self, _snap.new_TFltIntIntIntQuV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltIntIntIntQuV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Load)
    Save = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltIntIntIntQuV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltIntIntIntQuV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltIntIntIntQuV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltIntIntIntQuV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltIntIntIntQuV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltIntIntIntQuV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Empty)
    Len = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltIntIntIntQuV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltIntIntIntQuV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltIntIntIntQuV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltIntIntIntQuV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetI)
    Add = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Add)
    AddV = _swig_new_instance_method(_snap.TFltIntIntIntQuV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltIntIntIntQuV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltIntIntIntQuV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltIntIntIntQuV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltIntIntIntQuV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltIntIntIntQuV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltIntIntIntQuV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Ins)
    Del = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltIntIntIntQuV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltIntIntIntQuV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltIntIntIntQuV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltIntIntIntQuV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltIntIntIntQuV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltIntIntIntQuV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltIntIntIntQuV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltIntIntIntQuV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltIntIntIntQuV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltIntIntIntQuV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltIntIntIntQuV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Union)
    Diff = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltIntIntIntQuV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltIntIntIntQuV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltIntIntIntQuV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltIntIntIntQuV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltIntIntIntQuV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltIntIntIntQuV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltIntIntIntQuV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltIntIntIntQuV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltIntIntIntQuV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltIntIntIntQuV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltIntIntIntQuV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltIntIntIntQuV_GetV)

# Register TFltIntIntIntQuV in _snap:
_snap.TFltIntIntIntQuV_swigregister(TFltIntIntIntQuV)
TFltIntIntIntQuV_SwapI = _snap.TFltIntIntIntQuV_SwapI
TFltIntIntIntQuV_GetV = _snap.TFltIntIntIntQuV_GetV

class TIntStrIntIntQuV(object):
    r"""Proxy of C++ TVec< TIntStrIntIntQu > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntStrIntIntQuV

    def __init__(self, *args):
        r"""
        __init__(TIntStrIntIntQuV self) -> TIntStrIntIntQuV
        __init__(TIntStrIntIntQuV self, TIntStrIntIntQuV Vec) -> TIntStrIntIntQuV

        Parameters
        ----------
        Vec: TVec< TQuad< TInt,TStr,TInt,TInt >,int > const &

        __init__(TIntStrIntIntQuV self, int const & _Vals) -> TIntStrIntIntQuV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntStrIntIntQuV self, int const & _MxVals, int const & _Vals) -> TIntStrIntIntQuV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntStrIntIntQuV self, TIntStrIntIntQu _ValT, int const & _Vals) -> TIntStrIntIntQuV

        Parameters
        ----------
        _ValT: TQuad< TInt,TStr,TInt,TInt > *
        _Vals: int const &

        __init__(TIntStrIntIntQuV self, TSIn SIn) -> TIntStrIntIntQuV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrIntIntQuV_swiginit(self, _snap.new_TIntStrIntIntQuV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrIntIntQuV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Load)
    Save = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntStrIntIntQuV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntStrIntIntQuV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrIntIntQuV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntStrIntIntQuV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntStrIntIntQuV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntStrIntIntQuV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntStrIntIntQuV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntStrIntIntQuV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntStrIntIntQuV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrIntIntQuV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetI)
    Add = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Add)
    AddV = _swig_new_instance_method(_snap.TIntStrIntIntQuV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntStrIntIntQuV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntStrIntIntQuV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntStrIntIntQuV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntStrIntIntQuV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntStrIntIntQuV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntStrIntIntQuV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Ins)
    Del = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntStrIntIntQuV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntStrIntIntQuV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntStrIntIntQuV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntStrIntIntQuV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntStrIntIntQuV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntStrIntIntQuV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntStrIntIntQuV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntStrIntIntQuV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntStrIntIntQuV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntStrIntIntQuV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntStrIntIntQuV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Union)
    Diff = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntStrIntIntQuV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntStrIntIntQuV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntStrIntIntQuV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntStrIntIntQuV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntStrIntIntQuV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntStrIntIntQuV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntStrIntIntQuV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntStrIntIntQuV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntStrIntIntQuV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntStrIntIntQuV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntStrIntIntQuV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntStrIntIntQuV_GetV)

# Register TIntStrIntIntQuV in _snap:
_snap.TIntStrIntIntQuV_swigregister(TIntStrIntIntQuV)
TIntStrIntIntQuV_SwapI = _snap.TIntStrIntIntQuV_SwapI
TIntStrIntIntQuV_GetV = _snap.TIntStrIntIntQuV_GetV

class TIntIntPrPrV(object):
    r"""Proxy of C++ TVec< TIntIntPrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntPrPrV

    def __init__(self, *args):
        r"""
        __init__(TIntIntPrPrV self) -> TIntIntPrPrV
        __init__(TIntIntPrPrV self, TVec< TPair< TInt,TPair< TInt,TInt > >,int > const & Vec) -> TIntIntPrPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TPair< TInt,TInt > >,int > const &

        __init__(TIntIntPrPrV self, int const & _Vals) -> TIntIntPrPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntIntPrPrV self, int const & _MxVals, int const & _Vals) -> TIntIntPrPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntIntPrPrV self, TIntIntPrPr _ValT, int const & _Vals) -> TIntIntPrPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TPair< TInt,TInt > > *
        _Vals: int const &

        __init__(TIntIntPrPrV self, TSIn SIn) -> TIntIntPrPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntPrPrV_swiginit(self, _snap.new_TIntIntPrPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntPrPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntPrPrV_Load)
    Save = _swig_new_instance_method(_snap.TIntIntPrPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntIntPrPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntIntPrPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntPrPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntPrPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntIntPrPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntPrPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntPrPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntIntPrPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntIntPrPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntIntPrPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntIntPrPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntIntPrPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntIntPrPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntIntPrPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntIntPrPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntIntPrPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntIntPrPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntIntPrPrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntPrPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntIntPrPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntIntPrPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntIntPrPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntIntPrPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntIntPrPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntIntPrPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntPrPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntPrPrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntIntPrPrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntIntPrPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntIntPrPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntIntPrPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntIntPrPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntIntPrPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntIntPrPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntIntPrPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntIntPrPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntIntPrPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntIntPrPrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntIntPrPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntIntPrPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntIntPrPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntIntPrPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntIntPrPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntIntPrPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntIntPrPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntIntPrPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntIntPrPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntIntPrPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntIntPrPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntIntPrPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntIntPrPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntIntPrPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntIntPrPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntIntPrPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntIntPrPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntIntPrPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntIntPrPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntIntPrPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntIntPrPrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntIntPrPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntIntPrPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntIntPrPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntIntPrPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntIntPrPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntIntPrPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntIntPrPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntIntPrPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntIntPrPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntIntPrPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntIntPrPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntIntPrPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntIntPrPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntIntPrPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntIntPrPrV_GetV)

# Register TIntIntPrPrV in _snap:
_snap.TIntIntPrPrV_swigregister(TIntIntPrPrV)
TIntIntPrPrV_SwapI = _snap.TIntIntPrPrV_SwapI
TIntIntPrPrV_GetV = _snap.TIntIntPrPrV_GetV

class TIntVecPool(object):
    r"""Proxy of C++ TVecPool< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntVecPool self, TSize const & ExpectVals=0, TSize const & _GrowBy=1000000, bool const & _FastCopy=False, TInt _EmptyVal=TInt()) -> TIntVecPool

        Parameters
        ----------
        ExpectVals: TSize const &
        _GrowBy: TSize const &
        _FastCopy: bool const &
        _EmptyVal: TInt const &

        __init__(TIntVecPool self, TIntVecPool Pool) -> TIntVecPool

        Parameters
        ----------
        Pool: TVecPool< TInt,int > const &

        __init__(TIntVecPool self, TSIn SIn) -> TIntVecPool

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntVecPool_swiginit(self, _snap.new_TIntVecPool(*args))
    __swig_destroy__ = _snap.delete_TIntVecPool
    New = _swig_new_static_method(_snap.TIntVecPool_New)
    Load = _swig_new_static_method(_snap.TIntVecPool_Load)
    Save = _swig_new_instance_method(_snap.TIntVecPool_Save)
    GetVecs = _swig_new_instance_method(_snap.TIntVecPool_GetVecs)
    GetVals = _swig_new_instance_method(_snap.TIntVecPool_GetVals)
    IsVId = _swig_new_instance_method(_snap.TIntVecPool_IsVId)
    Reserved = _swig_new_instance_method(_snap.TIntVecPool_Reserved)
    Reserve = _swig_new_instance_method(_snap.TIntVecPool_Reserve)
    GetEmptyVal = _swig_new_instance_method(_snap.TIntVecPool_GetEmptyVal)
    SetEmptyVal = _swig_new_instance_method(_snap.TIntVecPool_SetEmptyVal)
    GetMemUsed = _swig_new_instance_method(_snap.TIntVecPool_GetMemUsed)
    AddV = _swig_new_instance_method(_snap.TIntVecPool_AddV)
    AddEmptyV = _swig_new_instance_method(_snap.TIntVecPool_AddEmptyV)
    GetVLen = _swig_new_instance_method(_snap.TIntVecPool_GetVLen)
    GetValVPt = _swig_new_instance_method(_snap.TIntVecPool_GetValVPt)
    GetV = _swig_new_instance_method(_snap.TIntVecPool_GetV)
    PutV = _swig_new_instance_method(_snap.TIntVecPool_PutV)
    CompactPool = _swig_new_instance_method(_snap.TIntVecPool_CompactPool)
    ShuffleAll = _swig_new_instance_method(_snap.TIntVecPool_ShuffleAll)
    Clr = _swig_new_instance_method(_snap.TIntVecPool_Clr)
    PutAll = _swig_new_instance_method(_snap.TIntVecPool_PutAll)

# Register TIntVecPool in _snap:
_snap.TIntVecPool_swigregister(TIntVecPool)
TIntVecPool_New = _snap.TIntVecPool_New
TIntVecPool_Load = _snap.TIntVecPool_Load

class PIntVecPool(object):
    r"""Proxy of C++ TPt< TIntVecPool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PIntVecPool_New)
    __swig_destroy__ = _snap.delete_PIntVecPool
    Save = _swig_new_instance_method(_snap.PIntVecPool_Save)
    __deref__ = _swig_new_instance_method(_snap.PIntVecPool___deref__)
    __ref__ = _swig_new_instance_method(_snap.PIntVecPool___ref__)
    __call__ = _swig_new_instance_method(_snap.PIntVecPool___call__)
    Empty = _swig_new_instance_method(_snap.PIntVecPool_Empty)
    Clr = _swig_new_instance_method(_snap.PIntVecPool_Clr)
    GetRefs = _swig_new_instance_method(_snap.PIntVecPool_GetRefs)
    Load = _swig_new_instance_method(_snap.PIntVecPool_Load)
    GetVecs = _swig_new_instance_method(_snap.PIntVecPool_GetVecs)
    GetVals = _swig_new_instance_method(_snap.PIntVecPool_GetVals)
    IsVId = _swig_new_instance_method(_snap.PIntVecPool_IsVId)
    Reserved = _swig_new_instance_method(_snap.PIntVecPool_Reserved)
    Reserve = _swig_new_instance_method(_snap.PIntVecPool_Reserve)
    GetEmptyVal = _swig_new_instance_method(_snap.PIntVecPool_GetEmptyVal)
    SetEmptyVal = _swig_new_instance_method(_snap.PIntVecPool_SetEmptyVal)
    GetMemUsed = _swig_new_instance_method(_snap.PIntVecPool_GetMemUsed)
    AddV = _swig_new_instance_method(_snap.PIntVecPool_AddV)
    AddEmptyV = _swig_new_instance_method(_snap.PIntVecPool_AddEmptyV)
    GetVLen = _swig_new_instance_method(_snap.PIntVecPool_GetVLen)
    GetValVPt = _swig_new_instance_method(_snap.PIntVecPool_GetValVPt)
    GetV = _swig_new_instance_method(_snap.PIntVecPool_GetV)
    PutV = _swig_new_instance_method(_snap.PIntVecPool_PutV)
    CompactPool = _swig_new_instance_method(_snap.PIntVecPool_CompactPool)
    ShuffleAll = _swig_new_instance_method(_snap.PIntVecPool_ShuffleAll)
    PutAll = _swig_new_instance_method(_snap.PIntVecPool_PutAll)

# Register PIntVecPool in _snap:
_snap.PIntVecPool_swigregister(PIntVecPool)
PIntVecPool_New = _snap.PIntVecPool_New

class TFltVP(object):
    r"""Proxy of C++ PVec< TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    V = property(_snap.TFltVP_V_get, _snap.TFltVP_V_set, doc=r"""V : TVec<(TFlt)>""")
    New = _swig_new_static_method(_snap.TFltVP_New)

    def __init__(self, *args):
        r"""
        __init__(TFltVP self) -> TFltVP
        __init__(TFltVP self, TFltVP Vec) -> TFltVP

        Parameters
        ----------
        Vec: PVec< TFlt > const &

        __init__(TFltVP self, int const & MxVals, int const & Vals) -> TFltVP

        Parameters
        ----------
        MxVals: int const &
        Vals: int const &

        __init__(TFltVP self, TFltV _V) -> TFltVP

        Parameters
        ----------
        _V: TVec< TFlt > const &

        __init__(TFltVP self, TSIn SIn) -> TFltVP

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltVP_swiginit(self, _snap.new_TFltVP(*args))
    Load = _swig_new_static_method(_snap.TFltVP_Load)
    Save = _swig_new_instance_method(_snap.TFltVP_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltVP___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltVP___lt__)
    Empty = _swig_new_instance_method(_snap.TFltVP_Empty)
    Len = _swig_new_instance_method(_snap.TFltVP_Len)
    GetVal = _swig_new_instance_method(_snap.TFltVP_GetVal)
    Add = _swig_new_instance_method(_snap.TFltVP_Add)
    __swig_destroy__ = _snap.delete_TFltVP

# Register TFltVP in _snap:
_snap.TFltVP_swigregister(TFltVP)
TFltVP_New = _snap.TFltVP_New
TFltVP_Load = _snap.TFltVP_Load

class PFltV(object):
    r"""Proxy of C++ TPt< TFltVP > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PFltV_New)
    __swig_destroy__ = _snap.delete_PFltV
    Save = _swig_new_instance_method(_snap.PFltV_Save)
    __deref__ = _swig_new_instance_method(_snap.PFltV___deref__)
    __ref__ = _swig_new_instance_method(_snap.PFltV___ref__)
    __call__ = _swig_new_instance_method(_snap.PFltV___call__)
    Empty = _swig_new_instance_method(_snap.PFltV_Empty)
    Clr = _swig_new_instance_method(_snap.PFltV_Clr)
    GetRefs = _swig_new_instance_method(_snap.PFltV_GetRefs)
    V = property(_snap.PFltV_V_get, _snap.PFltV_V_set, doc=r"""V : TVec<(TFlt)>""")
    Load = _swig_new_instance_method(_snap.PFltV_Load)
    __eq__ = _swig_new_instance_method(_snap.PFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.PFltV___lt__)
    Len = _swig_new_instance_method(_snap.PFltV_Len)
    GetVal = _swig_new_instance_method(_snap.PFltV_GetVal)
    Add = _swig_new_instance_method(_snap.PFltV_Add)

# Register PFltV in _snap:
_snap.PFltV_swigregister(PFltV)
PFltV_New = _snap.PFltV_New

class TAscFltVP(object):
    r"""Proxy of C++ PVec< TAscFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    V = property(_snap.TAscFltVP_V_get, _snap.TAscFltVP_V_set, doc=r"""V : TVec<(TAscFlt)>""")
    New = _swig_new_static_method(_snap.TAscFltVP_New)

    def __init__(self, *args):
        r"""
        __init__(TAscFltVP self) -> TAscFltVP
        __init__(TAscFltVP self, TAscFltVP Vec) -> TAscFltVP

        Parameters
        ----------
        Vec: PVec< TAscFlt > const &

        __init__(TAscFltVP self, int const & MxVals, int const & Vals) -> TAscFltVP

        Parameters
        ----------
        MxVals: int const &
        Vals: int const &

        __init__(TAscFltVP self, TAscFltV _V) -> TAscFltVP

        Parameters
        ----------
        _V: TVec< TAscFlt > const &

        __init__(TAscFltVP self, TSIn SIn) -> TAscFltVP

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltVP_swiginit(self, _snap.new_TAscFltVP(*args))
    Load = _swig_new_static_method(_snap.TAscFltVP_Load)
    Save = _swig_new_instance_method(_snap.TAscFltVP_Save)
    __eq__ = _swig_new_instance_method(_snap.TAscFltVP___eq__)
    __lt__ = _swig_new_instance_method(_snap.TAscFltVP___lt__)
    Empty = _swig_new_instance_method(_snap.TAscFltVP_Empty)
    Len = _swig_new_instance_method(_snap.TAscFltVP_Len)
    GetVal = _swig_new_instance_method(_snap.TAscFltVP_GetVal)
    Add = _swig_new_instance_method(_snap.TAscFltVP_Add)
    __swig_destroy__ = _snap.delete_TAscFltVP

# Register TAscFltVP in _snap:
_snap.TAscFltVP_swigregister(TAscFltVP)
TAscFltVP_New = _snap.TAscFltVP_New
TAscFltVP_Load = _snap.TAscFltVP_Load

class PAscFltV(object):
    r"""Proxy of C++ TPt< TAscFltVP > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PAscFltV_New)
    __swig_destroy__ = _snap.delete_PAscFltV
    Save = _swig_new_instance_method(_snap.PAscFltV_Save)
    __deref__ = _swig_new_instance_method(_snap.PAscFltV___deref__)
    __ref__ = _swig_new_instance_method(_snap.PAscFltV___ref__)
    __call__ = _swig_new_instance_method(_snap.PAscFltV___call__)
    Empty = _swig_new_instance_method(_snap.PAscFltV_Empty)
    Clr = _swig_new_instance_method(_snap.PAscFltV_Clr)
    GetRefs = _swig_new_instance_method(_snap.PAscFltV_GetRefs)
    V = property(_snap.PAscFltV_V_get, _snap.PAscFltV_V_set, doc=r"""V : TVec<(TAscFlt)>""")
    Load = _swig_new_instance_method(_snap.PAscFltV_Load)
    __eq__ = _swig_new_instance_method(_snap.PAscFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.PAscFltV___lt__)
    Len = _swig_new_instance_method(_snap.PAscFltV_Len)
    GetVal = _swig_new_instance_method(_snap.PAscFltV_GetVal)
    Add = _swig_new_instance_method(_snap.PAscFltV_Add)

# Register PAscFltV in _snap:
_snap.PAscFltV_swigregister(PAscFltV)
PAscFltV_New = _snap.PAscFltV_New

class TStrVP(object):
    r"""Proxy of C++ PVec< TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    V = property(_snap.TStrVP_V_get, _snap.TStrVP_V_set, doc=r"""V : TVec<(TStr)>""")
    New = _swig_new_static_method(_snap.TStrVP_New)

    def __init__(self, *args):
        r"""
        __init__(TStrVP self) -> TStrVP
        __init__(TStrVP self, TStrVP Vec) -> TStrVP

        Parameters
        ----------
        Vec: PVec< TStr > const &

        __init__(TStrVP self, int const & MxVals, int const & Vals) -> TStrVP

        Parameters
        ----------
        MxVals: int const &
        Vals: int const &

        __init__(TStrVP self, TStrV _V) -> TStrVP

        Parameters
        ----------
        _V: TVec< TStr > const &

        __init__(TStrVP self, TSIn SIn) -> TStrVP

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVP_swiginit(self, _snap.new_TStrVP(*args))
    Load = _swig_new_static_method(_snap.TStrVP_Load)
    Save = _swig_new_instance_method(_snap.TStrVP_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrVP___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVP___lt__)
    Empty = _swig_new_instance_method(_snap.TStrVP_Empty)
    Len = _swig_new_instance_method(_snap.TStrVP_Len)
    GetVal = _swig_new_instance_method(_snap.TStrVP_GetVal)
    Add = _swig_new_instance_method(_snap.TStrVP_Add)
    __swig_destroy__ = _snap.delete_TStrVP

# Register TStrVP in _snap:
_snap.TStrVP_swigregister(TStrVP)
TStrVP_New = _snap.TStrVP_New
TStrVP_Load = _snap.TStrVP_Load

class PStrV(object):
    r"""Proxy of C++ TPt< TStrVP > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PStrV_New)
    __swig_destroy__ = _snap.delete_PStrV
    Save = _swig_new_instance_method(_snap.PStrV_Save)
    __deref__ = _swig_new_instance_method(_snap.PStrV___deref__)
    __ref__ = _swig_new_instance_method(_snap.PStrV___ref__)
    __call__ = _swig_new_instance_method(_snap.PStrV___call__)
    Empty = _swig_new_instance_method(_snap.PStrV_Empty)
    Clr = _swig_new_instance_method(_snap.PStrV_Clr)
    GetRefs = _swig_new_instance_method(_snap.PStrV_GetRefs)
    V = property(_snap.PStrV_V_get, _snap.PStrV_V_set, doc=r"""V : TVec<(TStr)>""")
    Load = _swig_new_instance_method(_snap.PStrV_Load)
    __eq__ = _swig_new_instance_method(_snap.PStrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.PStrV___lt__)
    Len = _swig_new_instance_method(_snap.PStrV_Len)
    GetVal = _swig_new_instance_method(_snap.PStrV_GetVal)
    Add = _swig_new_instance_method(_snap.PStrV_Add)

# Register PStrV in _snap:
_snap.PStrV_swigregister(PStrV)
PStrV_New = _snap.PStrV_New

class TBoolVV(object):
    r"""Proxy of C++ TVVec< TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TBoolVV self) -> TBoolVV
        __init__(TBoolVV self, TBoolVV Vec) -> TBoolVV

        Parameters
        ----------
        Vec: TVVec< TBool > const &

        __init__(TBoolVV self, int const & _XDim, int const & _YDim) -> TBoolVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &

        __init__(TBoolVV self, TBoolV _ValV, int const & _XDim, int const & _YDim) -> TBoolVV

        Parameters
        ----------
        _ValV: TVec< TBool,int > const &
        _XDim: int const &
        _YDim: int const &

        __init__(TBoolVV self, TSIn SIn) -> TBoolVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBoolVV_swiginit(self, _snap.new_TBoolVV(*args))
    Load = _swig_new_instance_method(_snap.TBoolVV_Load)
    Save = _swig_new_instance_method(_snap.TBoolVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TBoolVV___eq__)
    Empty = _swig_new_instance_method(_snap.TBoolVV_Empty)
    Clr = _swig_new_instance_method(_snap.TBoolVV_Clr)
    Gen = _swig_new_instance_method(_snap.TBoolVV_Gen)
    GetXDim = _swig_new_instance_method(_snap.TBoolVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TBoolVV_GetYDim)
    GetRows = _swig_new_instance_method(_snap.TBoolVV_GetRows)
    GetCols = _swig_new_instance_method(_snap.TBoolVV_GetCols)
    Get1DVec = _swig_new_instance_method(_snap.TBoolVV_Get1DVec)
    At = _swig_new_instance_method(_snap.TBoolVV_At)
    __call__ = _swig_new_instance_method(_snap.TBoolVV___call__)
    PutXY = _swig_new_instance_method(_snap.TBoolVV_PutXY)
    PutAll = _swig_new_instance_method(_snap.TBoolVV_PutAll)
    PutX = _swig_new_instance_method(_snap.TBoolVV_PutX)
    PutY = _swig_new_instance_method(_snap.TBoolVV_PutY)
    GetXY = _swig_new_instance_method(_snap.TBoolVV_GetXY)
    GetRow = _swig_new_instance_method(_snap.TBoolVV_GetRow)
    GetCol = _swig_new_instance_method(_snap.TBoolVV_GetCol)
    SwapX = _swig_new_instance_method(_snap.TBoolVV_SwapX)
    SwapY = _swig_new_instance_method(_snap.TBoolVV_SwapY)
    Swap = _swig_new_instance_method(_snap.TBoolVV_Swap)
    ShuffleX = _swig_new_instance_method(_snap.TBoolVV_ShuffleX)
    ShuffleY = _swig_new_instance_method(_snap.TBoolVV_ShuffleY)
    GetMxValXY = _swig_new_instance_method(_snap.TBoolVV_GetMxValXY)
    CopyFrom = _swig_new_instance_method(_snap.TBoolVV_CopyFrom)
    AddXDim = _swig_new_instance_method(_snap.TBoolVV_AddXDim)
    AddYDim = _swig_new_instance_method(_snap.TBoolVV_AddYDim)
    DelX = _swig_new_instance_method(_snap.TBoolVV_DelX)
    DelY = _swig_new_instance_method(_snap.TBoolVV_DelY)
    __swig_destroy__ = _snap.delete_TBoolVV

# Register TBoolVV in _snap:
_snap.TBoolVV_swigregister(TBoolVV)

class TChVV(object):
    r"""Proxy of C++ TVVec< TCh > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TChVV self) -> TChVV
        __init__(TChVV self, TChVV Vec) -> TChVV

        Parameters
        ----------
        Vec: TVVec< TCh > const &

        __init__(TChVV self, int const & _XDim, int const & _YDim) -> TChVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &

        __init__(TChVV self, TChV _ValV, int const & _XDim, int const & _YDim) -> TChVV

        Parameters
        ----------
        _ValV: TVec< TCh,int > const &
        _XDim: int const &
        _YDim: int const &

        __init__(TChVV self, TSIn SIn) -> TChVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChVV_swiginit(self, _snap.new_TChVV(*args))
    Load = _swig_new_instance_method(_snap.TChVV_Load)
    Save = _swig_new_instance_method(_snap.TChVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TChVV___eq__)
    Empty = _swig_new_instance_method(_snap.TChVV_Empty)
    Clr = _swig_new_instance_method(_snap.TChVV_Clr)
    Gen = _swig_new_instance_method(_snap.TChVV_Gen)
    GetXDim = _swig_new_instance_method(_snap.TChVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TChVV_GetYDim)
    GetRows = _swig_new_instance_method(_snap.TChVV_GetRows)
    GetCols = _swig_new_instance_method(_snap.TChVV_GetCols)
    Get1DVec = _swig_new_instance_method(_snap.TChVV_Get1DVec)
    At = _swig_new_instance_method(_snap.TChVV_At)
    __call__ = _swig_new_instance_method(_snap.TChVV___call__)
    PutXY = _swig_new_instance_method(_snap.TChVV_PutXY)
    PutAll = _swig_new_instance_method(_snap.TChVV_PutAll)
    PutX = _swig_new_instance_method(_snap.TChVV_PutX)
    PutY = _swig_new_instance_method(_snap.TChVV_PutY)
    GetXY = _swig_new_instance_method(_snap.TChVV_GetXY)
    GetRow = _swig_new_instance_method(_snap.TChVV_GetRow)
    GetCol = _swig_new_instance_method(_snap.TChVV_GetCol)
    SwapX = _swig_new_instance_method(_snap.TChVV_SwapX)
    SwapY = _swig_new_instance_method(_snap.TChVV_SwapY)
    Swap = _swig_new_instance_method(_snap.TChVV_Swap)
    ShuffleX = _swig_new_instance_method(_snap.TChVV_ShuffleX)
    ShuffleY = _swig_new_instance_method(_snap.TChVV_ShuffleY)
    GetMxValXY = _swig_new_instance_method(_snap.TChVV_GetMxValXY)
    CopyFrom = _swig_new_instance_method(_snap.TChVV_CopyFrom)
    AddXDim = _swig_new_instance_method(_snap.TChVV_AddXDim)
    AddYDim = _swig_new_instance_method(_snap.TChVV_AddYDim)
    DelX = _swig_new_instance_method(_snap.TChVV_DelX)
    DelY = _swig_new_instance_method(_snap.TChVV_DelY)
    __swig_destroy__ = _snap.delete_TChVV

# Register TChVV in _snap:
_snap.TChVV_swigregister(TChVV)

class TIntVV(object):
    r"""Proxy of C++ TVVec< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntVV self) -> TIntVV
        __init__(TIntVV self, TIntVV Vec) -> TIntVV

        Parameters
        ----------
        Vec: TVVec< TInt > const &

        __init__(TIntVV self, int const & _XDim, int const & _YDim) -> TIntVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &

        __init__(TIntVV self, TIntV _ValV, int const & _XDim, int const & _YDim) -> TIntVV

        Parameters
        ----------
        _ValV: TVec< TInt,int > const &
        _XDim: int const &
        _YDim: int const &

        __init__(TIntVV self, TSIn SIn) -> TIntVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntVV_swiginit(self, _snap.new_TIntVV(*args))
    Load = _swig_new_instance_method(_snap.TIntVV_Load)
    Save = _swig_new_instance_method(_snap.TIntVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntVV___eq__)
    Empty = _swig_new_instance_method(_snap.TIntVV_Empty)
    Clr = _swig_new_instance_method(_snap.TIntVV_Clr)
    Gen = _swig_new_instance_method(_snap.TIntVV_Gen)
    GetXDim = _swig_new_instance_method(_snap.TIntVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TIntVV_GetYDim)
    GetRows = _swig_new_instance_method(_snap.TIntVV_GetRows)
    GetCols = _swig_new_instance_method(_snap.TIntVV_GetCols)
    Get1DVec = _swig_new_instance_method(_snap.TIntVV_Get1DVec)
    At = _swig_new_instance_method(_snap.TIntVV_At)
    __call__ = _swig_new_instance_method(_snap.TIntVV___call__)
    PutXY = _swig_new_instance_method(_snap.TIntVV_PutXY)
    PutAll = _swig_new_instance_method(_snap.TIntVV_PutAll)
    PutX = _swig_new_instance_method(_snap.TIntVV_PutX)
    PutY = _swig_new_instance_method(_snap.TIntVV_PutY)
    GetXY = _swig_new_instance_method(_snap.TIntVV_GetXY)
    GetRow = _swig_new_instance_method(_snap.TIntVV_GetRow)
    GetCol = _swig_new_instance_method(_snap.TIntVV_GetCol)
    SwapX = _swig_new_instance_method(_snap.TIntVV_SwapX)
    SwapY = _swig_new_instance_method(_snap.TIntVV_SwapY)
    Swap = _swig_new_instance_method(_snap.TIntVV_Swap)
    ShuffleX = _swig_new_instance_method(_snap.TIntVV_ShuffleX)
    ShuffleY = _swig_new_instance_method(_snap.TIntVV_ShuffleY)
    GetMxValXY = _swig_new_instance_method(_snap.TIntVV_GetMxValXY)
    CopyFrom = _swig_new_instance_method(_snap.TIntVV_CopyFrom)
    AddXDim = _swig_new_instance_method(_snap.TIntVV_AddXDim)
    AddYDim = _swig_new_instance_method(_snap.TIntVV_AddYDim)
    DelX = _swig_new_instance_method(_snap.TIntVV_DelX)
    DelY = _swig_new_instance_method(_snap.TIntVV_DelY)
    __swig_destroy__ = _snap.delete_TIntVV

# Register TIntVV in _snap:
_snap.TIntVV_swigregister(TIntVV)

class TSFltVV(object):
    r"""Proxy of C++ TVVec< TSFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TSFltVV self) -> TSFltVV
        __init__(TSFltVV self, TSFltVV Vec) -> TSFltVV

        Parameters
        ----------
        Vec: TVVec< TSFlt > const &

        __init__(TSFltVV self, int const & _XDim, int const & _YDim) -> TSFltVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &

        __init__(TSFltVV self, TSFltV _ValV, int const & _XDim, int const & _YDim) -> TSFltVV

        Parameters
        ----------
        _ValV: TVec< TSFlt,int > const &
        _XDim: int const &
        _YDim: int const &

        __init__(TSFltVV self, TSIn SIn) -> TSFltVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TSFltVV_swiginit(self, _snap.new_TSFltVV(*args))
    Load = _swig_new_instance_method(_snap.TSFltVV_Load)
    Save = _swig_new_instance_method(_snap.TSFltVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TSFltVV___eq__)
    Empty = _swig_new_instance_method(_snap.TSFltVV_Empty)
    Clr = _swig_new_instance_method(_snap.TSFltVV_Clr)
    Gen = _swig_new_instance_method(_snap.TSFltVV_Gen)
    GetXDim = _swig_new_instance_method(_snap.TSFltVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TSFltVV_GetYDim)
    GetRows = _swig_new_instance_method(_snap.TSFltVV_GetRows)
    GetCols = _swig_new_instance_method(_snap.TSFltVV_GetCols)
    Get1DVec = _swig_new_instance_method(_snap.TSFltVV_Get1DVec)
    At = _swig_new_instance_method(_snap.TSFltVV_At)
    __call__ = _swig_new_instance_method(_snap.TSFltVV___call__)
    PutXY = _swig_new_instance_method(_snap.TSFltVV_PutXY)
    PutAll = _swig_new_instance_method(_snap.TSFltVV_PutAll)
    PutX = _swig_new_instance_method(_snap.TSFltVV_PutX)
    PutY = _swig_new_instance_method(_snap.TSFltVV_PutY)
    GetXY = _swig_new_instance_method(_snap.TSFltVV_GetXY)
    GetRow = _swig_new_instance_method(_snap.TSFltVV_GetRow)
    GetCol = _swig_new_instance_method(_snap.TSFltVV_GetCol)
    SwapX = _swig_new_instance_method(_snap.TSFltVV_SwapX)
    SwapY = _swig_new_instance_method(_snap.TSFltVV_SwapY)
    Swap = _swig_new_instance_method(_snap.TSFltVV_Swap)
    ShuffleX = _swig_new_instance_method(_snap.TSFltVV_ShuffleX)
    ShuffleY = _swig_new_instance_method(_snap.TSFltVV_ShuffleY)
    GetMxValXY = _swig_new_instance_method(_snap.TSFltVV_GetMxValXY)
    CopyFrom = _swig_new_instance_method(_snap.TSFltVV_CopyFrom)
    AddXDim = _swig_new_instance_method(_snap.TSFltVV_AddXDim)
    AddYDim = _swig_new_instance_method(_snap.TSFltVV_AddYDim)
    DelX = _swig_new_instance_method(_snap.TSFltVV_DelX)
    DelY = _swig_new_instance_method(_snap.TSFltVV_DelY)
    __swig_destroy__ = _snap.delete_TSFltVV

# Register TSFltVV in _snap:
_snap.TSFltVV_swigregister(TSFltVV)

class TFltVV(object):
    r"""Proxy of C++ TVVec< TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFltVV self) -> TFltVV
        __init__(TFltVV self, TFltVV Vec) -> TFltVV

        Parameters
        ----------
        Vec: TVVec< TFlt > const &

        __init__(TFltVV self, int const & _XDim, int const & _YDim) -> TFltVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &

        __init__(TFltVV self, TFltV _ValV, int const & _XDim, int const & _YDim) -> TFltVV

        Parameters
        ----------
        _ValV: TVec< TFlt,int > const &
        _XDim: int const &
        _YDim: int const &

        __init__(TFltVV self, TSIn SIn) -> TFltVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltVV_swiginit(self, _snap.new_TFltVV(*args))
    Load = _swig_new_instance_method(_snap.TFltVV_Load)
    Save = _swig_new_instance_method(_snap.TFltVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltVV___eq__)
    Empty = _swig_new_instance_method(_snap.TFltVV_Empty)
    Clr = _swig_new_instance_method(_snap.TFltVV_Clr)
    Gen = _swig_new_instance_method(_snap.TFltVV_Gen)
    GetXDim = _swig_new_instance_method(_snap.TFltVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TFltVV_GetYDim)
    GetRows = _swig_new_instance_method(_snap.TFltVV_GetRows)
    GetCols = _swig_new_instance_method(_snap.TFltVV_GetCols)
    Get1DVec = _swig_new_instance_method(_snap.TFltVV_Get1DVec)
    At = _swig_new_instance_method(_snap.TFltVV_At)
    __call__ = _swig_new_instance_method(_snap.TFltVV___call__)
    PutXY = _swig_new_instance_method(_snap.TFltVV_PutXY)
    PutAll = _swig_new_instance_method(_snap.TFltVV_PutAll)
    PutX = _swig_new_instance_method(_snap.TFltVV_PutX)
    PutY = _swig_new_instance_method(_snap.TFltVV_PutY)
    GetXY = _swig_new_instance_method(_snap.TFltVV_GetXY)
    GetRow = _swig_new_instance_method(_snap.TFltVV_GetRow)
    GetCol = _swig_new_instance_method(_snap.TFltVV_GetCol)
    SwapX = _swig_new_instance_method(_snap.TFltVV_SwapX)
    SwapY = _swig_new_instance_method(_snap.TFltVV_SwapY)
    Swap = _swig_new_instance_method(_snap.TFltVV_Swap)
    ShuffleX = _swig_new_instance_method(_snap.TFltVV_ShuffleX)
    ShuffleY = _swig_new_instance_method(_snap.TFltVV_ShuffleY)
    GetMxValXY = _swig_new_instance_method(_snap.TFltVV_GetMxValXY)
    CopyFrom = _swig_new_instance_method(_snap.TFltVV_CopyFrom)
    AddXDim = _swig_new_instance_method(_snap.TFltVV_AddXDim)
    AddYDim = _swig_new_instance_method(_snap.TFltVV_AddYDim)
    DelX = _swig_new_instance_method(_snap.TFltVV_DelX)
    DelY = _swig_new_instance_method(_snap.TFltVV_DelY)
    __swig_destroy__ = _snap.delete_TFltVV

# Register TFltVV in _snap:
_snap.TFltVV_swigregister(TFltVV)

class TStrVV(object):
    r"""Proxy of C++ TVVec< TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrVV self) -> TStrVV
        __init__(TStrVV self, TStrVV Vec) -> TStrVV

        Parameters
        ----------
        Vec: TVVec< TStr > const &

        __init__(TStrVV self, int const & _XDim, int const & _YDim) -> TStrVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &

        __init__(TStrVV self, TStrV _ValV, int const & _XDim, int const & _YDim) -> TStrVV

        Parameters
        ----------
        _ValV: TVec< TStr,int > const &
        _XDim: int const &
        _YDim: int const &

        __init__(TStrVV self, TSIn SIn) -> TStrVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVV_swiginit(self, _snap.new_TStrVV(*args))
    Load = _swig_new_instance_method(_snap.TStrVV_Load)
    Save = _swig_new_instance_method(_snap.TStrVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrVV___eq__)
    Empty = _swig_new_instance_method(_snap.TStrVV_Empty)
    Clr = _swig_new_instance_method(_snap.TStrVV_Clr)
    Gen = _swig_new_instance_method(_snap.TStrVV_Gen)
    GetXDim = _swig_new_instance_method(_snap.TStrVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TStrVV_GetYDim)
    GetRows = _swig_new_instance_method(_snap.TStrVV_GetRows)
    GetCols = _swig_new_instance_method(_snap.TStrVV_GetCols)
    Get1DVec = _swig_new_instance_method(_snap.TStrVV_Get1DVec)
    At = _swig_new_instance_method(_snap.TStrVV_At)
    __call__ = _swig_new_instance_method(_snap.TStrVV___call__)
    PutXY = _swig_new_instance_method(_snap.TStrVV_PutXY)
    PutAll = _swig_new_instance_method(_snap.TStrVV_PutAll)
    PutX = _swig_new_instance_method(_snap.TStrVV_PutX)
    PutY = _swig_new_instance_method(_snap.TStrVV_PutY)
    GetXY = _swig_new_instance_method(_snap.TStrVV_GetXY)
    GetRow = _swig_new_instance_method(_snap.TStrVV_GetRow)
    GetCol = _swig_new_instance_method(_snap.TStrVV_GetCol)
    SwapX = _swig_new_instance_method(_snap.TStrVV_SwapX)
    SwapY = _swig_new_instance_method(_snap.TStrVV_SwapY)
    Swap = _swig_new_instance_method(_snap.TStrVV_Swap)
    ShuffleX = _swig_new_instance_method(_snap.TStrVV_ShuffleX)
    ShuffleY = _swig_new_instance_method(_snap.TStrVV_ShuffleY)
    GetMxValXY = _swig_new_instance_method(_snap.TStrVV_GetMxValXY)
    CopyFrom = _swig_new_instance_method(_snap.TStrVV_CopyFrom)
    AddXDim = _swig_new_instance_method(_snap.TStrVV_AddXDim)
    AddYDim = _swig_new_instance_method(_snap.TStrVV_AddYDim)
    DelX = _swig_new_instance_method(_snap.TStrVV_DelX)
    DelY = _swig_new_instance_method(_snap.TStrVV_DelY)
    __swig_destroy__ = _snap.delete_TStrVV

# Register TStrVV in _snap:
_snap.TStrVV_swigregister(TStrVV)

class TIntPrVV(object):
    r"""Proxy of C++ TVVec< TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrVV self) -> TIntPrVV
        __init__(TIntPrVV self, TIntPrVV Vec) -> TIntPrVV

        Parameters
        ----------
        Vec: TVVec< TIntPr > const &

        __init__(TIntPrVV self, int const & _XDim, int const & _YDim) -> TIntPrVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &

        __init__(TIntPrVV self, TIntPrV _ValV, int const & _XDim, int const & _YDim) -> TIntPrVV

        Parameters
        ----------
        _ValV: TVec< TPair< TInt,TInt >,int > const &
        _XDim: int const &
        _YDim: int const &

        __init__(TIntPrVV self, TSIn SIn) -> TIntPrVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrVV_swiginit(self, _snap.new_TIntPrVV(*args))
    Load = _swig_new_instance_method(_snap.TIntPrVV_Load)
    Save = _swig_new_instance_method(_snap.TIntPrVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrVV___eq__)
    Empty = _swig_new_instance_method(_snap.TIntPrVV_Empty)
    Clr = _swig_new_instance_method(_snap.TIntPrVV_Clr)
    Gen = _swig_new_instance_method(_snap.TIntPrVV_Gen)
    GetXDim = _swig_new_instance_method(_snap.TIntPrVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TIntPrVV_GetYDim)
    GetRows = _swig_new_instance_method(_snap.TIntPrVV_GetRows)
    GetCols = _swig_new_instance_method(_snap.TIntPrVV_GetCols)
    Get1DVec = _swig_new_instance_method(_snap.TIntPrVV_Get1DVec)
    At = _swig_new_instance_method(_snap.TIntPrVV_At)
    __call__ = _swig_new_instance_method(_snap.TIntPrVV___call__)
    PutXY = _swig_new_instance_method(_snap.TIntPrVV_PutXY)
    PutAll = _swig_new_instance_method(_snap.TIntPrVV_PutAll)
    PutX = _swig_new_instance_method(_snap.TIntPrVV_PutX)
    PutY = _swig_new_instance_method(_snap.TIntPrVV_PutY)
    GetXY = _swig_new_instance_method(_snap.TIntPrVV_GetXY)
    GetRow = _swig_new_instance_method(_snap.TIntPrVV_GetRow)
    GetCol = _swig_new_instance_method(_snap.TIntPrVV_GetCol)
    SwapX = _swig_new_instance_method(_snap.TIntPrVV_SwapX)
    SwapY = _swig_new_instance_method(_snap.TIntPrVV_SwapY)
    Swap = _swig_new_instance_method(_snap.TIntPrVV_Swap)
    ShuffleX = _swig_new_instance_method(_snap.TIntPrVV_ShuffleX)
    ShuffleY = _swig_new_instance_method(_snap.TIntPrVV_ShuffleY)
    GetMxValXY = _swig_new_instance_method(_snap.TIntPrVV_GetMxValXY)
    CopyFrom = _swig_new_instance_method(_snap.TIntPrVV_CopyFrom)
    AddXDim = _swig_new_instance_method(_snap.TIntPrVV_AddXDim)
    AddYDim = _swig_new_instance_method(_snap.TIntPrVV_AddYDim)
    DelX = _swig_new_instance_method(_snap.TIntPrVV_DelX)
    DelY = _swig_new_instance_method(_snap.TIntPrVV_DelY)
    __swig_destroy__ = _snap.delete_TIntPrVV

# Register TIntPrVV in _snap:
_snap.TIntPrVV_swigregister(TIntPrVV)

class TIntVVV(object):
    r"""Proxy of C++ TVVVec< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntVVV self) -> TIntVVV
        __init__(TIntVVV self, TIntVVV Vec) -> TIntVVV

        Parameters
        ----------
        Vec: TVVVec< TInt > const &

        __init__(TIntVVV self, int const & _XDim, int const & _YDim, int const & _ZDim) -> TIntVVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &
        _ZDim: int const &

        __init__(TIntVVV self, TSIn SIn) -> TIntVVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntVVV_swiginit(self, _snap.new_TIntVVV(*args))
    Save = _swig_new_instance_method(_snap.TIntVVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntVVV___eq__)
    Empty = _swig_new_instance_method(_snap.TIntVVV_Empty)
    Clr = _swig_new_instance_method(_snap.TIntVVV_Clr)
    Gen = _swig_new_instance_method(_snap.TIntVVV_Gen)
    At = _swig_new_instance_method(_snap.TIntVVV_At)
    __call__ = _swig_new_instance_method(_snap.TIntVVV___call__)
    GetXDim = _swig_new_instance_method(_snap.TIntVVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TIntVVV_GetYDim)
    GetZDim = _swig_new_instance_method(_snap.TIntVVV_GetZDim)
    __swig_destroy__ = _snap.delete_TIntVVV

# Register TIntVVV in _snap:
_snap.TIntVVV_swigregister(TIntVVV)

class TFltVVV(object):
    r"""Proxy of C++ TVVVec< TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFltVVV self) -> TFltVVV
        __init__(TFltVVV self, TFltVVV Vec) -> TFltVVV

        Parameters
        ----------
        Vec: TVVVec< TFlt > const &

        __init__(TFltVVV self, int const & _XDim, int const & _YDim, int const & _ZDim) -> TFltVVV

        Parameters
        ----------
        _XDim: int const &
        _YDim: int const &
        _ZDim: int const &

        __init__(TFltVVV self, TSIn SIn) -> TFltVVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltVVV_swiginit(self, _snap.new_TFltVVV(*args))
    Save = _swig_new_instance_method(_snap.TFltVVV_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltVVV___eq__)
    Empty = _swig_new_instance_method(_snap.TFltVVV_Empty)
    Clr = _swig_new_instance_method(_snap.TFltVVV_Clr)
    Gen = _swig_new_instance_method(_snap.TFltVVV_Gen)
    At = _swig_new_instance_method(_snap.TFltVVV_At)
    __call__ = _swig_new_instance_method(_snap.TFltVVV___call__)
    GetXDim = _swig_new_instance_method(_snap.TFltVVV_GetXDim)
    GetYDim = _swig_new_instance_method(_snap.TFltVVV_GetYDim)
    GetZDim = _swig_new_instance_method(_snap.TFltVVV_GetZDim)
    __swig_destroy__ = _snap.delete_TFltVVV

# Register TFltVVV in _snap:
_snap.TFltVVV_swigregister(TFltVVV)

class TIntTree(object):
    r"""Proxy of C++ TTree< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntTree self) -> TIntTree
        __init__(TIntTree self, TIntTree Tree) -> TIntTree

        Parameters
        ----------
        Tree: TTree< TInt > const &

        __init__(TIntTree self, TSIn SIn) -> TIntTree

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntTree_swiginit(self, _snap.new_TIntTree(*args))
    Save = _swig_new_instance_method(_snap.TIntTree_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntTree___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTree___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntTree_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntTree_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntTree_GetMemUsed)
    Clr = _swig_new_instance_method(_snap.TIntTree_Clr)
    AddNode = _swig_new_instance_method(_snap.TIntTree_AddNode)
    AddRoot = _swig_new_instance_method(_snap.TIntTree_AddRoot)
    GetNodes = _swig_new_instance_method(_snap.TIntTree_GetNodes)
    GetNodeIdV = _swig_new_instance_method(_snap.TIntTree_GetNodeIdV)
    GetParentNodeId = _swig_new_instance_method(_snap.TIntTree_GetParentNodeId)
    GetChildren = _swig_new_instance_method(_snap.TIntTree_GetChildren)
    GetChildNodeId = _swig_new_instance_method(_snap.TIntTree_GetChildNodeId)
    GetNodeVal = _swig_new_instance_method(_snap.TIntTree_GetNodeVal)
    GenRandomTree = _swig_new_instance_method(_snap.TIntTree_GenRandomTree)
    DelNode = _swig_new_instance_method(_snap.TIntTree_DelNode)
    CopyTree = _swig_new_instance_method(_snap.TIntTree_CopyTree)
    WrTree = _swig_new_instance_method(_snap.TIntTree_WrTree)
    __swig_destroy__ = _snap.delete_TIntTree

# Register TIntTree in _snap:
_snap.TIntTree_swigregister(TIntTree)

class TFltTree(object):
    r"""Proxy of C++ TTree< TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFltTree self) -> TFltTree
        __init__(TFltTree self, TFltTree Tree) -> TFltTree

        Parameters
        ----------
        Tree: TTree< TFlt > const &

        __init__(TFltTree self, TSIn SIn) -> TFltTree

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltTree_swiginit(self, _snap.new_TFltTree(*args))
    Save = _swig_new_instance_method(_snap.TFltTree_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltTree___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltTree___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltTree_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltTree_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TFltTree_GetMemUsed)
    Clr = _swig_new_instance_method(_snap.TFltTree_Clr)
    AddNode = _swig_new_instance_method(_snap.TFltTree_AddNode)
    AddRoot = _swig_new_instance_method(_snap.TFltTree_AddRoot)
    GetNodes = _swig_new_instance_method(_snap.TFltTree_GetNodes)
    GetNodeIdV = _swig_new_instance_method(_snap.TFltTree_GetNodeIdV)
    GetParentNodeId = _swig_new_instance_method(_snap.TFltTree_GetParentNodeId)
    GetChildren = _swig_new_instance_method(_snap.TFltTree_GetChildren)
    GetChildNodeId = _swig_new_instance_method(_snap.TFltTree_GetChildNodeId)
    GetNodeVal = _swig_new_instance_method(_snap.TFltTree_GetNodeVal)
    GenRandomTree = _swig_new_instance_method(_snap.TFltTree_GenRandomTree)
    DelNode = _swig_new_instance_method(_snap.TFltTree_DelNode)
    CopyTree = _swig_new_instance_method(_snap.TFltTree_CopyTree)
    WrTree = _swig_new_instance_method(_snap.TFltTree_WrTree)
    __swig_destroy__ = _snap.delete_TFltTree

# Register TFltTree in _snap:
_snap.TFltTree_swigregister(TFltTree)

class TStrTree(object):
    r"""Proxy of C++ TTree< TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrTree self) -> TStrTree
        __init__(TStrTree self, TStrTree Tree) -> TStrTree

        Parameters
        ----------
        Tree: TTree< TStr > const &

        __init__(TStrTree self, TSIn SIn) -> TStrTree

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrTree_swiginit(self, _snap.new_TStrTree(*args))
    Save = _swig_new_instance_method(_snap.TStrTree_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrTree___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrTree___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrTree_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrTree_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrTree_GetMemUsed)
    Clr = _swig_new_instance_method(_snap.TStrTree_Clr)
    AddNode = _swig_new_instance_method(_snap.TStrTree_AddNode)
    AddRoot = _swig_new_instance_method(_snap.TStrTree_AddRoot)
    GetNodes = _swig_new_instance_method(_snap.TStrTree_GetNodes)
    GetNodeIdV = _swig_new_instance_method(_snap.TStrTree_GetNodeIdV)
    GetParentNodeId = _swig_new_instance_method(_snap.TStrTree_GetParentNodeId)
    GetChildren = _swig_new_instance_method(_snap.TStrTree_GetChildren)
    GetChildNodeId = _swig_new_instance_method(_snap.TStrTree_GetChildNodeId)
    GetNodeVal = _swig_new_instance_method(_snap.TStrTree_GetNodeVal)
    GenRandomTree = _swig_new_instance_method(_snap.TStrTree_GenRandomTree)
    DelNode = _swig_new_instance_method(_snap.TStrTree_DelNode)
    CopyTree = _swig_new_instance_method(_snap.TStrTree_CopyTree)
    WrTree = _swig_new_instance_method(_snap.TStrTree_WrTree)
    __swig_destroy__ = _snap.delete_TStrTree

# Register TStrTree in _snap:
_snap.TStrTree_swigregister(TStrTree)

class TStrIntPrTree(object):
    r"""Proxy of C++ TTree< TStrIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrTree self) -> TStrIntPrTree
        __init__(TStrIntPrTree self, TStrIntPrTree Tree) -> TStrIntPrTree

        Parameters
        ----------
        Tree: TTree< TStrIntPr > const &

        __init__(TStrIntPrTree self, TSIn SIn) -> TStrIntPrTree

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPrTree_swiginit(self, _snap.new_TStrIntPrTree(*args))
    Save = _swig_new_instance_method(_snap.TStrIntPrTree_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrTree___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrTree___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntPrTree_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntPrTree_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPrTree_GetMemUsed)
    Clr = _swig_new_instance_method(_snap.TStrIntPrTree_Clr)
    AddNode = _swig_new_instance_method(_snap.TStrIntPrTree_AddNode)
    AddRoot = _swig_new_instance_method(_snap.TStrIntPrTree_AddRoot)
    GetNodes = _swig_new_instance_method(_snap.TStrIntPrTree_GetNodes)
    GetNodeIdV = _swig_new_instance_method(_snap.TStrIntPrTree_GetNodeIdV)
    GetParentNodeId = _swig_new_instance_method(_snap.TStrIntPrTree_GetParentNodeId)
    GetChildren = _swig_new_instance_method(_snap.TStrIntPrTree_GetChildren)
    GetChildNodeId = _swig_new_instance_method(_snap.TStrIntPrTree_GetChildNodeId)
    GetNodeVal = _swig_new_instance_method(_snap.TStrIntPrTree_GetNodeVal)
    GenRandomTree = _swig_new_instance_method(_snap.TStrIntPrTree_GenRandomTree)
    DelNode = _swig_new_instance_method(_snap.TStrIntPrTree_DelNode)
    CopyTree = _swig_new_instance_method(_snap.TStrIntPrTree_CopyTree)
    WrTree = _swig_new_instance_method(_snap.TStrIntPrTree_WrTree)
    __swig_destroy__ = _snap.delete_TStrIntPrTree

# Register TStrIntPrTree in _snap:
_snap.TStrIntPrTree_swigregister(TStrIntPrTree)

class TStrIntStrVTrTree(object):
    r"""Proxy of C++ TTree< TStrIntStrVTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntStrVTrTree self) -> TStrIntStrVTrTree
        __init__(TStrIntStrVTrTree self, TStrIntStrVTrTree Tree) -> TStrIntStrVTrTree

        Parameters
        ----------
        Tree: TTree< TStrIntStrVTr > const &

        __init__(TStrIntStrVTrTree self, TSIn SIn) -> TStrIntStrVTrTree

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntStrVTrTree_swiginit(self, _snap.new_TStrIntStrVTrTree(*args))
    Save = _swig_new_instance_method(_snap.TStrIntStrVTrTree_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntStrVTrTree___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntStrVTrTree___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetMemUsed)
    Clr = _swig_new_instance_method(_snap.TStrIntStrVTrTree_Clr)
    AddNode = _swig_new_instance_method(_snap.TStrIntStrVTrTree_AddNode)
    AddRoot = _swig_new_instance_method(_snap.TStrIntStrVTrTree_AddRoot)
    GetNodes = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetNodes)
    GetNodeIdV = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetNodeIdV)
    GetParentNodeId = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetParentNodeId)
    GetChildren = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetChildren)
    GetChildNodeId = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetChildNodeId)
    GetNodeVal = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GetNodeVal)
    GenRandomTree = _swig_new_instance_method(_snap.TStrIntStrVTrTree_GenRandomTree)
    DelNode = _swig_new_instance_method(_snap.TStrIntStrVTrTree_DelNode)
    CopyTree = _swig_new_instance_method(_snap.TStrIntStrVTrTree_CopyTree)
    WrTree = _swig_new_instance_method(_snap.TStrIntStrVTrTree_WrTree)
    __swig_destroy__ = _snap.delete_TStrIntStrVTrTree

# Register TStrIntStrVTrTree in _snap:
_snap.TStrIntStrVTrTree_swigregister(TStrIntStrVTrTree)

class TIntS(object):
    r"""Proxy of C++ TSStack< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntS self) -> TIntS
        __init__(TIntS self, int const & MxVals) -> TIntS

        Parameters
        ----------
        MxVals: int const &

        __init__(TIntS self, TIntS Stack) -> TIntS

        Parameters
        ----------
        Stack: TSStack< TInt > const &

        __init__(TIntS self, TSIn SIn) -> TIntS

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntS_swiginit(self, _snap.new_TIntS(*args))
    Save = _swig_new_instance_method(_snap.TIntS_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntS___eq__)
    Empty = _swig_new_instance_method(_snap.TIntS_Empty)
    Clr = _swig_new_instance_method(_snap.TIntS_Clr)
    IsIn = _swig_new_instance_method(_snap.TIntS_IsIn)
    Len = _swig_new_instance_method(_snap.TIntS_Len)
    Top = _swig_new_instance_method(_snap.TIntS_Top)
    Push = _swig_new_instance_method(_snap.TIntS_Push)
    Pop = _swig_new_instance_method(_snap.TIntS_Pop)
    __swig_destroy__ = _snap.delete_TIntS

# Register TIntS in _snap:
_snap.TIntS_swigregister(TIntS)

class TBoolChS(object):
    r"""Proxy of C++ TSStack< TBoolChPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TBoolChS self) -> TBoolChS
        __init__(TBoolChS self, int const & MxVals) -> TBoolChS

        Parameters
        ----------
        MxVals: int const &

        __init__(TBoolChS self, TBoolChS Stack) -> TBoolChS

        Parameters
        ----------
        Stack: TSStack< TBoolChPr > const &

        __init__(TBoolChS self, TSIn SIn) -> TBoolChS

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBoolChS_swiginit(self, _snap.new_TBoolChS(*args))
    Save = _swig_new_instance_method(_snap.TBoolChS_Save)
    __eq__ = _swig_new_instance_method(_snap.TBoolChS___eq__)
    Empty = _swig_new_instance_method(_snap.TBoolChS_Empty)
    Clr = _swig_new_instance_method(_snap.TBoolChS_Clr)
    IsIn = _swig_new_instance_method(_snap.TBoolChS_IsIn)
    Len = _swig_new_instance_method(_snap.TBoolChS_Len)
    Top = _swig_new_instance_method(_snap.TBoolChS_Top)
    Push = _swig_new_instance_method(_snap.TBoolChS_Push)
    Pop = _swig_new_instance_method(_snap.TBoolChS_Pop)
    __swig_destroy__ = _snap.delete_TBoolChS

# Register TBoolChS in _snap:
_snap.TBoolChS_swigregister(TBoolChS)

class TIntQ(object):
    r"""Proxy of C++ TQQueue< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntQ self, int const & _MxLast=64, int const & _MxLen=-1) -> TIntQ

        Parameters
        ----------
        _MxLast: int const &
        _MxLen: int const &

        __init__(TIntQ self, TIntQ Queue) -> TIntQ

        Parameters
        ----------
        Queue: TQQueue< TInt > const &

        __init__(TIntQ self, TSIn SIn) -> TIntQ

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntQ_swiginit(self, _snap.new_TIntQ(*args))
    Save = _swig_new_instance_method(_snap.TIntQ_Save)
    Clr = _swig_new_instance_method(_snap.TIntQ_Clr)
    Gen = _swig_new_instance_method(_snap.TIntQ_Gen)
    GetSubValV = _swig_new_instance_method(_snap.TIntQ_GetSubValV)
    Empty = _swig_new_instance_method(_snap.TIntQ_Empty)
    Len = _swig_new_instance_method(_snap.TIntQ_Len)
    Top = _swig_new_instance_method(_snap.TIntQ_Top)
    Pop = _swig_new_instance_method(_snap.TIntQ_Pop)
    Push = _swig_new_instance_method(_snap.TIntQ_Push)
    Shuffle = _swig_new_instance_method(_snap.TIntQ_Shuffle)
    __swig_destroy__ = _snap.delete_TIntQ

# Register TIntQ in _snap:
_snap.TIntQ_swigregister(TIntQ)

class TFltQ(object):
    r"""Proxy of C++ TQQueue< TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFltQ self, int const & _MxLast=64, int const & _MxLen=-1) -> TFltQ

        Parameters
        ----------
        _MxLast: int const &
        _MxLen: int const &

        __init__(TFltQ self, TFltQ Queue) -> TFltQ

        Parameters
        ----------
        Queue: TQQueue< TFlt > const &

        __init__(TFltQ self, TSIn SIn) -> TFltQ

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltQ_swiginit(self, _snap.new_TFltQ(*args))
    Save = _swig_new_instance_method(_snap.TFltQ_Save)
    Clr = _swig_new_instance_method(_snap.TFltQ_Clr)
    Gen = _swig_new_instance_method(_snap.TFltQ_Gen)
    GetSubValV = _swig_new_instance_method(_snap.TFltQ_GetSubValV)
    Empty = _swig_new_instance_method(_snap.TFltQ_Empty)
    Len = _swig_new_instance_method(_snap.TFltQ_Len)
    Top = _swig_new_instance_method(_snap.TFltQ_Top)
    Pop = _swig_new_instance_method(_snap.TFltQ_Pop)
    Push = _swig_new_instance_method(_snap.TFltQ_Push)
    Shuffle = _swig_new_instance_method(_snap.TFltQ_Shuffle)
    __swig_destroy__ = _snap.delete_TFltQ

# Register TFltQ in _snap:
_snap.TFltQ_swigregister(TFltQ)

class TStrQ(object):
    r"""Proxy of C++ TQQueue< TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrQ self, int const & _MxLast=64, int const & _MxLen=-1) -> TStrQ

        Parameters
        ----------
        _MxLast: int const &
        _MxLen: int const &

        __init__(TStrQ self, TStrQ Queue) -> TStrQ

        Parameters
        ----------
        Queue: TQQueue< TStr > const &

        __init__(TStrQ self, TSIn SIn) -> TStrQ

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrQ_swiginit(self, _snap.new_TStrQ(*args))
    Save = _swig_new_instance_method(_snap.TStrQ_Save)
    Clr = _swig_new_instance_method(_snap.TStrQ_Clr)
    Gen = _swig_new_instance_method(_snap.TStrQ_Gen)
    GetSubValV = _swig_new_instance_method(_snap.TStrQ_GetSubValV)
    Empty = _swig_new_instance_method(_snap.TStrQ_Empty)
    Len = _swig_new_instance_method(_snap.TStrQ_Len)
    Top = _swig_new_instance_method(_snap.TStrQ_Top)
    Pop = _swig_new_instance_method(_snap.TStrQ_Pop)
    Push = _swig_new_instance_method(_snap.TStrQ_Push)
    Shuffle = _swig_new_instance_method(_snap.TStrQ_Shuffle)
    __swig_destroy__ = _snap.delete_TStrQ

# Register TStrQ in _snap:
_snap.TStrQ_swigregister(TStrQ)

class TIntPrQ(object):
    r"""Proxy of C++ TQQueue< TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrQ self, int const & _MxLast=64, int const & _MxLen=-1) -> TIntPrQ

        Parameters
        ----------
        _MxLast: int const &
        _MxLen: int const &

        __init__(TIntPrQ self, TIntPrQ Queue) -> TIntPrQ

        Parameters
        ----------
        Queue: TQQueue< TIntPr > const &

        __init__(TIntPrQ self, TSIn SIn) -> TIntPrQ

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrQ_swiginit(self, _snap.new_TIntPrQ(*args))
    Save = _swig_new_instance_method(_snap.TIntPrQ_Save)
    Clr = _swig_new_instance_method(_snap.TIntPrQ_Clr)
    Gen = _swig_new_instance_method(_snap.TIntPrQ_Gen)
    GetSubValV = _swig_new_instance_method(_snap.TIntPrQ_GetSubValV)
    Empty = _swig_new_instance_method(_snap.TIntPrQ_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrQ_Len)
    Top = _swig_new_instance_method(_snap.TIntPrQ_Top)
    Pop = _swig_new_instance_method(_snap.TIntPrQ_Pop)
    Push = _swig_new_instance_method(_snap.TIntPrQ_Push)
    Shuffle = _swig_new_instance_method(_snap.TIntPrQ_Shuffle)
    __swig_destroy__ = _snap.delete_TIntPrQ

# Register TIntPrQ in _snap:
_snap.TIntPrQ_swigregister(TIntPrQ)

class TIntStrPrQ(object):
    r"""Proxy of C++ TQQueue< TIntStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrQ self, int const & _MxLast=64, int const & _MxLen=-1) -> TIntStrPrQ

        Parameters
        ----------
        _MxLast: int const &
        _MxLen: int const &

        __init__(TIntStrPrQ self, TIntStrPrQ Queue) -> TIntStrPrQ

        Parameters
        ----------
        Queue: TQQueue< TIntStrPr > const &

        __init__(TIntStrPrQ self, TSIn SIn) -> TIntStrPrQ

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPrQ_swiginit(self, _snap.new_TIntStrPrQ(*args))
    Save = _swig_new_instance_method(_snap.TIntStrPrQ_Save)
    Clr = _swig_new_instance_method(_snap.TIntStrPrQ_Clr)
    Gen = _swig_new_instance_method(_snap.TIntStrPrQ_Gen)
    GetSubValV = _swig_new_instance_method(_snap.TIntStrPrQ_GetSubValV)
    Empty = _swig_new_instance_method(_snap.TIntStrPrQ_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrPrQ_Len)
    Top = _swig_new_instance_method(_snap.TIntStrPrQ_Top)
    Pop = _swig_new_instance_method(_snap.TIntStrPrQ_Pop)
    Push = _swig_new_instance_method(_snap.TIntStrPrQ_Push)
    Shuffle = _swig_new_instance_method(_snap.TIntStrPrQ_Shuffle)
    __swig_destroy__ = _snap.delete_TIntStrPrQ

# Register TIntStrPrQ in _snap:
_snap.TIntStrPrQ_swigregister(TIntStrPrQ)

class TFltVQ(object):
    r"""Proxy of C++ TQQueue< TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFltVQ self, int const & _MxLast=64, int const & _MxLen=-1) -> TFltVQ

        Parameters
        ----------
        _MxLast: int const &
        _MxLen: int const &

        __init__(TFltVQ self, TFltVQ Queue) -> TFltVQ

        Parameters
        ----------
        Queue: TQQueue< TFltV > const &

        __init__(TFltVQ self, TSIn SIn) -> TFltVQ

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltVQ_swiginit(self, _snap.new_TFltVQ(*args))
    Save = _swig_new_instance_method(_snap.TFltVQ_Save)
    Clr = _swig_new_instance_method(_snap.TFltVQ_Clr)
    Gen = _swig_new_instance_method(_snap.TFltVQ_Gen)
    GetSubValV = _swig_new_instance_method(_snap.TFltVQ_GetSubValV)
    Empty = _swig_new_instance_method(_snap.TFltVQ_Empty)
    Len = _swig_new_instance_method(_snap.TFltVQ_Len)
    Top = _swig_new_instance_method(_snap.TFltVQ_Top)
    Pop = _swig_new_instance_method(_snap.TFltVQ_Pop)
    Push = _swig_new_instance_method(_snap.TFltVQ_Push)
    Shuffle = _swig_new_instance_method(_snap.TFltVQ_Shuffle)
    __swig_destroy__ = _snap.delete_TFltVQ

# Register TFltVQ in _snap:
_snap.TFltVQ_swigregister(TFltVQ)

class TAscFltVQ(object):
    r"""Proxy of C++ TQQueue< TAscFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAscFltVQ self, int const & _MxLast=64, int const & _MxLen=-1) -> TAscFltVQ

        Parameters
        ----------
        _MxLast: int const &
        _MxLen: int const &

        __init__(TAscFltVQ self, TAscFltVQ Queue) -> TAscFltVQ

        Parameters
        ----------
        Queue: TQQueue< TAscFltV > const &

        __init__(TAscFltVQ self, TSIn SIn) -> TAscFltVQ

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFltVQ_swiginit(self, _snap.new_TAscFltVQ(*args))
    Save = _swig_new_instance_method(_snap.TAscFltVQ_Save)
    Clr = _swig_new_instance_method(_snap.TAscFltVQ_Clr)
    Gen = _swig_new_instance_method(_snap.TAscFltVQ_Gen)
    GetSubValV = _swig_new_instance_method(_snap.TAscFltVQ_GetSubValV)
    Empty = _swig_new_instance_method(_snap.TAscFltVQ_Empty)
    Len = _swig_new_instance_method(_snap.TAscFltVQ_Len)
    Top = _swig_new_instance_method(_snap.TAscFltVQ_Top)
    Pop = _swig_new_instance_method(_snap.TAscFltVQ_Pop)
    Push = _swig_new_instance_method(_snap.TAscFltVQ_Push)
    Shuffle = _swig_new_instance_method(_snap.TAscFltVQ_Shuffle)
    __swig_destroy__ = _snap.delete_TAscFltVQ

# Register TAscFltVQ in _snap:
_snap.TAscFltVQ_swigregister(TAscFltVQ)

class TIntH(object):
    r"""Proxy of C++ THash< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntH self) -> TIntH
        __init__(TIntH self, TIntH Hash) -> TIntH

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        __init__(TIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntH self, TSIn SIn) -> TIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntH_swiginit(self, _snap.new_TIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntH

# Register TIntH in _snap:
_snap.TIntH_swigregister(TIntH)

class TIntIntH(object):
    r"""Proxy of C++ THash< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntIntH self) -> TIntIntH
        __init__(TIntIntH self, TIntH Hash) -> TIntIntH

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        __init__(TIntIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntIntH self, TSIn SIn) -> TIntIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntH_swiginit(self, _snap.new_TIntIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntIntH

# Register TIntIntH in _snap:
_snap.TIntIntH_swigregister(TIntIntH)

class TIntFltH(object):
    r"""Proxy of C++ THash< TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntFltH self) -> TIntFltH
        __init__(TIntFltH self, TIntFltH Hash) -> TIntFltH

        Parameters
        ----------
        Hash: THash< TInt,TFlt > const &

        __init__(TIntFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntFltH self, TSIn SIn) -> TIntFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltH_swiginit(self, _snap.new_TIntFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltH_Load)
    Save = _swig_new_instance_method(_snap.TIntFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntFltH_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntFltH

# Register TIntFltH in _snap:
_snap.TIntFltH_swigregister(TIntFltH)

class TIntStrH(object):
    r"""Proxy of C++ THash< TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntStrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntStrH self) -> TIntStrH
        __init__(TIntStrH self, TIntStrH Hash) -> TIntStrH

        Parameters
        ----------
        Hash: THash< TInt,TStr > const &

        __init__(TIntStrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntStrH self, TSIn SIn) -> TIntStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrH_swiginit(self, _snap.new_TIntStrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrH_Load)
    Save = _swig_new_instance_method(_snap.TIntStrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntStrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntStrH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntStrH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntStrH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntStrH_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntStrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntStrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntStrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntStrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntStrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntStrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntStrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntStrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntStrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntStrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntStrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntStrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntStrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntStrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntStrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntStrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntStrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntStrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntStrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntStrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntStrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntStrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntStrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntStrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntStrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntStrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntStrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntStrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntStrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntStrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntStrH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntStrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntStrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntStrH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntStrH

# Register TIntStrH in _snap:
_snap.TIntStrH_swigregister(TIntStrH)

class TIntPrFltH(object):
    r"""Proxy of C++ THash< TIntPr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntPrFltH self) -> TIntPrFltH
        __init__(TIntPrFltH self, TIntPrFltH Hash) -> TIntPrFltH

        Parameters
        ----------
        Hash: THash< TIntPr,TFlt > const &

        __init__(TIntPrFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntPrFltH self, TSIn SIn) -> TIntPrFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrFltH_swiginit(self, _snap.new_TIntPrFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrFltH_Load)
    Save = _swig_new_instance_method(_snap.TIntPrFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntPrFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntPrFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntPrFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntPrFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntPrFltH_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntPrFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntPrFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntPrFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntPrFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntPrFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntPrFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntPrFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntPrFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntPrFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntPrFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntPrFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntPrFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntPrFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntPrFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntPrFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntPrFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntPrFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntPrFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntPrFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntPrFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntPrFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntPrFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntPrFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntPrFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntPrFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntPrFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntPrFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntPrFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntPrFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntPrFltH

# Register TIntPrFltH in _snap:
_snap.TIntPrFltH_swigregister(TIntPrFltH)

class TStrIntH(object):
    r"""Proxy of C++ THash< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrIntH self) -> TStrIntH
        __init__(TStrIntH self, TStrIntH Hash) -> TStrIntH

        Parameters
        ----------
        Hash: THash< TStr,TInt > const &

        __init__(TStrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrIntH self, TSIn SIn) -> TStrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntH_swiginit(self, _snap.new_TStrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntH_Load)
    Save = _swig_new_instance_method(_snap.TStrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrIntH

# Register TStrIntH in _snap:
_snap.TStrIntH_swigregister(TStrIntH)

class TStrIntSH(object):
    r"""Proxy of C++ TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntSH self) -> TStrIntSH
        __init__(TStrIntSH self, TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const & StrPool) -> TStrIntSH

        Parameters
        ----------
        StrPool: TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrIntSH self, int const & Ports, bool const & _AutoSizeP=False, TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const & StrPool=TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool()) -> TStrIntSH

        Parameters
        ----------
        Ports: int const &
        _AutoSizeP: bool const &
        StrPool: TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrIntSH self, TStrIntSH Hash) -> TStrIntSH

        Parameters
        ----------
        Hash: TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > > const &

        __init__(TStrIntSH self, TSIn SIn, bool PoolToo=True) -> TStrIntSH

        Parameters
        ----------
        SIn: TSIn &
        PoolToo: bool

        """
        _snap.TStrIntSH_swiginit(self, _snap.new_TStrIntSH(*args))
    Load = _swig_new_instance_method(_snap.TStrIntSH_Load)
    LoadShM = _swig_new_instance_method(_snap.TStrIntSH_LoadShM)
    Save = _swig_new_instance_method(_snap.TStrIntSH_Save)
    SetPool = _swig_new_instance_method(_snap.TStrIntSH_SetPool)
    GetPool = _swig_new_instance_method(_snap.TStrIntSH_GetPool)
    Empty = _swig_new_instance_method(_snap.TStrIntSH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntSH_Len)
    Reserved = _swig_new_instance_method(_snap.TStrIntSH_Reserved)
    GetPorts = _swig_new_instance_method(_snap.TStrIntSH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntSH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntSH_GetMxKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntSH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntSH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntSH_AddDat)
    AddDatId = _swig_new_instance_method(_snap.TStrIntSH_AddDatId)
    __call__ = _swig_new_instance_method(_snap.TStrIntSH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntSH_GetMemUsed)
    GetDat = _swig_new_instance_method(_snap.TStrIntSH_GetDat)
    GetDatId = _swig_new_instance_method(_snap.TStrIntSH_GetDatId)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntSH_GetKeyDat)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntSH_GetKeyId)
    GetKey = _swig_new_instance_method(_snap.TStrIntSH_GetKey)
    GetKeyOfs = _swig_new_instance_method(_snap.TStrIntSH_GetKeyOfs)
    KeyFromOfs = _swig_new_instance_method(_snap.TStrIntSH_KeyFromOfs)
    IsKey = _swig_new_instance_method(_snap.TStrIntSH_IsKey)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntSH_IsKeyGetDat)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntSH_IsKeyId)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntSH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntSH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntSH_GetKeyV)
    GetStrIdV = _swig_new_instance_method(_snap.TStrIntSH_GetStrIdV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntSH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntSH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntSH_GetDatKeyPrV)
    Pack = _swig_new_instance_method(_snap.TStrIntSH_Pack)
    __swig_destroy__ = _snap.delete_TStrIntSH

# Register TStrIntSH in _snap:
_snap.TStrIntSH_swigregister(TStrIntSH)

class TIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntHI self) -> TIntHI
        __init__(TIntHI self, TIntHI _HashKeyDatI) -> TIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(TIntHI self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _snap.TIntHI_swiginit(self, _snap.new_TIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntHI

# Register TIntHI in _snap:
_snap.TIntHI_swigregister(TIntHI)

class TIntIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntIntHI self) -> TIntIntHI
        __init__(TIntIntHI self, TIntHI _HashKeyDatI) -> TIntIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(TIntIntHI self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _snap.TIntIntHI_swiginit(self, _snap.new_TIntIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntIntHI

# Register TIntIntHI in _snap:
_snap.TIntIntHI_swigregister(TIntIntHI)

class TIntFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntFltHI self) -> TIntFltHI
        __init__(TIntFltHI self, TIntFltHI _HashKeyDatI) -> TIntFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        __init__(TIntFltHI self, THashKeyDatI< TInt,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TFlt >::THKeyDat const * _EndI) -> TIntFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TFlt >::THKeyDat const *

        """
        _snap.TIntFltHI_swiginit(self, _snap.new_TIntFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntFltHI

# Register TIntFltHI in _snap:
_snap.TIntFltHI_swigregister(TIntFltHI)

class TIntStrHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntStrHI self) -> TIntStrHI
        __init__(TIntStrHI self, TIntStrHI _HashKeyDatI) -> TIntStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        __init__(TIntStrHI self, THashKeyDatI< TInt,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TStr >::THKeyDat const * _EndI) -> TIntStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TStr >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TStr >::THKeyDat const *

        """
        _snap.TIntStrHI_swiginit(self, _snap.new_TIntStrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntStrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntStrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntStrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntStrHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntStrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntStrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntStrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntStrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntStrHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntStrHI

# Register TIntStrHI in _snap:
_snap.TIntStrHI_swigregister(TIntStrHI)

class TIntPrFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntPr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrFltHI self) -> TIntPrFltHI
        __init__(TIntPrFltHI self, TIntPrFltHI _HashKeyDatI) -> TIntPrFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        __init__(TIntPrFltHI self, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _EndI) -> TIntPrFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *

        """
        _snap.TIntPrFltHI_swiginit(self, _snap.new_TIntPrFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntPrFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntPrFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntPrFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntPrFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntPrFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntPrFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntPrFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntPrFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntPrFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntPrFltHI

# Register TIntPrFltHI in _snap:
_snap.TIntPrFltHI_swigregister(TIntPrFltHI)

class TStrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntHI self) -> TStrIntHI
        __init__(TStrIntHI self, TStrIntHI _HashKeyDatI) -> TStrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        __init__(TStrIntHI self, THashKeyDatI< TStr,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TInt >::THKeyDat const * _EndI) -> TStrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const *

        """
        _snap.TStrIntHI_swiginit(self, _snap.new_TStrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrIntHI

# Register TStrIntHI in _snap:
_snap.TStrIntHI_swigregister(TStrIntHI)

class TIntFltVH(object):
    r"""Proxy of C++ THash< TInt,TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntFltVH self) -> TIntFltVH
        __init__(TIntFltVH self, TIntFltVH Hash) -> TIntFltVH

        Parameters
        ----------
        Hash: THash< TInt,TFltV > const &

        __init__(TIntFltVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntFltVH self, TSIn SIn) -> TIntFltVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltVH_swiginit(self, _snap.new_TIntFltVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltVH_Load)
    Save = _swig_new_instance_method(_snap.TIntFltVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntFltVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntFltVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntFltVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntFltVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntFltVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntFltVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntFltVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntFltVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntFltVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntFltVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntFltVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntFltVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntFltVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntFltVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntFltVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntFltVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntFltVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntFltVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntFltVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntFltVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntFltVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntFltVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntFltVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntFltVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntFltVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntFltVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntFltVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntFltVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntFltVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntFltVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntFltVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntFltVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntFltVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntFltVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntFltVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntFltVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntFltVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntFltVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntFltVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntFltVH

# Register TIntFltVH in _snap:
_snap.TIntFltVH_swigregister(TIntFltVH)

class TUInt64H(object):
    r"""Proxy of C++ THash< TUInt64,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TUInt64H_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TUInt64H self) -> TUInt64H
        __init__(TUInt64H self, TUInt64H Hash) -> TUInt64H

        Parameters
        ----------
        Hash: THash< TUInt64,TInt > const &

        __init__(TUInt64H self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TUInt64H

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TUInt64H self, TSIn SIn) -> TUInt64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64H_swiginit(self, _snap.new_TUInt64H(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64H_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64H_Load)
    Save = _swig_new_instance_method(_snap.TUInt64H_Save)
    __eq__ = _swig_new_instance_method(_snap.TUInt64H___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64H___lt__)
    __call__ = _swig_new_instance_method(_snap.TUInt64H___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64H_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TUInt64H_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64H_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64H_GetI)
    Gen = _swig_new_instance_method(_snap.TUInt64H_Gen)
    Clr = _swig_new_instance_method(_snap.TUInt64H_Clr)
    Empty = _swig_new_instance_method(_snap.TUInt64H_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64H_Len)
    GetPorts = _swig_new_instance_method(_snap.TUInt64H_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TUInt64H_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TUInt64H_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TUInt64H_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TUInt64H_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TUInt64H_AddKey)
    AddDat = _swig_new_instance_method(_snap.TUInt64H_AddDat)
    DelKey = _swig_new_instance_method(_snap.TUInt64H_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TUInt64H_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TUInt64H_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TUInt64H_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TUInt64H_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TUInt64H_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TUInt64H_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TUInt64H_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TUInt64H_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TUInt64H_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TUInt64H_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TUInt64H_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TUInt64H_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TUInt64H_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TUInt64H_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TUInt64H_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TUInt64H_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TUInt64H_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TUInt64H_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TUInt64H_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TUInt64H_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TUInt64H_Swap)
    Defrag = _swig_new_instance_method(_snap.TUInt64H_Defrag)
    Pack = _swig_new_instance_method(_snap.TUInt64H_Pack)
    Sort = _swig_new_instance_method(_snap.TUInt64H_Sort)
    SortByKey = _swig_new_instance_method(_snap.TUInt64H_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TUInt64H_SortByDat)
    __swig_destroy__ = _snap.delete_TUInt64H

# Register TUInt64H in _snap:
_snap.TUInt64H_swigregister(TUInt64H)

class TIntBoolH(object):
    r"""Proxy of C++ THash< TInt,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntBoolH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntBoolH self) -> TIntBoolH
        __init__(TIntBoolH self, TIntBoolH Hash) -> TIntBoolH

        Parameters
        ----------
        Hash: THash< TInt,TBool > const &

        __init__(TIntBoolH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntBoolH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntBoolH self, TSIn SIn) -> TIntBoolH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntBoolH_swiginit(self, _snap.new_TIntBoolH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntBoolH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntBoolH_Load)
    Save = _swig_new_instance_method(_snap.TIntBoolH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntBoolH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntBoolH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntBoolH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntBoolH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntBoolH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntBoolH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntBoolH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntBoolH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntBoolH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntBoolH_Empty)
    Len = _swig_new_instance_method(_snap.TIntBoolH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntBoolH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntBoolH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntBoolH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntBoolH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntBoolH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntBoolH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntBoolH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntBoolH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntBoolH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntBoolH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntBoolH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntBoolH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntBoolH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntBoolH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntBoolH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntBoolH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntBoolH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntBoolH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntBoolH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntBoolH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntBoolH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntBoolH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntBoolH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntBoolH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntBoolH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntBoolH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntBoolH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntBoolH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntBoolH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntBoolH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntBoolH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntBoolH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntBoolH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntBoolH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntBoolH

# Register TIntBoolH in _snap:
_snap.TIntBoolH_swigregister(TIntBoolH)

class TIntUInt64H(object):
    r"""Proxy of C++ THash< TInt,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntUInt64H_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntUInt64H self) -> TIntUInt64H
        __init__(TIntUInt64H self, TIntUInt64H Hash) -> TIntUInt64H

        Parameters
        ----------
        Hash: THash< TInt,TUInt64 > const &

        __init__(TIntUInt64H self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntUInt64H

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntUInt64H self, TSIn SIn) -> TIntUInt64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntUInt64H_swiginit(self, _snap.new_TIntUInt64H(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntUInt64H_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntUInt64H_Load)
    Save = _swig_new_instance_method(_snap.TIntUInt64H_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntUInt64H___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntUInt64H___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntUInt64H___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntUInt64H_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntUInt64H_BegI)
    EndI = _swig_new_instance_method(_snap.TIntUInt64H_EndI)
    GetI = _swig_new_instance_method(_snap.TIntUInt64H_GetI)
    Gen = _swig_new_instance_method(_snap.TIntUInt64H_Gen)
    Clr = _swig_new_instance_method(_snap.TIntUInt64H_Clr)
    Empty = _swig_new_instance_method(_snap.TIntUInt64H_Empty)
    Len = _swig_new_instance_method(_snap.TIntUInt64H_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntUInt64H_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntUInt64H_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntUInt64H_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntUInt64H_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntUInt64H_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntUInt64H_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntUInt64H_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntUInt64H_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntUInt64H_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntUInt64H_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntUInt64H_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntUInt64H_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntUInt64H_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntUInt64H_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntUInt64H_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntUInt64H_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntUInt64H_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntUInt64H_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntUInt64H_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntUInt64H_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntUInt64H_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntUInt64H_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntUInt64H_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntUInt64H_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntUInt64H_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntUInt64H_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntUInt64H_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntUInt64H_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntUInt64H_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntUInt64H_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntUInt64H_Pack)
    Sort = _swig_new_instance_method(_snap.TIntUInt64H_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntUInt64H_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntUInt64H_SortByDat)
    __swig_destroy__ = _snap.delete_TIntUInt64H

# Register TIntUInt64H in _snap:
_snap.TIntUInt64H_swigregister(TIntUInt64H)

class TIntIntVH(object):
    r"""Proxy of C++ THash< TInt,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntIntVH self) -> TIntIntVH
        __init__(TIntIntVH self, TIntIntVH Hash) -> TIntIntVH

        Parameters
        ----------
        Hash: THash< TInt,TIntV > const &

        __init__(TIntIntVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntIntVH self, TSIn SIn) -> TIntIntVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntVH_swiginit(self, _snap.new_TIntIntVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntVH_Load)
    Save = _swig_new_instance_method(_snap.TIntIntVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntIntVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntIntVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntIntVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntIntVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntIntVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntIntVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntIntVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntIntVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntIntVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntIntVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntIntVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntIntVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntIntVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntIntVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntIntVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntIntVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntIntVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntIntVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntIntVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntIntVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntIntVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntIntVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntIntVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntIntVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntIntVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntIntVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntIntVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntIntVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntIntVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntIntVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntIntVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntIntVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntIntVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntIntVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntIntVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntIntVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntIntVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntIntVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntIntVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntIntVH

# Register TIntIntVH in _snap:
_snap.TIntIntVH_swigregister(TIntIntVH)

class TIntIntHH(object):
    r"""Proxy of C++ THash< TInt,TIntH > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntHH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntIntHH self) -> TIntIntHH
        __init__(TIntIntHH self, TIntIntHH Hash) -> TIntIntHH

        Parameters
        ----------
        Hash: THash< TInt,TIntH > const &

        __init__(TIntIntHH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntHH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntIntHH self, TSIn SIn) -> TIntIntHH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntHH_swiginit(self, _snap.new_TIntIntHH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntHH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntHH_Load)
    Save = _swig_new_instance_method(_snap.TIntIntHH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntHH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntHH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntIntHH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntHH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntIntHH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntHH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntHH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntIntHH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntIntHH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntIntHH_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntHH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntIntHH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntIntHH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntIntHH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntIntHH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntIntHH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntIntHH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntIntHH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntIntHH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntIntHH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntIntHH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntIntHH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntIntHH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntIntHH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntIntHH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntIntHH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntIntHH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntIntHH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntIntHH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntIntHH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntIntHH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntIntHH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntIntHH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntIntHH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntIntHH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntIntHH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntIntHH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntIntHH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntIntHH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntIntHH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntIntHH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntIntHH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntIntHH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntIntHH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntIntHH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntIntHH

# Register TIntIntHH in _snap:
_snap.TIntIntHH_swigregister(TIntIntHH)

class TIntFltPrH(object):
    r"""Proxy of C++ THash< TInt,TFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltPrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntFltPrH self) -> TIntFltPrH
        __init__(TIntFltPrH self, TIntFltPrH Hash) -> TIntFltPrH

        Parameters
        ----------
        Hash: THash< TInt,TFltPr > const &

        __init__(TIntFltPrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltPrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntFltPrH self, TSIn SIn) -> TIntFltPrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltPrH_swiginit(self, _snap.new_TIntFltPrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltPrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltPrH_Load)
    Save = _swig_new_instance_method(_snap.TIntFltPrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltPrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltPrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntFltPrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltPrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntFltPrH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltPrH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltPrH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntFltPrH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntFltPrH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntFltPrH_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltPrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntFltPrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntFltPrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntFltPrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntFltPrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntFltPrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntFltPrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntFltPrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntFltPrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntFltPrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntFltPrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntFltPrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntFltPrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntFltPrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntFltPrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntFltPrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntFltPrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntFltPrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntFltPrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntFltPrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntFltPrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntFltPrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntFltPrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntFltPrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntFltPrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntFltPrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntFltPrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntFltPrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntFltPrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntFltPrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntFltPrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntFltPrH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntFltPrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntFltPrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntFltPrH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntFltPrH

# Register TIntFltPrH in _snap:
_snap.TIntFltPrH_swigregister(TIntFltPrH)

class TIntFltTrH(object):
    r"""Proxy of C++ THash< TInt,TFltTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltTrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntFltTrH self) -> TIntFltTrH
        __init__(TIntFltTrH self, TIntFltTrH Hash) -> TIntFltTrH

        Parameters
        ----------
        Hash: THash< TInt,TFltTr > const &

        __init__(TIntFltTrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltTrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntFltTrH self, TSIn SIn) -> TIntFltTrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltTrH_swiginit(self, _snap.new_TIntFltTrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltTrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltTrH_Load)
    Save = _swig_new_instance_method(_snap.TIntFltTrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltTrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltTrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntFltTrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltTrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntFltTrH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltTrH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltTrH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntFltTrH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntFltTrH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntFltTrH_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltTrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntFltTrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntFltTrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntFltTrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntFltTrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntFltTrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntFltTrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntFltTrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntFltTrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntFltTrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntFltTrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntFltTrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntFltTrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntFltTrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntFltTrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntFltTrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntFltTrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntFltTrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntFltTrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntFltTrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntFltTrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntFltTrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntFltTrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntFltTrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntFltTrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntFltTrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntFltTrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntFltTrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntFltTrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntFltTrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntFltTrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntFltTrH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntFltTrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntFltTrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntFltTrH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntFltTrH

# Register TIntFltTrH in _snap:
_snap.TIntFltTrH_swigregister(TIntFltTrH)

class TIntStrVH(object):
    r"""Proxy of C++ THash< TInt,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntStrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntStrVH self) -> TIntStrVH
        __init__(TIntStrVH self, TIntStrVH Hash) -> TIntStrVH

        Parameters
        ----------
        Hash: THash< TInt,TStrV > const &

        __init__(TIntStrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntStrVH self, TSIn SIn) -> TIntStrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrVH_swiginit(self, _snap.new_TIntStrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrVH_Load)
    Save = _swig_new_instance_method(_snap.TIntStrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntStrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntStrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntStrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntStrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntStrVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntStrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntStrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntStrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntStrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntStrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntStrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntStrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntStrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntStrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntStrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntStrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntStrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntStrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntStrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntStrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntStrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntStrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntStrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntStrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntStrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntStrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntStrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntStrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntStrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntStrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntStrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntStrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntStrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntStrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntStrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntStrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntStrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntStrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntStrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntStrVH

# Register TIntStrVH in _snap:
_snap.TIntStrVH_swigregister(TIntStrVH)

class TIntIntPrH(object):
    r"""Proxy of C++ THash< TInt,TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntPrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntIntPrH self) -> TIntIntPrH
        __init__(TIntIntPrH self, TIntIntPrH Hash) -> TIntIntPrH

        Parameters
        ----------
        Hash: THash< TInt,TIntPr > const &

        __init__(TIntIntPrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntPrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntIntPrH self, TSIn SIn) -> TIntIntPrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntPrH_swiginit(self, _snap.new_TIntIntPrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntPrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntPrH_Load)
    Save = _swig_new_instance_method(_snap.TIntIntPrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntPrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntPrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntIntPrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntPrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntIntPrH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntPrH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntPrH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntIntPrH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntIntPrH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntIntPrH_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntPrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntIntPrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntIntPrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntIntPrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntIntPrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntIntPrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntIntPrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntIntPrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntIntPrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntIntPrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntIntPrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntIntPrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntIntPrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntIntPrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntIntPrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntIntPrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntIntPrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntIntPrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntIntPrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntIntPrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntIntPrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntIntPrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntIntPrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntIntPrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntIntPrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntIntPrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntIntPrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntIntPrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntIntPrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntIntPrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntIntPrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntIntPrH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntIntPrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntIntPrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntIntPrH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntIntPrH

# Register TIntIntPrH in _snap:
_snap.TIntIntPrH_swigregister(TIntIntPrH)

class TIntIntPrVH(object):
    r"""Proxy of C++ THash< TInt,TIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntPrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntIntPrVH self) -> TIntIntPrVH
        __init__(TIntIntPrVH self, TIntIntPrVH Hash) -> TIntIntPrVH

        Parameters
        ----------
        Hash: THash< TInt,TIntPrV > const &

        __init__(TIntIntPrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntPrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntIntPrVH self, TSIn SIn) -> TIntIntPrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntPrVH_swiginit(self, _snap.new_TIntIntPrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntPrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntPrVH_Load)
    Save = _swig_new_instance_method(_snap.TIntIntPrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntPrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntPrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntIntPrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntPrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntIntPrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntPrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntPrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntIntPrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntIntPrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntIntPrVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntPrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntIntPrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntIntPrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntIntPrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntIntPrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntIntPrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntIntPrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntIntPrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntIntPrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntIntPrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntIntPrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntIntPrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntIntPrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntIntPrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntIntPrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntIntPrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntIntPrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntIntPrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntIntPrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntIntPrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntIntPrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntIntPrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntIntPrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntIntPrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntIntPrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntIntPrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntIntPrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntIntPrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntIntPrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntIntPrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntIntPrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntIntPrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntIntPrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntIntPrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntIntPrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntIntPrVH

# Register TIntIntPrVH in _snap:
_snap.TIntIntPrVH_swigregister(TIntIntPrVH)

class TIntStrPrVH(object):
    r"""Proxy of C++ THash< TInt,TStrPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntStrPrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrVH self) -> TIntStrPrVH
        __init__(TIntStrPrVH self, TIntStrPrVH Hash) -> TIntStrPrVH

        Parameters
        ----------
        Hash: THash< TInt,TStrPrV > const &

        __init__(TIntStrPrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStrPrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntStrPrVH self, TSIn SIn) -> TIntStrPrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPrVH_swiginit(self, _snap.new_TIntStrPrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrPrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrPrVH_Load)
    Save = _swig_new_instance_method(_snap.TIntStrPrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrPrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntStrPrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrPrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntStrPrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrPrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrPrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntStrPrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntStrPrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntStrPrVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrPrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntStrPrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntStrPrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntStrPrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntStrPrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntStrPrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntStrPrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntStrPrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntStrPrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntStrPrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntStrPrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntStrPrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntStrPrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntStrPrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntStrPrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntStrPrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntStrPrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntStrPrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntStrPrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntStrPrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntStrPrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntStrPrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntStrPrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntStrPrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntStrPrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntStrPrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntStrPrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntStrPrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntStrPrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntStrPrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntStrPrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntStrPrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntStrPrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntStrPrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntStrPrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntStrPrVH

# Register TIntStrPrVH in _snap:
_snap.TIntStrPrVH_swigregister(TIntStrPrVH)

class TUInt64StrVH(object):
    r"""Proxy of C++ THash< TUInt64,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TUInt64StrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TUInt64StrVH self) -> TUInt64StrVH
        __init__(TUInt64StrVH self, TUInt64StrVH Hash) -> TUInt64StrVH

        Parameters
        ----------
        Hash: THash< TUInt64,TStrV > const &

        __init__(TUInt64StrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TUInt64StrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TUInt64StrVH self, TSIn SIn) -> TUInt64StrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64StrVH_swiginit(self, _snap.new_TUInt64StrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TUInt64StrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TUInt64StrVH_Load)
    Save = _swig_new_instance_method(_snap.TUInt64StrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TUInt64StrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64StrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TUInt64StrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64StrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TUInt64StrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TUInt64StrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TUInt64StrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TUInt64StrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TUInt64StrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TUInt64StrVH_Empty)
    Len = _swig_new_instance_method(_snap.TUInt64StrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TUInt64StrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TUInt64StrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TUInt64StrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TUInt64StrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TUInt64StrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TUInt64StrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TUInt64StrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TUInt64StrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TUInt64StrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TUInt64StrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TUInt64StrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TUInt64StrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TUInt64StrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TUInt64StrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TUInt64StrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TUInt64StrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TUInt64StrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TUInt64StrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TUInt64StrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TUInt64StrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TUInt64StrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TUInt64StrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TUInt64StrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TUInt64StrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TUInt64StrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TUInt64StrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TUInt64StrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TUInt64StrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TUInt64StrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TUInt64StrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TUInt64StrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TUInt64StrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TUInt64StrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TUInt64StrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TUInt64StrVH

# Register TUInt64StrVH in _snap:
_snap.TUInt64StrVH_swigregister(TUInt64StrVH)

class TIntPrIntH(object):
    r"""Proxy of C++ THash< TIntPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntPrIntH self) -> TIntPrIntH
        __init__(TIntPrIntH self, TIntPrIntH Hash) -> TIntPrIntH

        Parameters
        ----------
        Hash: THash< TIntPr,TInt > const &

        __init__(TIntPrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntPrIntH self, TSIn SIn) -> TIntPrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrIntH_swiginit(self, _snap.new_TIntPrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntPrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntPrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntPrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntPrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntPrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntPrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntPrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntPrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntPrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntPrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntPrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntPrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntPrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntPrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntPrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntPrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntPrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntPrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntPrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntPrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntPrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntPrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntPrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntPrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntPrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntPrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntPrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntPrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntPrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntPrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntPrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntPrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntPrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntPrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntPrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntPrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntPrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntPrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntPrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntPrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntPrIntH

# Register TIntPrIntH in _snap:
_snap.TIntPrIntH_swigregister(TIntPrIntH)

class TIntPrIntVH(object):
    r"""Proxy of C++ THash< TIntPr,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrIntVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntPrIntVH self) -> TIntPrIntVH
        __init__(TIntPrIntVH self, TIntPrIntVH Hash) -> TIntPrIntVH

        Parameters
        ----------
        Hash: THash< TIntPr,TIntV > const &

        __init__(TIntPrIntVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrIntVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntPrIntVH self, TSIn SIn) -> TIntPrIntVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrIntVH_swiginit(self, _snap.new_TIntPrIntVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrIntVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrIntVH_Load)
    Save = _swig_new_instance_method(_snap.TIntPrIntVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrIntVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrIntVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntPrIntVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrIntVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntPrIntVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrIntVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrIntVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntPrIntVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntPrIntVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntPrIntVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrIntVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntPrIntVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntPrIntVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntPrIntVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntPrIntVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntPrIntVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntPrIntVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntPrIntVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntPrIntVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntPrIntVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntPrIntVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntPrIntVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntPrIntVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntPrIntVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntPrIntVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntPrIntVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntPrIntVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntPrIntVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntPrIntVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntPrIntVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntPrIntVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntPrIntVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntPrIntVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntPrIntVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntPrIntVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntPrIntVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntPrIntVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntPrIntVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntPrIntVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntPrIntVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntPrIntVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntPrIntVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntPrIntVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntPrIntVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntPrIntVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntPrIntVH

# Register TIntPrIntVH in _snap:
_snap.TIntPrIntVH_swigregister(TIntPrIntVH)

class TIntPrIntPrVH(object):
    r"""Proxy of C++ THash< TIntPr,TIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrIntPrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntPrIntPrVH self) -> TIntPrIntPrVH
        __init__(TIntPrIntPrVH self, TIntPrIntPrVH Hash) -> TIntPrIntPrVH

        Parameters
        ----------
        Hash: THash< TIntPr,TIntPrV > const &

        __init__(TIntPrIntPrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrIntPrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntPrIntPrVH self, TSIn SIn) -> TIntPrIntPrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrIntPrVH_swiginit(self, _snap.new_TIntPrIntPrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrIntPrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrIntPrVH_Load)
    Save = _swig_new_instance_method(_snap.TIntPrIntPrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrIntPrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrIntPrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntPrIntPrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntPrIntPrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrIntPrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntPrIntPrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntPrIntPrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntPrIntPrVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrIntPrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntPrIntPrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntPrIntPrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntPrIntPrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntPrIntPrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntPrIntPrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntPrIntPrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntPrIntPrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntPrIntPrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntPrIntPrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntPrIntPrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntPrIntPrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntPrIntPrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntPrIntPrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntPrIntPrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntPrIntPrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntPrIntPrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntPrIntPrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntPrIntPrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntPrIntPrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntPrIntPrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntPrIntPrVH

# Register TIntPrIntPrVH in _snap:
_snap.TIntPrIntPrVH_swigregister(TIntPrIntPrVH)

class TIntTrIntH(object):
    r"""Proxy of C++ THash< TIntTr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntTrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntTrIntH self) -> TIntTrIntH
        __init__(TIntTrIntH self, TIntTrIntH Hash) -> TIntTrIntH

        Parameters
        ----------
        Hash: THash< TIntTr,TInt > const &

        __init__(TIntTrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntTrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntTrIntH self, TSIn SIn) -> TIntTrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntTrIntH_swiginit(self, _snap.new_TIntTrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntTrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntTrIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntTrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntTrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntTrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntTrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntTrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntTrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntTrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntTrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntTrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntTrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntTrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntTrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntTrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntTrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntTrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntTrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntTrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntTrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntTrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntTrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntTrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntTrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntTrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntTrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntTrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntTrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntTrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntTrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntTrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntTrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntTrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntTrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntTrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntTrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntTrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntTrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntTrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntTrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntTrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntTrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntTrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntTrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntTrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntTrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntTrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntTrIntH

# Register TIntTrIntH in _snap:
_snap.TIntTrIntH_swigregister(TIntTrIntH)

class TIntVIntH(object):
    r"""Proxy of C++ THash< TIntV,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntVIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntVIntH self) -> TIntVIntH
        __init__(TIntVIntH self, TIntVIntH Hash) -> TIntVIntH

        Parameters
        ----------
        Hash: THash< TIntV,TInt > const &

        __init__(TIntVIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntVIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntVIntH self, TSIn SIn) -> TIntVIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntVIntH_swiginit(self, _snap.new_TIntVIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntVIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntVIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntVIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntVIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntVIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntVIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntVIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntVIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntVIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntVIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntVIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntVIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntVIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntVIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntVIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntVIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntVIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntVIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntVIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntVIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntVIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntVIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntVIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntVIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntVIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntVIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntVIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntVIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntVIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntVIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntVIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntVIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntVIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntVIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntVIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntVIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntVIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntVIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntVIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntVIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntVIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntVIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntVIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntVIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntVIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntVIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntVIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntVIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntVIntH

# Register TIntVIntH in _snap:
_snap.TIntVIntH_swigregister(TIntVIntH)

class TUIntH(object):
    r"""Proxy of C++ THash< TUInt,TUInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TUIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TUIntH self) -> TUIntH
        __init__(TUIntH self, TUIntH Hash) -> TUIntH

        Parameters
        ----------
        Hash: THash< TUInt,TUInt > const &

        __init__(TUIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TUIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TUIntH self, TSIn SIn) -> TUIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUIntH_swiginit(self, _snap.new_TUIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TUIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TUIntH_Load)
    Save = _swig_new_instance_method(_snap.TUIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TUIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TUIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TUIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TUIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TUIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TUIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TUIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TUIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TUIntH_Empty)
    Len = _swig_new_instance_method(_snap.TUIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TUIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TUIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TUIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TUIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TUIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TUIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TUIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TUIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TUIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TUIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TUIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TUIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TUIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TUIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TUIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TUIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TUIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TUIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TUIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TUIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TUIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TUIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TUIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TUIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TUIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TUIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TUIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TUIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TUIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TUIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TUIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TUIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TUIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TUIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TUIntH

# Register TUIntH in _snap:
_snap.TUIntH_swigregister(TUIntH)

class TIntTrFltH(object):
    r"""Proxy of C++ THash< TIntTr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntTrFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntTrFltH self) -> TIntTrFltH
        __init__(TIntTrFltH self, TIntTrFltH Hash) -> TIntTrFltH

        Parameters
        ----------
        Hash: THash< TIntTr,TFlt > const &

        __init__(TIntTrFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntTrFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntTrFltH self, TSIn SIn) -> TIntTrFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntTrFltH_swiginit(self, _snap.new_TIntTrFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntTrFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntTrFltH_Load)
    Save = _swig_new_instance_method(_snap.TIntTrFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntTrFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTrFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntTrFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntTrFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntTrFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntTrFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntTrFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntTrFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntTrFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntTrFltH_Empty)
    Len = _swig_new_instance_method(_snap.TIntTrFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntTrFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntTrFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntTrFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntTrFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntTrFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntTrFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntTrFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntTrFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntTrFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntTrFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntTrFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntTrFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntTrFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntTrFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntTrFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntTrFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntTrFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntTrFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntTrFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntTrFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntTrFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntTrFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntTrFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntTrFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntTrFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntTrFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntTrFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntTrFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntTrFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntTrFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntTrFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntTrFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntTrFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntTrFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntTrFltH

# Register TIntTrFltH in _snap:
_snap.TIntTrFltH_swigregister(TIntTrFltH)

class TIntPrStrH(object):
    r"""Proxy of C++ THash< TIntPr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrStrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntPrStrH self) -> TIntPrStrH
        __init__(TIntPrStrH self, TIntPrStrH Hash) -> TIntPrStrH

        Parameters
        ----------
        Hash: THash< TIntPr,TStr > const &

        __init__(TIntPrStrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntPrStrH self, TSIn SIn) -> TIntPrStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrStrH_swiginit(self, _snap.new_TIntPrStrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrStrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrStrH_Load)
    Save = _swig_new_instance_method(_snap.TIntPrStrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrStrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrStrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntPrStrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrStrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntPrStrH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrStrH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrStrH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntPrStrH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntPrStrH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntPrStrH_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrStrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntPrStrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntPrStrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntPrStrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntPrStrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntPrStrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntPrStrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntPrStrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntPrStrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntPrStrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntPrStrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntPrStrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntPrStrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntPrStrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntPrStrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntPrStrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntPrStrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntPrStrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntPrStrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntPrStrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntPrStrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntPrStrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntPrStrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntPrStrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntPrStrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntPrStrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntPrStrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntPrStrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntPrStrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntPrStrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntPrStrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntPrStrH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntPrStrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntPrStrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntPrStrH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntPrStrH

# Register TIntPrStrH in _snap:
_snap.TIntPrStrH_swigregister(TIntPrStrH)

class TIntPrStrVH(object):
    r"""Proxy of C++ THash< TIntPr,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrStrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntPrStrVH self) -> TIntPrStrVH
        __init__(TIntPrStrVH self, TIntPrStrVH Hash) -> TIntPrStrVH

        Parameters
        ----------
        Hash: THash< TIntPr,TStrV > const &

        __init__(TIntPrStrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrStrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntPrStrVH self, TSIn SIn) -> TIntPrStrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrStrVH_swiginit(self, _snap.new_TIntPrStrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrStrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrStrVH_Load)
    Save = _swig_new_instance_method(_snap.TIntPrStrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrStrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrStrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntPrStrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrStrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntPrStrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrStrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrStrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntPrStrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntPrStrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntPrStrVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrStrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntPrStrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntPrStrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntPrStrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntPrStrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntPrStrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntPrStrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntPrStrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntPrStrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntPrStrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntPrStrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntPrStrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntPrStrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntPrStrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntPrStrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntPrStrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntPrStrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntPrStrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntPrStrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntPrStrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntPrStrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntPrStrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntPrStrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntPrStrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntPrStrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntPrStrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntPrStrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntPrStrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntPrStrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntPrStrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntPrStrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntPrStrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntPrStrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntPrStrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntPrStrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntPrStrVH

# Register TIntPrStrVH in _snap:
_snap.TIntPrStrVH_swigregister(TIntPrStrVH)

class TIntStrPrIntH(object):
    r"""Proxy of C++ THash< TIntStrPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntStrPrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrIntH self) -> TIntStrPrIntH
        __init__(TIntStrPrIntH self, TIntStrPrIntH Hash) -> TIntStrPrIntH

        Parameters
        ----------
        Hash: THash< TIntStrPr,TInt > const &

        __init__(TIntStrPrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStrPrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntStrPrIntH self, TSIn SIn) -> TIntStrPrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPrIntH_swiginit(self, _snap.new_TIntStrPrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrPrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrPrIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntStrPrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrPrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntStrPrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrPrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntStrPrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrPrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrPrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntStrPrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntStrPrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntStrPrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrPrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntStrPrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntStrPrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntStrPrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntStrPrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntStrPrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntStrPrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntStrPrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntStrPrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntStrPrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntStrPrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntStrPrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntStrPrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntStrPrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntStrPrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntStrPrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntStrPrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntStrPrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntStrPrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntStrPrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntStrPrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntStrPrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntStrPrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntStrPrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntStrPrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntStrPrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntStrPrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntStrPrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntStrPrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntStrPrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntStrPrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntStrPrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntStrPrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntStrPrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntStrPrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntStrPrIntH

# Register TIntStrPrIntH in _snap:
_snap.TIntStrPrIntH_swigregister(TIntStrPrIntH)

class TFltFltH(object):
    r"""Proxy of C++ THash< TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TFltFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TFltFltH self) -> TFltFltH
        __init__(TFltFltH self, TFltFltH Hash) -> TFltFltH

        Parameters
        ----------
        Hash: THash< TFlt,TFlt > const &

        __init__(TFltFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TFltFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TFltFltH self, TSIn SIn) -> TFltFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltFltH_swiginit(self, _snap.new_TFltFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltFltH_Load)
    Save = _swig_new_instance_method(_snap.TFltFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TFltFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TFltFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TFltFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TFltFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TFltFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TFltFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TFltFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TFltFltH_Empty)
    Len = _swig_new_instance_method(_snap.TFltFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TFltFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TFltFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TFltFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TFltFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TFltFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TFltFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TFltFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TFltFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TFltFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TFltFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TFltFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TFltFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TFltFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TFltFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TFltFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TFltFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TFltFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TFltFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TFltFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TFltFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TFltFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TFltFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TFltFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TFltFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TFltFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TFltFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TFltFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TFltFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TFltFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TFltFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TFltFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TFltFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TFltFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TFltFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TFltFltH

# Register TFltFltH in _snap:
_snap.TFltFltH_swigregister(TFltFltH)

class TStrH(object):
    r"""Proxy of C++ THash< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrH self) -> TStrH
        __init__(TStrH self, TStrIntH Hash) -> TStrH

        Parameters
        ----------
        Hash: THash< TStr,TInt > const &

        __init__(TStrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrH self, TSIn SIn) -> TStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrH_swiginit(self, _snap.new_TStrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrH_Load)
    Save = _swig_new_instance_method(_snap.TStrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrH_Empty)
    Len = _swig_new_instance_method(_snap.TStrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrH

# Register TStrH in _snap:
_snap.TStrH_swigregister(TStrH)

class TStrBoolH(object):
    r"""Proxy of C++ THash< TStr,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrBoolH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrBoolH self) -> TStrBoolH
        __init__(TStrBoolH self, TStrBoolH Hash) -> TStrBoolH

        Parameters
        ----------
        Hash: THash< TStr,TBool > const &

        __init__(TStrBoolH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrBoolH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrBoolH self, TSIn SIn) -> TStrBoolH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrBoolH_swiginit(self, _snap.new_TStrBoolH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrBoolH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrBoolH_Load)
    Save = _swig_new_instance_method(_snap.TStrBoolH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrBoolH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrBoolH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrBoolH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrBoolH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrBoolH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrBoolH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrBoolH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrBoolH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrBoolH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrBoolH_Empty)
    Len = _swig_new_instance_method(_snap.TStrBoolH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrBoolH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrBoolH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrBoolH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrBoolH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrBoolH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrBoolH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrBoolH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrBoolH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrBoolH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrBoolH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrBoolH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrBoolH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrBoolH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrBoolH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrBoolH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrBoolH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrBoolH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrBoolH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrBoolH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrBoolH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrBoolH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrBoolH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrBoolH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrBoolH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrBoolH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrBoolH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrBoolH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrBoolH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrBoolH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrBoolH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrBoolH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrBoolH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrBoolH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrBoolH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrBoolH

# Register TStrBoolH in _snap:
_snap.TStrBoolH_swigregister(TStrBoolH)

class TStrIntPrH(object):
    r"""Proxy of C++ THash< TStr,TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrIntPrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrH self) -> TStrIntPrH
        __init__(TStrIntPrH self, TStrIntPrH Hash) -> TStrIntPrH

        Parameters
        ----------
        Hash: THash< TStr,TIntPr > const &

        __init__(TStrIntPrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntPrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrIntPrH self, TSIn SIn) -> TStrIntPrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPrH_swiginit(self, _snap.new_TStrIntPrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntPrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntPrH_Load)
    Save = _swig_new_instance_method(_snap.TStrIntPrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrIntPrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrIntPrH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntPrH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntPrH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrIntPrH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrIntPrH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrIntPrH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntPrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrIntPrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntPrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntPrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrIntPrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntPrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntPrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntPrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrIntPrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrIntPrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrIntPrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrIntPrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrIntPrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntPrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrIntPrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrIntPrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntPrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrIntPrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntPrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntPrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntPrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntPrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntPrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntPrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntPrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntPrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrIntPrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrIntPrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrIntPrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrIntPrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrIntPrH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrIntPrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrIntPrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrIntPrH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrIntPrH

# Register TStrIntPrH in _snap:
_snap.TStrIntPrH_swigregister(TStrIntPrH)

class TStrIntVH(object):
    r"""Proxy of C++ THash< TStr,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrIntVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrIntVH self) -> TStrIntVH
        __init__(TStrIntVH self, TStrIntVH Hash) -> TStrIntVH

        Parameters
        ----------
        Hash: THash< TStr,TIntV > const &

        __init__(TStrIntVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrIntVH self, TSIn SIn) -> TStrIntVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntVH_swiginit(self, _snap.new_TStrIntVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntVH_Load)
    Save = _swig_new_instance_method(_snap.TStrIntVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrIntVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrIntVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrIntVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrIntVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrIntVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrIntVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrIntVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrIntVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrIntVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrIntVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrIntVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrIntVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrIntVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrIntVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrIntVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrIntVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrIntVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrIntVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrIntVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrIntVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrIntVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrIntVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrIntVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrIntVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrIntVH

# Register TStrIntVH in _snap:
_snap.TStrIntVH_swigregister(TStrIntVH)

class TStrUInt64H(object):
    r"""Proxy of C++ THash< TStr,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrUInt64H_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrUInt64H self) -> TStrUInt64H
        __init__(TStrUInt64H self, TStrUInt64H Hash) -> TStrUInt64H

        Parameters
        ----------
        Hash: THash< TStr,TUInt64 > const &

        __init__(TStrUInt64H self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrUInt64H

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrUInt64H self, TSIn SIn) -> TStrUInt64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrUInt64H_swiginit(self, _snap.new_TStrUInt64H(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrUInt64H_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrUInt64H_Load)
    Save = _swig_new_instance_method(_snap.TStrUInt64H_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrUInt64H___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrUInt64H___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrUInt64H___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrUInt64H_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrUInt64H_BegI)
    EndI = _swig_new_instance_method(_snap.TStrUInt64H_EndI)
    GetI = _swig_new_instance_method(_snap.TStrUInt64H_GetI)
    Gen = _swig_new_instance_method(_snap.TStrUInt64H_Gen)
    Clr = _swig_new_instance_method(_snap.TStrUInt64H_Clr)
    Empty = _swig_new_instance_method(_snap.TStrUInt64H_Empty)
    Len = _swig_new_instance_method(_snap.TStrUInt64H_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrUInt64H_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrUInt64H_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrUInt64H_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrUInt64H_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrUInt64H_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrUInt64H_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrUInt64H_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrUInt64H_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrUInt64H_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrUInt64H_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrUInt64H_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrUInt64H_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrUInt64H_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrUInt64H_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrUInt64H_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrUInt64H_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrUInt64H_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrUInt64H_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrUInt64H_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrUInt64H_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrUInt64H_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrUInt64H_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrUInt64H_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrUInt64H_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrUInt64H_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrUInt64H_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrUInt64H_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrUInt64H_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrUInt64H_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrUInt64H_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrUInt64H_Pack)
    Sort = _swig_new_instance_method(_snap.TStrUInt64H_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrUInt64H_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrUInt64H_SortByDat)
    __swig_destroy__ = _snap.delete_TStrUInt64H

# Register TStrUInt64H in _snap:
_snap.TStrUInt64H_swigregister(TStrUInt64H)

class TStrUInt64VH(object):
    r"""Proxy of C++ THash< TStr,TUInt64V > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrUInt64VH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrUInt64VH self) -> TStrUInt64VH
        __init__(TStrUInt64VH self, TStrUInt64VH Hash) -> TStrUInt64VH

        Parameters
        ----------
        Hash: THash< TStr,TUInt64V > const &

        __init__(TStrUInt64VH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrUInt64VH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrUInt64VH self, TSIn SIn) -> TStrUInt64VH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrUInt64VH_swiginit(self, _snap.new_TStrUInt64VH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrUInt64VH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrUInt64VH_Load)
    Save = _swig_new_instance_method(_snap.TStrUInt64VH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrUInt64VH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrUInt64VH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrUInt64VH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrUInt64VH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrUInt64VH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrUInt64VH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrUInt64VH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrUInt64VH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrUInt64VH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrUInt64VH_Empty)
    Len = _swig_new_instance_method(_snap.TStrUInt64VH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrUInt64VH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrUInt64VH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrUInt64VH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrUInt64VH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrUInt64VH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrUInt64VH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrUInt64VH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrUInt64VH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrUInt64VH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrUInt64VH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrUInt64VH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrUInt64VH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrUInt64VH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrUInt64VH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrUInt64VH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrUInt64VH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrUInt64VH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrUInt64VH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrUInt64VH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrUInt64VH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrUInt64VH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrUInt64VH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrUInt64VH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrUInt64VH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrUInt64VH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrUInt64VH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrUInt64VH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrUInt64VH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrUInt64VH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrUInt64VH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrUInt64VH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrUInt64VH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrUInt64VH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrUInt64VH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrUInt64VH

# Register TStrUInt64VH in _snap:
_snap.TStrUInt64VH_swigregister(TStrUInt64VH)

class TStrIntPrVH(object):
    r"""Proxy of C++ THash< TStr,TIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrIntPrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrVH self) -> TStrIntPrVH
        __init__(TStrIntPrVH self, TStrIntPrVH Hash) -> TStrIntPrVH

        Parameters
        ----------
        Hash: THash< TStr,TIntPrV > const &

        __init__(TStrIntPrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntPrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrIntPrVH self, TSIn SIn) -> TStrIntPrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPrVH_swiginit(self, _snap.new_TStrIntPrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntPrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntPrVH_Load)
    Save = _swig_new_instance_method(_snap.TStrIntPrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrIntPrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrIntPrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntPrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntPrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrIntPrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrIntPrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrIntPrVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntPrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrIntPrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntPrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntPrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrIntPrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntPrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntPrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntPrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrIntPrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrIntPrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrIntPrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrIntPrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrIntPrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntPrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrIntPrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrIntPrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntPrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrIntPrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntPrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntPrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntPrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntPrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntPrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntPrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntPrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntPrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrIntPrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrIntPrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrIntPrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrIntPrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrIntPrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrIntPrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrIntPrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrIntPrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrIntPrVH

# Register TStrIntPrVH in _snap:
_snap.TStrIntPrVH_swigregister(TStrIntPrVH)

class TStrFltH(object):
    r"""Proxy of C++ THash< TStr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrFltH self) -> TStrFltH
        __init__(TStrFltH self, TStrFltH Hash) -> TStrFltH

        Parameters
        ----------
        Hash: THash< TStr,TFlt > const &

        __init__(TStrFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrFltH self, TSIn SIn) -> TStrFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltH_swiginit(self, _snap.new_TStrFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrFltH_Load)
    Save = _swig_new_instance_method(_snap.TStrFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrFltH_Empty)
    Len = _swig_new_instance_method(_snap.TStrFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrFltH

# Register TStrFltH in _snap:
_snap.TStrFltH_swigregister(TStrFltH)

class TStrFltVH(object):
    r"""Proxy of C++ THash< TStr,TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrFltVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrFltVH self) -> TStrFltVH
        __init__(TStrFltVH self, TStrFltVH Hash) -> TStrFltVH

        Parameters
        ----------
        Hash: THash< TStr,TFltV > const &

        __init__(TStrFltVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrFltVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrFltVH self, TSIn SIn) -> TStrFltVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrFltVH_swiginit(self, _snap.new_TStrFltVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrFltVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrFltVH_Load)
    Save = _swig_new_instance_method(_snap.TStrFltVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrFltVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrFltVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrFltVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrFltVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrFltVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrFltVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrFltVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrFltVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrFltVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrFltVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrFltVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrFltVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrFltVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrFltVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrFltVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrFltVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrFltVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrFltVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrFltVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrFltVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrFltVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrFltVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrFltVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrFltVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrFltVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrFltVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrFltVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrFltVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrFltVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrFltVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrFltVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrFltVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrFltVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrFltVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrFltVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrFltVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrFltVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrFltVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrFltVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrFltVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrFltVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrFltVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrFltVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrFltVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrFltVH

# Register TStrFltVH in _snap:
_snap.TStrFltVH_swigregister(TStrFltVH)

class TStrStrH(object):
    r"""Proxy of C++ THash< TStr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrStrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrStrH self) -> TStrStrH
        __init__(TStrStrH self, TStrStrH Hash) -> TStrStrH

        Parameters
        ----------
        Hash: THash< TStr,TStr > const &

        __init__(TStrStrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrStrH self, TSIn SIn) -> TStrStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrH_swiginit(self, _snap.new_TStrStrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrH_Load)
    Save = _swig_new_instance_method(_snap.TStrStrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrStrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrStrH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrStrH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrStrH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrStrH_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrStrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrStrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrStrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrStrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrStrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrStrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrStrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrStrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrStrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrStrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrStrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrStrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrStrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrStrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrStrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrStrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrStrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrStrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrStrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrStrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrStrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrStrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrStrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrStrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrStrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrStrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrStrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrStrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrStrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrStrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrStrH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrStrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrStrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrStrH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrStrH

# Register TStrStrH in _snap:
_snap.TStrStrH_swigregister(TStrStrH)

class TStrStrPrH(object):
    r"""Proxy of C++ THash< TStr,TStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrStrPrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrStrPrH self) -> TStrStrPrH
        __init__(TStrStrPrH self, TStrStrPrH Hash) -> TStrStrPrH

        Parameters
        ----------
        Hash: THash< TStr,TStrPr > const &

        __init__(TStrStrPrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrStrPrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrStrPrH self, TSIn SIn) -> TStrStrPrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrPrH_swiginit(self, _snap.new_TStrStrPrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrPrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrPrH_Load)
    Save = _swig_new_instance_method(_snap.TStrStrPrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrPrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrPrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrStrPrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrPrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrStrPrH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrPrH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrPrH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrStrPrH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrStrPrH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrStrPrH_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrPrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrStrPrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrStrPrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrStrPrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrStrPrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrStrPrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrStrPrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrStrPrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrStrPrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrStrPrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrStrPrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrStrPrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrStrPrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrStrPrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrStrPrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrStrPrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrStrPrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrStrPrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrStrPrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrStrPrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrStrPrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrStrPrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrStrPrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrStrPrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrStrPrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrStrPrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrStrPrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrStrPrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrStrPrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrStrPrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrStrPrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrStrPrH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrStrPrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrStrPrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrStrPrH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrStrPrH

# Register TStrStrPrH in _snap:
_snap.TStrStrPrH_swigregister(TStrStrPrH)

class TStrStrVH(object):
    r"""Proxy of C++ THash< TStr,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrStrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrStrVH self) -> TStrStrVH
        __init__(TStrStrVH self, TStrStrVH Hash) -> TStrStrVH

        Parameters
        ----------
        Hash: THash< TStr,TStrV > const &

        __init__(TStrStrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrStrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrStrVH self, TSIn SIn) -> TStrStrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrVH_swiginit(self, _snap.new_TStrStrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrVH_Load)
    Save = _swig_new_instance_method(_snap.TStrStrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrStrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrStrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrStrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrStrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrStrVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrStrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrStrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrStrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrStrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrStrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrStrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrStrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrStrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrStrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrStrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrStrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrStrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrStrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrStrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrStrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrStrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrStrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrStrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrStrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrStrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrStrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrStrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrStrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrStrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrStrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrStrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrStrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrStrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrStrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrStrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrStrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrStrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrStrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrStrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrStrVH

# Register TStrStrVH in _snap:
_snap.TStrStrVH_swigregister(TStrStrVH)

class TStrStrPrVH(object):
    r"""Proxy of C++ THash< TStr,TStrPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrStrPrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrStrPrVH self) -> TStrStrPrVH
        __init__(TStrStrPrVH self, TStrStrPrVH Hash) -> TStrStrPrVH

        Parameters
        ----------
        Hash: THash< TStr,TStrPrV > const &

        __init__(TStrStrPrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrStrPrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrStrPrVH self, TSIn SIn) -> TStrStrPrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrPrVH_swiginit(self, _snap.new_TStrStrPrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrPrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrPrVH_Load)
    Save = _swig_new_instance_method(_snap.TStrStrPrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrPrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrPrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrStrPrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrPrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrStrPrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrPrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrPrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrStrPrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrStrPrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrStrPrVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrPrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrStrPrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrStrPrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrStrPrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrStrPrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrStrPrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrStrPrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrStrPrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrStrPrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrStrPrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrStrPrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrStrPrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrStrPrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrStrPrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrStrPrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrStrPrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrStrPrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrStrPrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrStrPrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrStrPrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrStrPrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrStrPrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrStrPrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrStrPrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrStrPrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrStrPrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrStrPrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrStrPrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrStrPrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrStrPrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrStrPrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrStrPrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrStrPrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrStrPrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrStrPrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrStrPrVH

# Register TStrStrPrVH in _snap:
_snap.TStrStrPrVH_swigregister(TStrStrPrVH)

class TStrStrKdVH(object):
    r"""Proxy of C++ THash< TStr,TStrKdV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrStrKdVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrStrKdVH self) -> TStrStrKdVH
        __init__(TStrStrKdVH self, TStrStrKdVH Hash) -> TStrStrKdVH

        Parameters
        ----------
        Hash: THash< TStr,TStrKdV > const &

        __init__(TStrStrKdVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrStrKdVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrStrKdVH self, TSIn SIn) -> TStrStrKdVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrKdVH_swiginit(self, _snap.new_TStrStrKdVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrKdVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrKdVH_Load)
    Save = _swig_new_instance_method(_snap.TStrStrKdVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrKdVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrKdVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrStrKdVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrKdVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrStrKdVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrKdVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrKdVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrStrKdVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrStrKdVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrStrKdVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrKdVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrStrKdVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrStrKdVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrStrKdVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrStrKdVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrStrKdVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrStrKdVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrStrKdVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrStrKdVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrStrKdVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrStrKdVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrStrKdVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrStrKdVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrStrKdVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrStrKdVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrStrKdVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrStrKdVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrStrKdVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrStrKdVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrStrKdVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrStrKdVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrStrKdVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrStrKdVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrStrKdVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrStrKdVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrStrKdVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrStrKdVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrStrKdVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrStrKdVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrStrKdVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrStrKdVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrStrKdVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrStrKdVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrStrKdVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrStrKdVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrStrKdVH

# Register TStrStrKdVH in _snap:
_snap.TStrStrKdVH_swigregister(TStrStrKdVH)

class TStrIntFltPrH(object):
    r"""Proxy of C++ THash< TStr,TIntFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrIntFltPrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrIntFltPrH self) -> TStrIntFltPrH
        __init__(TStrIntFltPrH self, TStrIntFltPrH Hash) -> TStrIntFltPrH

        Parameters
        ----------
        Hash: THash< TStr,TIntFltPr > const &

        __init__(TStrIntFltPrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntFltPrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrIntFltPrH self, TSIn SIn) -> TStrIntFltPrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntFltPrH_swiginit(self, _snap.new_TStrIntFltPrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntFltPrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntFltPrH_Load)
    Save = _swig_new_instance_method(_snap.TStrIntFltPrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntFltPrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntFltPrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrIntFltPrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntFltPrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrIntFltPrH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntFltPrH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntFltPrH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrIntFltPrH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrIntFltPrH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrIntFltPrH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntFltPrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrIntFltPrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntFltPrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntFltPrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrIntFltPrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntFltPrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntFltPrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntFltPrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrIntFltPrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrIntFltPrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrIntFltPrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrIntFltPrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrIntFltPrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntFltPrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrIntFltPrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrIntFltPrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntFltPrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrIntFltPrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrIntFltPrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntFltPrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntFltPrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntFltPrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntFltPrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntFltPrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntFltPrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntFltPrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntFltPrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrIntFltPrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrIntFltPrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrIntFltPrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrIntFltPrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrIntFltPrH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrIntFltPrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrIntFltPrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrIntFltPrH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrIntFltPrH

# Register TStrIntFltPrH in _snap:
_snap.TStrIntFltPrH_swigregister(TStrIntFltPrH)

class TStrStrIntPrVH(object):
    r"""Proxy of C++ THash< TStr,TStrIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrStrIntPrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrStrIntPrVH self) -> TStrStrIntPrVH
        __init__(TStrStrIntPrVH self, TStrStrIntPrVH Hash) -> TStrStrIntPrVH

        Parameters
        ----------
        Hash: THash< TStr,TStrIntPrV > const &

        __init__(TStrStrIntPrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrStrIntPrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrStrIntPrVH self, TSIn SIn) -> TStrStrIntPrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrIntPrVH_swiginit(self, _snap.new_TStrStrIntPrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrIntPrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrIntPrVH_Load)
    Save = _swig_new_instance_method(_snap.TStrStrIntPrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrIntPrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrIntPrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrStrIntPrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrStrIntPrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrIntPrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrStrIntPrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrStrIntPrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrStrIntPrVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrIntPrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrStrIntPrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrStrIntPrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrStrIntPrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrStrIntPrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrStrIntPrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrStrIntPrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrStrIntPrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrStrIntPrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrStrIntPrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrStrIntPrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrStrIntPrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrStrIntPrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrStrIntPrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrStrIntPrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrStrIntPrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrStrIntPrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrStrIntPrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrStrIntPrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrStrIntPrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrStrIntPrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrStrIntPrVH

# Register TStrStrIntPrVH in _snap:
_snap.TStrStrIntPrVH_swigregister(TStrStrIntPrVH)

class TStrStrIntKdVH(object):
    r"""Proxy of C++ THash< TStr,TStrIntKdV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrStrIntKdVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrStrIntKdVH self) -> TStrStrIntKdVH
        __init__(TStrStrIntKdVH self, TStrStrIntKdVH Hash) -> TStrStrIntKdVH

        Parameters
        ----------
        Hash: THash< TStr,TStrIntKdV > const &

        __init__(TStrStrIntKdVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrStrIntKdVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrStrIntKdVH self, TSIn SIn) -> TStrStrIntKdVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrStrIntKdVH_swiginit(self, _snap.new_TStrStrIntKdVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrStrIntKdVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrStrIntKdVH_Load)
    Save = _swig_new_instance_method(_snap.TStrStrIntKdVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrStrIntKdVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrIntKdVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrStrIntKdVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrStrIntKdVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrStrIntKdVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrStrIntKdVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrStrIntKdVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrStrIntKdVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrStrIntKdVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrStrIntKdVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrStrIntKdVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrStrIntKdVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrStrIntKdVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrStrIntKdVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrStrIntKdVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrStrIntKdVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrStrIntKdVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrStrIntKdVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrStrIntKdVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrStrIntKdVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrStrIntKdVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrStrIntKdVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrStrIntKdVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrStrIntKdVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrStrIntKdVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrStrIntKdVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrStrIntKdVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrStrIntKdVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrStrIntKdVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrStrIntKdVH

# Register TStrStrIntKdVH in _snap:
_snap.TStrStrIntKdVH_swigregister(TStrStrIntKdVH)

class TStrPrBoolH(object):
    r"""Proxy of C++ THash< TStrPr,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrPrBoolH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrPrBoolH self) -> TStrPrBoolH
        __init__(TStrPrBoolH self, TStrPrBoolH Hash) -> TStrPrBoolH

        Parameters
        ----------
        Hash: THash< TStrPr,TBool > const &

        __init__(TStrPrBoolH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrPrBoolH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrPrBoolH self, TSIn SIn) -> TStrPrBoolH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrPrBoolH_swiginit(self, _snap.new_TStrPrBoolH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrPrBoolH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrPrBoolH_Load)
    Save = _swig_new_instance_method(_snap.TStrPrBoolH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrPrBoolH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrBoolH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrPrBoolH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPrBoolH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrPrBoolH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrPrBoolH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrPrBoolH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrPrBoolH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrPrBoolH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrPrBoolH_Empty)
    Len = _swig_new_instance_method(_snap.TStrPrBoolH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrPrBoolH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrPrBoolH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrPrBoolH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrPrBoolH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrPrBoolH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrPrBoolH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrPrBoolH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrPrBoolH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrPrBoolH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrPrBoolH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrPrBoolH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrPrBoolH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrPrBoolH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrPrBoolH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrPrBoolH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrPrBoolH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrPrBoolH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrPrBoolH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrPrBoolH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrPrBoolH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrPrBoolH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrPrBoolH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrPrBoolH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrPrBoolH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrPrBoolH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrPrBoolH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrPrBoolH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrPrBoolH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrPrBoolH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrPrBoolH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrPrBoolH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrPrBoolH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrPrBoolH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrPrBoolH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrPrBoolH

# Register TStrPrBoolH in _snap:
_snap.TStrPrBoolH_swigregister(TStrPrBoolH)

class TStrPrIntH(object):
    r"""Proxy of C++ THash< TStrPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrPrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrPrIntH self) -> TStrPrIntH
        __init__(TStrPrIntH self, TStrPrIntH Hash) -> TStrPrIntH

        Parameters
        ----------
        Hash: THash< TStrPr,TInt > const &

        __init__(TStrPrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrPrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrPrIntH self, TSIn SIn) -> TStrPrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrPrIntH_swiginit(self, _snap.new_TStrPrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrPrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrPrIntH_Load)
    Save = _swig_new_instance_method(_snap.TStrPrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrPrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrPrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrPrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrPrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrPrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrPrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrPrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrPrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TStrPrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrPrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrPrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrPrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrPrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrPrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrPrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrPrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrPrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrPrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrPrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrPrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrPrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrPrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrPrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrPrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrPrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrPrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrPrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrPrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrPrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrPrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrPrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrPrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrPrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrPrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrPrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrPrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrPrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrPrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrPrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrPrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrPrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrPrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrPrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrPrIntH

# Register TStrPrIntH in _snap:
_snap.TStrPrIntH_swigregister(TStrPrIntH)

class TStrPrFltH(object):
    r"""Proxy of C++ THash< TStrPr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrPrFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrPrFltH self) -> TStrPrFltH
        __init__(TStrPrFltH self, TStrPrFltH Hash) -> TStrPrFltH

        Parameters
        ----------
        Hash: THash< TStrPr,TFlt > const &

        __init__(TStrPrFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrPrFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrPrFltH self, TSIn SIn) -> TStrPrFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrPrFltH_swiginit(self, _snap.new_TStrPrFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrPrFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrPrFltH_Load)
    Save = _swig_new_instance_method(_snap.TStrPrFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrPrFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrPrFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPrFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrPrFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrPrFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrPrFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrPrFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrPrFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrPrFltH_Empty)
    Len = _swig_new_instance_method(_snap.TStrPrFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrPrFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrPrFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrPrFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrPrFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrPrFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrPrFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrPrFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrPrFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrPrFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrPrFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrPrFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrPrFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrPrFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrPrFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrPrFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrPrFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrPrFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrPrFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrPrFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrPrFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrPrFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrPrFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrPrFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrPrFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrPrFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrPrFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrPrFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrPrFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrPrFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrPrFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrPrFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrPrFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrPrFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrPrFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrPrFltH

# Register TStrPrFltH in _snap:
_snap.TStrPrFltH_swigregister(TStrPrFltH)

class TStrPrStrH(object):
    r"""Proxy of C++ THash< TStrPr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrPrStrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrPrStrH self) -> TStrPrStrH
        __init__(TStrPrStrH self, TStrPrStrH Hash) -> TStrPrStrH

        Parameters
        ----------
        Hash: THash< TStrPr,TStr > const &

        __init__(TStrPrStrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrPrStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrPrStrH self, TSIn SIn) -> TStrPrStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrPrStrH_swiginit(self, _snap.new_TStrPrStrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrPrStrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrPrStrH_Load)
    Save = _swig_new_instance_method(_snap.TStrPrStrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrPrStrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrStrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrPrStrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPrStrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrPrStrH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrPrStrH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrPrStrH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrPrStrH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrPrStrH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrPrStrH_Empty)
    Len = _swig_new_instance_method(_snap.TStrPrStrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrPrStrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrPrStrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrPrStrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrPrStrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrPrStrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrPrStrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrPrStrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrPrStrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrPrStrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrPrStrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrPrStrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrPrStrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrPrStrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrPrStrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrPrStrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrPrStrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrPrStrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrPrStrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrPrStrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrPrStrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrPrStrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrPrStrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrPrStrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrPrStrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrPrStrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrPrStrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrPrStrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrPrStrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrPrStrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrPrStrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrPrStrH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrPrStrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrPrStrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrPrStrH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrPrStrH

# Register TStrPrStrH in _snap:
_snap.TStrPrStrH_swigregister(TStrPrStrH)

class TStrPrStrVH(object):
    r"""Proxy of C++ THash< TStrPr,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrPrStrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrPrStrVH self) -> TStrPrStrVH
        __init__(TStrPrStrVH self, TStrPrStrVH Hash) -> TStrPrStrVH

        Parameters
        ----------
        Hash: THash< TStrPr,TStrV > const &

        __init__(TStrPrStrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrPrStrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrPrStrVH self, TSIn SIn) -> TStrPrStrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrPrStrVH_swiginit(self, _snap.new_TStrPrStrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrPrStrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrPrStrVH_Load)
    Save = _swig_new_instance_method(_snap.TStrPrStrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrPrStrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrStrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrPrStrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPrStrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrPrStrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrPrStrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrPrStrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrPrStrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrPrStrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrPrStrVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrPrStrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrPrStrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrPrStrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrPrStrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrPrStrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrPrStrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrPrStrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrPrStrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrPrStrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrPrStrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrPrStrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrPrStrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrPrStrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrPrStrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrPrStrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrPrStrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrPrStrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrPrStrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrPrStrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrPrStrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrPrStrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrPrStrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrPrStrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrPrStrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrPrStrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrPrStrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrPrStrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrPrStrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrPrStrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrPrStrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrPrStrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrPrStrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrPrStrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrPrStrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrPrStrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrPrStrVH

# Register TStrPrStrVH in _snap:
_snap.TStrPrStrVH_swigregister(TStrPrStrVH)

class TStrTrIntH(object):
    r"""Proxy of C++ THash< TStrTr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrTrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrTrIntH self) -> TStrTrIntH
        __init__(TStrTrIntH self, TStrTrIntH Hash) -> TStrTrIntH

        Parameters
        ----------
        Hash: THash< TStrTr,TInt > const &

        __init__(TStrTrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrTrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrTrIntH self, TSIn SIn) -> TStrTrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrTrIntH_swiginit(self, _snap.new_TStrTrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrTrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrTrIntH_Load)
    Save = _swig_new_instance_method(_snap.TStrTrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrTrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrTrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrTrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrTrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrTrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrTrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrTrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrTrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrTrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrTrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TStrTrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrTrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrTrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrTrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrTrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrTrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrTrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrTrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrTrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrTrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrTrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrTrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrTrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrTrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrTrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrTrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrTrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrTrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrTrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrTrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrTrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrTrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrTrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrTrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrTrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrTrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrTrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrTrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrTrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrTrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrTrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrTrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrTrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrTrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrTrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrTrIntH

# Register TStrTrIntH in _snap:
_snap.TStrTrIntH_swigregister(TStrTrIntH)

class TStrIntPrIntH(object):
    r"""Proxy of C++ THash< TStrIntPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrIntPrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrIntH self) -> TStrIntPrIntH
        __init__(TStrIntPrIntH self, TStrIntPrIntH Hash) -> TStrIntPrIntH

        Parameters
        ----------
        Hash: THash< TStrIntPr,TInt > const &

        __init__(TStrIntPrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntPrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrIntPrIntH self, TSIn SIn) -> TStrIntPrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPrIntH_swiginit(self, _snap.new_TStrIntPrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntPrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntPrIntH_Load)
    Save = _swig_new_instance_method(_snap.TStrIntPrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrIntPrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrIntPrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntPrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntPrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrIntPrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrIntPrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrIntPrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntPrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrIntPrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntPrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntPrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrIntPrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntPrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntPrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntPrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrIntPrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrIntPrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrIntPrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrIntPrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrIntPrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntPrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrIntPrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrIntPrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntPrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrIntPrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntPrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntPrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntPrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntPrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntPrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntPrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntPrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntPrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrIntPrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrIntPrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrIntPrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrIntPrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrIntPrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrIntPrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrIntPrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrIntPrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrIntPrIntH

# Register TStrIntPrIntH in _snap:
_snap.TStrIntPrIntH_swigregister(TStrIntPrIntH)

class TStrVH(object):
    r"""Proxy of C++ THash< TStrV,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrVH self) -> TStrVH
        __init__(TStrVH self, TStrVH Hash) -> TStrVH

        Parameters
        ----------
        Hash: THash< TStrV,TInt > const &

        __init__(TStrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrVH self, TSIn SIn) -> TStrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVH_swiginit(self, _snap.new_TStrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrVH_Load)
    Save = _swig_new_instance_method(_snap.TStrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrVH

# Register TStrVH in _snap:
_snap.TStrVH_swigregister(TStrVH)

class TStrVIntVH(object):
    r"""Proxy of C++ THash< TStrV,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrVIntVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrVIntVH self) -> TStrVIntVH
        __init__(TStrVIntVH self, TStrVIntVH Hash) -> TStrVIntVH

        Parameters
        ----------
        Hash: THash< TStrV,TIntV > const &

        __init__(TStrVIntVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrVIntVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrVIntVH self, TSIn SIn) -> TStrVIntVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVIntVH_swiginit(self, _snap.new_TStrVIntVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrVIntVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrVIntVH_Load)
    Save = _swig_new_instance_method(_snap.TStrVIntVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrVIntVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVIntVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrVIntVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrVIntVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrVIntVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrVIntVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrVIntVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrVIntVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrVIntVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrVIntVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrVIntVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrVIntVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrVIntVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrVIntVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrVIntVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrVIntVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrVIntVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrVIntVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrVIntVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrVIntVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrVIntVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrVIntVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrVIntVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrVIntVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrVIntVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrVIntVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrVIntVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrVIntVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrVIntVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrVIntVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrVIntVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrVIntVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrVIntVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrVIntVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrVIntVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrVIntVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrVIntVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrVIntVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrVIntVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrVIntVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrVIntVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrVIntVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrVIntVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrVIntVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrVIntVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrVIntVH

# Register TStrVIntVH in _snap:
_snap.TStrVIntVH_swigregister(TStrVIntVH)

class TStrVStrH(object):
    r"""Proxy of C++ THash< TStrV,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrVStrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrVStrH self) -> TStrVStrH
        __init__(TStrVStrH self, TStrVStrH Hash) -> TStrVStrH

        Parameters
        ----------
        Hash: THash< TStrV,TStr > const &

        __init__(TStrVStrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrVStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrVStrH self, TSIn SIn) -> TStrVStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVStrH_swiginit(self, _snap.new_TStrVStrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrVStrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrVStrH_Load)
    Save = _swig_new_instance_method(_snap.TStrVStrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrVStrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVStrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrVStrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrVStrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrVStrH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrVStrH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrVStrH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrVStrH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrVStrH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrVStrH_Empty)
    Len = _swig_new_instance_method(_snap.TStrVStrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrVStrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrVStrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrVStrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrVStrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrVStrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrVStrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrVStrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrVStrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrVStrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrVStrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrVStrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrVStrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrVStrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrVStrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrVStrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrVStrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrVStrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrVStrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrVStrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrVStrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrVStrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrVStrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrVStrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrVStrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrVStrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrVStrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrVStrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrVStrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrVStrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrVStrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrVStrH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrVStrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrVStrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrVStrH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrVStrH

# Register TStrVStrH in _snap:
_snap.TStrVStrH_swigregister(TStrVStrH)

class TStrVStrVH(object):
    r"""Proxy of C++ THash< TStrV,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrVStrVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrVStrVH self) -> TStrVStrVH
        __init__(TStrVStrVH self, TStrVStrVH Hash) -> TStrVStrVH

        Parameters
        ----------
        Hash: THash< TStrV,TStrV > const &

        __init__(TStrVStrVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrVStrVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrVStrVH self, TSIn SIn) -> TStrVStrVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrVStrVH_swiginit(self, _snap.new_TStrVStrVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrVStrVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrVStrVH_Load)
    Save = _swig_new_instance_method(_snap.TStrVStrVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrVStrVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVStrVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrVStrVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrVStrVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrVStrVH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrVStrVH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrVStrVH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrVStrVH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrVStrVH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrVStrVH_Empty)
    Len = _swig_new_instance_method(_snap.TStrVStrVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrVStrVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrVStrVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrVStrVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrVStrVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrVStrVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrVStrVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrVStrVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrVStrVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrVStrVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrVStrVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrVStrVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrVStrVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrVStrVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrVStrVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrVStrVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrVStrVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrVStrVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrVStrVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrVStrVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrVStrVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrVStrVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrVStrVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrVStrVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrVStrVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrVStrVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrVStrVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrVStrVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrVStrVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrVStrVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrVStrVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrVStrVH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrVStrVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrVStrVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrVStrVH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrVStrVH

# Register TStrVStrVH in _snap:
_snap.TStrVStrVH_swigregister(TStrVStrVH)

class TUInt64HI(object):
    r"""Proxy of C++ THashKeyDatI< TUInt64,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUInt64HI self) -> TUInt64HI
        __init__(TUInt64HI self, TUInt64HI _HashKeyDatI) -> TUInt64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TUInt64,TInt > const &

        __init__(TUInt64HI self, THashKeyDatI< TUInt64,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TUInt64,TInt >::THKeyDat const * _EndI) -> TUInt64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TUInt64,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TUInt64,TInt >::THKeyDat const *

        """
        _snap.TUInt64HI_swiginit(self, _snap.new_TUInt64HI(*args))
    __eq__ = _swig_new_instance_method(_snap.TUInt64HI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64HI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TUInt64HI___ref__)
    __call__ = _swig_new_instance_method(_snap.TUInt64HI___call__)
    __deref__ = _swig_new_instance_method(_snap.TUInt64HI___deref__)
    Next = _swig_new_instance_method(_snap.TUInt64HI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TUInt64HI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TUInt64HI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TUInt64HI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TUInt64HI_GetDat)
    __swig_destroy__ = _snap.delete_TUInt64HI

# Register TUInt64HI in _snap:
_snap.TUInt64HI_swigregister(TUInt64HI)

class TIntBoolHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntBoolHI self) -> TIntBoolHI
        __init__(TIntBoolHI self, TIntBoolHI _HashKeyDatI) -> TIntBoolHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TBool > const &

        __init__(TIntBoolHI self, THashKeyDatI< TInt,TBool >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TBool >::THKeyDat const * _EndI) -> TIntBoolHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TBool >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TBool >::THKeyDat const *

        """
        _snap.TIntBoolHI_swiginit(self, _snap.new_TIntBoolHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntBoolHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntBoolHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntBoolHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntBoolHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntBoolHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntBoolHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntBoolHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntBoolHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntBoolHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntBoolHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntBoolHI

# Register TIntBoolHI in _snap:
_snap.TIntBoolHI_swigregister(TIntBoolHI)

class TIntUInt64HI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntUInt64HI self) -> TIntUInt64HI
        __init__(TIntUInt64HI self, TIntUInt64HI _HashKeyDatI) -> TIntUInt64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const &

        __init__(TIntUInt64HI self, THashKeyDatI< TInt,TUInt64 >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TUInt64 >::THKeyDat const * _EndI) -> TIntUInt64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const *

        """
        _snap.TIntUInt64HI_swiginit(self, _snap.new_TIntUInt64HI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntUInt64HI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntUInt64HI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntUInt64HI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntUInt64HI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntUInt64HI___deref__)
    Next = _swig_new_instance_method(_snap.TIntUInt64HI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntUInt64HI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntUInt64HI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntUInt64HI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntUInt64HI_GetDat)
    __swig_destroy__ = _snap.delete_TIntUInt64HI

# Register TIntUInt64HI in _snap:
_snap.TIntUInt64HI_swigregister(TIntUInt64HI)

class TIntIntVHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntIntVHI self) -> TIntIntVHI
        __init__(TIntIntVHI self, TIntIntVHI _HashKeyDatI) -> TIntIntVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TIntV > const &

        __init__(TIntIntVHI self, THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * _EndI) -> TIntIntVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TIntIntVHI_swiginit(self, _snap.new_TIntIntVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntIntVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntIntVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntIntVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntIntVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntIntVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntIntVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntIntVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntIntVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntIntVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntIntVHI

# Register TIntIntVHI in _snap:
_snap.TIntIntVHI_swigregister(TIntIntVHI)

class TIntIntHHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TIntH > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntIntHHI self) -> TIntIntHHI
        __init__(TIntIntHHI self, TIntIntHHI _HashKeyDatI) -> TIntIntHHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TIntH > const &

        __init__(TIntIntHHI self, THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * _EndI) -> TIntIntHHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const *

        """
        _snap.TIntIntHHI_swiginit(self, _snap.new_TIntIntHHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntIntHHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntHHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntIntHHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntIntHHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntIntHHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntIntHHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntIntHHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntIntHHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntIntHHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntIntHHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntIntHHI

# Register TIntIntHHI in _snap:
_snap.TIntIntHHI_swigregister(TIntIntHHI)

class TIntFltPrHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntFltPrHI self) -> TIntFltPrHI
        __init__(TIntFltPrHI self, TIntFltPrHI _HashKeyDatI) -> TIntFltPrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TFltPr > const &

        __init__(TIntFltPrHI self, THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * _EndI) -> TIntFltPrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const *

        """
        _snap.TIntFltPrHI_swiginit(self, _snap.new_TIntFltPrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntFltPrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltPrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntFltPrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntFltPrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntFltPrHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntFltPrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntFltPrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntFltPrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntFltPrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntFltPrHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntFltPrHI

# Register TIntFltPrHI in _snap:
_snap.TIntFltPrHI_swigregister(TIntFltPrHI)

class TIntFltTrHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TFltTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntFltTrHI self) -> TIntFltTrHI
        __init__(TIntFltTrHI self, TIntFltTrHI _HashKeyDatI) -> TIntFltTrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TFltTr > const &

        __init__(TIntFltTrHI self, THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * _EndI) -> TIntFltTrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const *

        """
        _snap.TIntFltTrHI_swiginit(self, _snap.new_TIntFltTrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntFltTrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltTrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntFltTrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntFltTrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntFltTrHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntFltTrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntFltTrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntFltTrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntFltTrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntFltTrHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntFltTrHI

# Register TIntFltTrHI in _snap:
_snap.TIntFltTrHI_swigregister(TIntFltTrHI)

class TIntFltVHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntFltVHI self) -> TIntFltVHI
        __init__(TIntFltVHI self, TIntFltVHI _HashKeyDatI) -> TIntFltVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TFltV > const &

        __init__(TIntFltVHI self, THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * _EndI) -> TIntFltVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const *

        """
        _snap.TIntFltVHI_swiginit(self, _snap.new_TIntFltVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntFltVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntFltVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntFltVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntFltVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntFltVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntFltVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntFltVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntFltVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntFltVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntFltVHI

# Register TIntFltVHI in _snap:
_snap.TIntFltVHI_swigregister(TIntFltVHI)

class TIntStrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntStrVHI self) -> TIntStrVHI
        __init__(TIntStrVHI self, TIntStrVHI _HashKeyDatI) -> TIntStrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TStrV > const &

        __init__(TIntStrVHI self, THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * _EndI) -> TIntStrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TIntStrVHI_swiginit(self, _snap.new_TIntStrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntStrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntStrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntStrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntStrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntStrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntStrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntStrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntStrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntStrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntStrVHI

# Register TIntStrVHI in _snap:
_snap.TIntStrVHI_swigregister(TIntStrVHI)

class TIntIntPrHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntIntPrHI self) -> TIntIntPrHI
        __init__(TIntIntPrHI self, TIntIntPrHI _HashKeyDatI) -> TIntIntPrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TIntPr > const &

        __init__(TIntIntPrHI self, THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * _EndI) -> TIntIntPrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const *

        """
        _snap.TIntIntPrHI_swiginit(self, _snap.new_TIntIntPrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntIntPrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntPrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntIntPrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntIntPrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntIntPrHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntIntPrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntIntPrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntIntPrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntIntPrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntIntPrHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntIntPrHI

# Register TIntIntPrHI in _snap:
_snap.TIntIntPrHI_swigregister(TIntIntPrHI)

class TIntIntPrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntIntPrVHI self) -> TIntIntPrVHI
        __init__(TIntIntPrVHI self, TIntIntPrVHI _HashKeyDatI) -> TIntIntPrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const &

        __init__(TIntIntPrVHI self, THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _EndI) -> TIntIntPrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *

        """
        _snap.TIntIntPrVHI_swiginit(self, _snap.new_TIntIntPrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntIntPrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntPrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntIntPrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntIntPrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntIntPrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntIntPrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntIntPrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntIntPrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntIntPrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntIntPrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntIntPrVHI

# Register TIntIntPrVHI in _snap:
_snap.TIntIntPrVHI_swigregister(TIntIntPrVHI)

class TIntStrPrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TStrPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrVHI self) -> TIntStrPrVHI
        __init__(TIntStrPrVHI self, TIntStrPrVHI _HashKeyDatI) -> TIntStrPrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TStrPrV > const &

        __init__(TIntStrPrVHI self, THashKeyDatI< TInt,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * _EndI) -> TIntStrPrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TVec< TPair< TStr,TStr >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TVec< TPair< TStr,TStr >,int > >::THKeyDat const *

        """
        _snap.TIntStrPrVHI_swiginit(self, _snap.new_TIntStrPrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntStrPrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntStrPrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntStrPrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntStrPrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntStrPrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntStrPrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntStrPrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntStrPrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntStrPrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntStrPrVHI

# Register TIntStrPrVHI in _snap:
_snap.TIntStrPrVHI_swigregister(TIntStrPrVHI)

class TUInt64StrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TUInt64,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUInt64StrVHI self) -> TUInt64StrVHI
        __init__(TUInt64StrVHI self, TUInt64StrVHI _HashKeyDatI) -> TUInt64StrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const &

        __init__(TUInt64StrVHI self, THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * _EndI) -> TUInt64StrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TUInt64StrVHI_swiginit(self, _snap.new_TUInt64StrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TUInt64StrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUInt64StrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TUInt64StrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TUInt64StrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TUInt64StrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TUInt64StrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TUInt64StrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TUInt64StrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TUInt64StrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TUInt64StrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TUInt64StrVHI

# Register TUInt64StrVHI in _snap:
_snap.TUInt64StrVHI_swigregister(TUInt64StrVHI)

class TIntPrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrIntHI self) -> TIntPrIntHI
        __init__(TIntPrIntHI self, TIntPrIntHI _HashKeyDatI) -> TIntPrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TInt > const &

        __init__(TIntPrIntHI self, THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * _EndI) -> TIntPrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const *

        """
        _snap.TIntPrIntHI_swiginit(self, _snap.new_TIntPrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntPrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntPrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntPrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntPrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntPrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntPrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntPrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntPrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntPrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntPrIntHI

# Register TIntPrIntHI in _snap:
_snap.TIntPrIntHI_swigregister(TIntPrIntHI)

class TIntPrIntVHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntPr,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrIntVHI self) -> TIntPrIntVHI
        __init__(TIntPrIntVHI self, TIntPrIntVHI _HashKeyDatI) -> TIntPrIntVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const &

        __init__(TIntPrIntVHI self, THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * _EndI) -> TIntPrIntVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TIntPrIntVHI_swiginit(self, _snap.new_TIntPrIntVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntPrIntVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrIntVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntPrIntVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntPrIntVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntPrIntVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntPrIntVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntPrIntVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntPrIntVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntPrIntVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntPrIntVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntPrIntVHI

# Register TIntPrIntVHI in _snap:
_snap.TIntPrIntVHI_swigregister(TIntPrIntVHI)

class TIntPrIntPrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntPr,TIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrIntPrVHI self) -> TIntPrIntPrVHI
        __init__(TIntPrIntPrVHI self, TIntPrIntPrVHI _HashKeyDatI) -> TIntPrIntPrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const &

        __init__(TIntPrIntPrVHI self, THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _EndI) -> TIntPrIntPrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *

        """
        _snap.TIntPrIntPrVHI_swiginit(self, _snap.new_TIntPrIntPrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntPrIntPrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrIntPrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntPrIntPrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntPrIntPrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntPrIntPrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntPrIntPrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntPrIntPrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntPrIntPrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntPrIntPrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntPrIntPrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntPrIntPrVHI

# Register TIntPrIntPrVHI in _snap:
_snap.TIntPrIntPrVHI_swigregister(TIntPrIntPrVHI)

class TIntTrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntTr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntTrIntHI self) -> TIntTrIntHI
        __init__(TIntTrIntHI self, TIntTrIntHI _HashKeyDatI) -> TIntTrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntTr,TInt > const &

        __init__(TIntTrIntHI self, THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * _EndI) -> TIntTrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const *

        """
        _snap.TIntTrIntHI_swiginit(self, _snap.new_TIntTrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntTrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntTrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntTrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntTrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntTrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntTrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntTrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntTrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntTrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntTrIntHI

# Register TIntTrIntHI in _snap:
_snap.TIntTrIntHI_swigregister(TIntTrIntHI)

class TIntVIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntV,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntVIntHI self) -> TIntVIntHI
        __init__(TIntVIntHI self, TIntVIntHI _HashKeyDatI) -> TIntVIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntV,TInt > const &

        __init__(TIntVIntHI self, THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * _EndI) -> TIntVIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const *

        """
        _snap.TIntVIntHI_swiginit(self, _snap.new_TIntVIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntVIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntVIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntVIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntVIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntVIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntVIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntVIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntVIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntVIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntVIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntVIntHI

# Register TIntVIntHI in _snap:
_snap.TIntVIntHI_swigregister(TIntVIntHI)

class TUIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TUInt,TUInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUIntHI self) -> TUIntHI
        __init__(TUIntHI self, TUIntHI _HashKeyDatI) -> TUIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TUInt,TUInt > const &

        __init__(TUIntHI self, THashKeyDatI< TUInt,TUInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TUInt,TUInt >::THKeyDat const * _EndI) -> TUIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TUInt,TUInt >::THKeyDat const *
        _EndI: THashKeyDatI< TUInt,TUInt >::THKeyDat const *

        """
        _snap.TUIntHI_swiginit(self, _snap.new_TUIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TUIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TUIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TUIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TUIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TUIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TUIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TUIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TUIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TUIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TUIntHI

# Register TUIntHI in _snap:
_snap.TUIntHI_swigregister(TUIntHI)

class TIntTrFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntTr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntTrFltHI self) -> TIntTrFltHI
        __init__(TIntTrFltHI self, TIntTrFltHI _HashKeyDatI) -> TIntTrFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const &

        __init__(TIntTrFltHI self, THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * _EndI) -> TIntTrFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const *

        """
        _snap.TIntTrFltHI_swiginit(self, _snap.new_TIntTrFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntTrFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTrFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntTrFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntTrFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntTrFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntTrFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntTrFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntTrFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntTrFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntTrFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntTrFltHI

# Register TIntTrFltHI in _snap:
_snap.TIntTrFltHI_swigregister(TIntTrFltHI)

class TIntPrStrHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntPr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrStrHI self) -> TIntPrStrHI
        __init__(TIntPrStrHI self, TIntPrStrHI _HashKeyDatI) -> TIntPrStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TStr > const &

        __init__(TIntPrStrHI self, THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * _EndI) -> TIntPrStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const *

        """
        _snap.TIntPrStrHI_swiginit(self, _snap.new_TIntPrStrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntPrStrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrStrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntPrStrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntPrStrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntPrStrHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntPrStrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntPrStrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntPrStrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntPrStrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntPrStrHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntPrStrHI

# Register TIntPrStrHI in _snap:
_snap.TIntPrStrHI_swigregister(TIntPrStrHI)

class TIntPrStrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntPr,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrStrVHI self) -> TIntPrStrVHI
        __init__(TIntPrStrVHI self, TIntPrStrVHI _HashKeyDatI) -> TIntPrStrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const &

        __init__(TIntPrStrVHI self, THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * _EndI) -> TIntPrStrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TIntPrStrVHI_swiginit(self, _snap.new_TIntPrStrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntPrStrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrStrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntPrStrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntPrStrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntPrStrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntPrStrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntPrStrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntPrStrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntPrStrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntPrStrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntPrStrVHI

# Register TIntPrStrVHI in _snap:
_snap.TIntPrStrVHI_swigregister(TIntPrStrVHI)

class TIntStrPrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntStrPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntStrPrIntHI self) -> TIntStrPrIntHI
        __init__(TIntStrPrIntHI self, TIntStrPrIntHI _HashKeyDatI) -> TIntStrPrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const &

        __init__(TIntStrPrIntHI self, THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * _EndI) -> TIntStrPrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const *

        """
        _snap.TIntStrPrIntHI_swiginit(self, _snap.new_TIntStrPrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntStrPrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntStrPrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntStrPrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntStrPrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntStrPrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntStrPrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntStrPrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntStrPrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntStrPrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntStrPrIntHI

# Register TIntStrPrIntHI in _snap:
_snap.TIntStrPrIntHI_swigregister(TIntStrPrIntHI)

class TFltFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFltFltHI self) -> TFltFltHI
        __init__(TFltFltHI self, TFltFltHI _HashKeyDatI) -> TFltFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TFlt,TFlt > const &

        __init__(TFltFltHI self, THashKeyDatI< TFlt,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TFlt,TFlt >::THKeyDat const * _EndI) -> TFltFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TFlt,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TFlt,TFlt >::THKeyDat const *

        """
        _snap.TFltFltHI_swiginit(self, _snap.new_TFltFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TFltFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TFltFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TFltFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TFltFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TFltFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TFltFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TFltFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TFltFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TFltFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TFltFltHI

# Register TFltFltHI in _snap:
_snap.TFltFltHI_swigregister(TFltFltHI)

class TStrHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrHI self) -> TStrHI
        __init__(TStrHI self, TStrIntHI _HashKeyDatI) -> TStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        __init__(TStrHI self, THashKeyDatI< TStr,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TInt >::THKeyDat const * _EndI) -> TStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const *

        """
        _snap.TStrHI_swiginit(self, _snap.new_TStrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrHI

# Register TStrHI in _snap:
_snap.TStrHI_swigregister(TStrHI)

class TStrBoolHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrBoolHI self) -> TStrBoolHI
        __init__(TStrBoolHI self, TStrBoolHI _HashKeyDatI) -> TStrBoolHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TBool > const &

        __init__(TStrBoolHI self, THashKeyDatI< TStr,TBool >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TBool >::THKeyDat const * _EndI) -> TStrBoolHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TBool >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TBool >::THKeyDat const *

        """
        _snap.TStrBoolHI_swiginit(self, _snap.new_TStrBoolHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrBoolHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrBoolHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrBoolHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrBoolHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrBoolHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrBoolHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrBoolHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrBoolHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrBoolHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrBoolHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrBoolHI

# Register TStrBoolHI in _snap:
_snap.TStrBoolHI_swigregister(TStrBoolHI)

class TStrIntPrHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrHI self) -> TStrIntPrHI
        __init__(TStrIntPrHI self, TStrIntPrHI _HashKeyDatI) -> TStrIntPrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TIntPr > const &

        __init__(TStrIntPrHI self, THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * _EndI) -> TStrIntPrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const *

        """
        _snap.TStrIntPrHI_swiginit(self, _snap.new_TStrIntPrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrIntPrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrIntPrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrIntPrHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrIntPrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrIntPrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrIntPrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrIntPrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrIntPrHI

# Register TStrIntPrHI in _snap:
_snap.TStrIntPrHI_swigregister(TStrIntPrHI)

class TStrIntVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntVHI self) -> TStrIntVHI
        __init__(TStrIntVHI self, TStrIntVHI _HashKeyDatI) -> TStrIntVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TIntV > const &

        __init__(TStrIntVHI self, THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * _EndI) -> TStrIntVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TStrIntVHI_swiginit(self, _snap.new_TStrIntVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrIntVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrIntVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrIntVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrIntVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrIntVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrIntVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrIntVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrIntVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrIntVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrIntVHI

# Register TStrIntVHI in _snap:
_snap.TStrIntVHI_swigregister(TStrIntVHI)

class TStrUInt64HI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TUInt64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrUInt64HI self) -> TStrUInt64HI
        __init__(TStrUInt64HI self, TStrUInt64HI _HashKeyDatI) -> TStrUInt64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const &

        __init__(TStrUInt64HI self, THashKeyDatI< TStr,TUInt64 >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TUInt64 >::THKeyDat const * _EndI) -> TStrUInt64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const *

        """
        _snap.TStrUInt64HI_swiginit(self, _snap.new_TStrUInt64HI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrUInt64HI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrUInt64HI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrUInt64HI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrUInt64HI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrUInt64HI___deref__)
    Next = _swig_new_instance_method(_snap.TStrUInt64HI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrUInt64HI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrUInt64HI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrUInt64HI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrUInt64HI_GetDat)
    __swig_destroy__ = _snap.delete_TStrUInt64HI

# Register TStrUInt64HI in _snap:
_snap.TStrUInt64HI_swigregister(TStrUInt64HI)

class TStrUInt64VHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TUInt64V > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrUInt64VHI self) -> TStrUInt64VHI
        __init__(TStrUInt64VHI self, TStrUInt64VHI _HashKeyDatI) -> TStrUInt64VHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const &

        __init__(TStrUInt64VHI self, THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * _EndI) -> TStrUInt64VHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const *

        """
        _snap.TStrUInt64VHI_swiginit(self, _snap.new_TStrUInt64VHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrUInt64VHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrUInt64VHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrUInt64VHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrUInt64VHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrUInt64VHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrUInt64VHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrUInt64VHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrUInt64VHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrUInt64VHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrUInt64VHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrUInt64VHI

# Register TStrUInt64VHI in _snap:
_snap.TStrUInt64VHI_swigregister(TStrUInt64VHI)

class TStrIntPrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrVHI self) -> TStrIntPrVHI
        __init__(TStrIntPrVHI self, TStrIntPrVHI _HashKeyDatI) -> TStrIntPrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const &

        __init__(TStrIntPrVHI self, THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _EndI) -> TStrIntPrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *

        """
        _snap.TStrIntPrVHI_swiginit(self, _snap.new_TStrIntPrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrIntPrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrIntPrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrIntPrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrIntPrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrIntPrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrIntPrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrIntPrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrIntPrVHI

# Register TStrIntPrVHI in _snap:
_snap.TStrIntPrVHI_swigregister(TStrIntPrVHI)

class TStrFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrFltHI self) -> TStrFltHI
        __init__(TStrFltHI self, TStrFltHI _HashKeyDatI) -> TStrFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TFlt > const &

        __init__(TStrFltHI self, THashKeyDatI< TStr,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TFlt >::THKeyDat const * _EndI) -> TStrFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TFlt >::THKeyDat const *

        """
        _snap.TStrFltHI_swiginit(self, _snap.new_TStrFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrFltHI

# Register TStrFltHI in _snap:
_snap.TStrFltHI_swigregister(TStrFltHI)

class TStrFltVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrFltVHI self) -> TStrFltVHI
        __init__(TStrFltVHI self, TStrFltVHI _HashKeyDatI) -> TStrFltVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TFltV > const &

        __init__(TStrFltVHI self, THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * _EndI) -> TStrFltVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const *

        """
        _snap.TStrFltVHI_swiginit(self, _snap.new_TStrFltVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrFltVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrFltVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrFltVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrFltVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrFltVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrFltVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrFltVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrFltVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrFltVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrFltVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrFltVHI

# Register TStrFltVHI in _snap:
_snap.TStrFltVHI_swigregister(TStrFltVHI)

class TStrStrHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrStrHI self) -> TStrStrHI
        __init__(TStrStrHI self, TStrStrHI _HashKeyDatI) -> TStrStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TStr > const &

        __init__(TStrStrHI self, THashKeyDatI< TStr,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TStr >::THKeyDat const * _EndI) -> TStrStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TStr >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TStr >::THKeyDat const *

        """
        _snap.TStrStrHI_swiginit(self, _snap.new_TStrStrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrStrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrStrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrStrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrStrHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrStrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrStrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrStrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrStrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrStrHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrStrHI

# Register TStrStrHI in _snap:
_snap.TStrStrHI_swigregister(TStrStrHI)

class TStrStrPrHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TStrPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrStrPrHI self) -> TStrStrPrHI
        __init__(TStrStrPrHI self, TStrStrPrHI _HashKeyDatI) -> TStrStrPrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TStrPr > const &

        __init__(TStrStrPrHI self, THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * _EndI) -> TStrStrPrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const *

        """
        _snap.TStrStrPrHI_swiginit(self, _snap.new_TStrStrPrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrStrPrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrPrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrStrPrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrStrPrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrStrPrHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrStrPrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrStrPrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrStrPrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrStrPrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrStrPrHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrStrPrHI

# Register TStrStrPrHI in _snap:
_snap.TStrStrPrHI_swigregister(TStrStrPrHI)

class TStrStrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrStrVHI self) -> TStrStrVHI
        __init__(TStrStrVHI self, TStrStrVHI _HashKeyDatI) -> TStrStrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TStrV > const &

        __init__(TStrStrVHI self, THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * _EndI) -> TStrStrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TStrStrVHI_swiginit(self, _snap.new_TStrStrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrStrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrStrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrStrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrStrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrStrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrStrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrStrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrStrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrStrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrStrVHI

# Register TStrStrVHI in _snap:
_snap.TStrStrVHI_swigregister(TStrStrVHI)

class TStrStrPrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TStrPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrStrPrVHI self) -> TStrStrPrVHI
        __init__(TStrStrPrVHI self, TStrStrPrVHI _HashKeyDatI) -> TStrStrPrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const &

        __init__(TStrStrPrVHI self, THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * _EndI) -> TStrStrPrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const *

        """
        _snap.TStrStrPrVHI_swiginit(self, _snap.new_TStrStrPrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrStrPrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrPrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrStrPrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrStrPrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrStrPrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrStrPrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrStrPrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrStrPrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrStrPrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrStrPrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrStrPrVHI

# Register TStrStrPrVHI in _snap:
_snap.TStrStrPrVHI_swigregister(TStrStrPrVHI)

class TStrStrKdVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TStrKdV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrStrKdVHI self) -> TStrStrKdVHI
        __init__(TStrStrKdVHI self, TStrStrKdVHI _HashKeyDatI) -> TStrStrKdVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const &

        __init__(TStrStrKdVHI self, THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * _EndI) -> TStrStrKdVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const *

        """
        _snap.TStrStrKdVHI_swiginit(self, _snap.new_TStrStrKdVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrStrKdVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrKdVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrStrKdVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrStrKdVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrStrKdVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrStrKdVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrStrKdVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrStrKdVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrStrKdVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrStrKdVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrStrKdVHI

# Register TStrStrKdVHI in _snap:
_snap.TStrStrKdVHI_swigregister(TStrStrKdVHI)

class TStrIntFltPrHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TIntFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntFltPrHI self) -> TStrIntFltPrHI
        __init__(TStrIntFltPrHI self, TStrIntFltPrHI _HashKeyDatI) -> TStrIntFltPrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const &

        __init__(TStrIntFltPrHI self, THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * _EndI) -> TStrIntFltPrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const *

        """
        _snap.TStrIntFltPrHI_swiginit(self, _snap.new_TStrIntFltPrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrIntFltPrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntFltPrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrIntFltPrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrIntFltPrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrIntFltPrHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrIntFltPrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrIntFltPrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrIntFltPrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrIntFltPrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrIntFltPrHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrIntFltPrHI

# Register TStrIntFltPrHI in _snap:
_snap.TStrIntFltPrHI_swigregister(TStrIntFltPrHI)

class TStrStrIntPrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TStrIntPrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrStrIntPrVHI self) -> TStrStrIntPrVHI
        __init__(TStrStrIntPrVHI self, TStrStrIntPrVHI _HashKeyDatI) -> TStrStrIntPrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const &

        __init__(TStrStrIntPrVHI self, THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * _EndI) -> TStrStrIntPrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const *

        """
        _snap.TStrStrIntPrVHI_swiginit(self, _snap.new_TStrStrIntPrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrStrIntPrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrIntPrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrStrIntPrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrStrIntPrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrStrIntPrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrStrIntPrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrStrIntPrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrStrIntPrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrStrIntPrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrStrIntPrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrStrIntPrVHI

# Register TStrStrIntPrVHI in _snap:
_snap.TStrStrIntPrVHI_swigregister(TStrStrIntPrVHI)

class TStrStrIntKdVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TStrIntKdV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrStrIntKdVHI self) -> TStrStrIntKdVHI
        __init__(TStrStrIntKdVHI self, TStrStrIntKdVHI _HashKeyDatI) -> TStrStrIntKdVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const &

        __init__(TStrStrIntKdVHI self, THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * _EndI) -> TStrStrIntKdVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const *

        """
        _snap.TStrStrIntKdVHI_swiginit(self, _snap.new_TStrStrIntKdVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrStrIntKdVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrStrIntKdVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrStrIntKdVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrStrIntKdVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrStrIntKdVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrStrIntKdVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrStrIntKdVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrStrIntKdVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrStrIntKdVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrStrIntKdVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrStrIntKdVHI

# Register TStrStrIntKdVHI in _snap:
_snap.TStrStrIntKdVHI_swigregister(TStrStrIntKdVHI)

class TStrPrBoolHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrPr,TBool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPrBoolHI self) -> TStrPrBoolHI
        __init__(TStrPrBoolHI self, TStrPrBoolHI _HashKeyDatI) -> TStrPrBoolHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrPr,TBool > const &

        __init__(TStrPrBoolHI self, THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * _EndI) -> TStrPrBoolHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const *

        """
        _snap.TStrPrBoolHI_swiginit(self, _snap.new_TStrPrBoolHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrPrBoolHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrBoolHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrPrBoolHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrPrBoolHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrPrBoolHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrPrBoolHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrPrBoolHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrPrBoolHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrPrBoolHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrPrBoolHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrPrBoolHI

# Register TStrPrBoolHI in _snap:
_snap.TStrPrBoolHI_swigregister(TStrPrBoolHI)

class TStrPrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPrIntHI self) -> TStrPrIntHI
        __init__(TStrPrIntHI self, TStrPrIntHI _HashKeyDatI) -> TStrPrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrPr,TInt > const &

        __init__(TStrPrIntHI self, THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * _EndI) -> TStrPrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const *

        """
        _snap.TStrPrIntHI_swiginit(self, _snap.new_TStrPrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrPrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrPrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrPrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrPrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrPrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrPrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrPrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrPrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrPrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrPrIntHI

# Register TStrPrIntHI in _snap:
_snap.TStrPrIntHI_swigregister(TStrPrIntHI)

class TStrPrFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrPr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPrFltHI self) -> TStrPrFltHI
        __init__(TStrPrFltHI self, TStrPrFltHI _HashKeyDatI) -> TStrPrFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const &

        __init__(TStrPrFltHI self, THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * _EndI) -> TStrPrFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const *

        """
        _snap.TStrPrFltHI_swiginit(self, _snap.new_TStrPrFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrPrFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrPrFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrPrFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrPrFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrPrFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrPrFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrPrFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrPrFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrPrFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrPrFltHI

# Register TStrPrFltHI in _snap:
_snap.TStrPrFltHI_swigregister(TStrPrFltHI)

class TStrPrStrHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrPr,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPrStrHI self) -> TStrPrStrHI
        __init__(TStrPrStrHI self, TStrPrStrHI _HashKeyDatI) -> TStrPrStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrPr,TStr > const &

        __init__(TStrPrStrHI self, THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * _EndI) -> TStrPrStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const *

        """
        _snap.TStrPrStrHI_swiginit(self, _snap.new_TStrPrStrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrPrStrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrStrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrPrStrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrPrStrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrPrStrHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrPrStrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrPrStrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrPrStrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrPrStrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrPrStrHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrPrStrHI

# Register TStrPrStrHI in _snap:
_snap.TStrPrStrHI_swigregister(TStrPrStrHI)

class TStrPrStrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrPr,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPrStrVHI self) -> TStrPrStrVHI
        __init__(TStrPrStrVHI self, TStrPrStrVHI _HashKeyDatI) -> TStrPrStrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const &

        __init__(TStrPrStrVHI self, THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * _EndI) -> TStrPrStrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TStrPrStrVHI_swiginit(self, _snap.new_TStrPrStrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrPrStrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrPrStrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrPrStrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrPrStrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrPrStrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrPrStrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrPrStrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrPrStrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrPrStrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrPrStrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrPrStrVHI

# Register TStrPrStrVHI in _snap:
_snap.TStrPrStrVHI_swigregister(TStrPrStrVHI)

class TStrTrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrTr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrTrIntHI self) -> TStrTrIntHI
        __init__(TStrTrIntHI self, TStrTrIntHI _HashKeyDatI) -> TStrTrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrTr,TInt > const &

        __init__(TStrTrIntHI self, THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * _EndI) -> TStrTrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const *

        """
        _snap.TStrTrIntHI_swiginit(self, _snap.new_TStrTrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrTrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrTrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrTrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrTrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrTrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrTrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrTrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrTrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrTrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrTrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrTrIntHI

# Register TStrTrIntHI in _snap:
_snap.TStrTrIntHI_swigregister(TStrTrIntHI)

class TStrIntPrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrIntPr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrIntHI self) -> TStrIntPrIntHI
        __init__(TStrIntPrIntHI self, TStrIntPrIntHI _HashKeyDatI) -> TStrIntPrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const &

        __init__(TStrIntPrIntHI self, THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * _EndI) -> TStrIntPrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const *

        """
        _snap.TStrIntPrIntHI_swiginit(self, _snap.new_TStrIntPrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrIntPrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrIntPrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrIntPrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrIntPrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrIntPrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrIntPrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrIntPrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrIntPrIntHI

# Register TStrIntPrIntHI in _snap:
_snap.TStrIntPrIntHI_swigregister(TStrIntPrIntHI)

class TStrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrV,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrVHI self) -> TStrVHI
        __init__(TStrVHI self, TStrVHI _HashKeyDatI) -> TStrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrV,TInt > const &

        __init__(TStrVHI self, THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * _EndI) -> TStrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const *

        """
        _snap.TStrVHI_swiginit(self, _snap.new_TStrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrVHI

# Register TStrVHI in _snap:
_snap.TStrVHI_swigregister(TStrVHI)

class TStrVIntVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrV,TIntV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrVIntVHI self) -> TStrVIntVHI
        __init__(TStrVIntVHI self, TStrVIntVHI _HashKeyDatI) -> TStrVIntVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrV,TIntV > const &

        __init__(TStrVIntVHI self, THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * _EndI) -> TStrVIntVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TStrVIntVHI_swiginit(self, _snap.new_TStrVIntVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrVIntVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVIntVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrVIntVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrVIntVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrVIntVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrVIntVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrVIntVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrVIntVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrVIntVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrVIntVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrVIntVHI

# Register TStrVIntVHI in _snap:
_snap.TStrVIntVHI_swigregister(TStrVIntVHI)

class TStrVStrHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrV,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrVStrHI self) -> TStrVStrHI
        __init__(TStrVStrHI self, TStrVStrHI _HashKeyDatI) -> TStrVStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrV,TStr > const &

        __init__(TStrVStrHI self, THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * _EndI) -> TStrVStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const *
        _EndI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const *

        """
        _snap.TStrVStrHI_swiginit(self, _snap.new_TStrVStrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrVStrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVStrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrVStrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrVStrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrVStrHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrVStrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrVStrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrVStrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrVStrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrVStrHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrVStrHI

# Register TStrVStrHI in _snap:
_snap.TStrVStrHI_swigregister(TStrVStrHI)

class TStrVStrVHI(object):
    r"""Proxy of C++ THashKeyDatI< TStrV,TStrV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrVStrVHI self) -> TStrVStrVHI
        __init__(TStrVStrVHI self, TStrVStrVHI _HashKeyDatI) -> TStrVStrVHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStrV,TStrV > const &

        __init__(TStrVStrVHI self, THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * _EndI) -> TStrVStrVHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const *
        _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TStrVStrVHI_swiginit(self, _snap.new_TStrVStrVHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrVStrVHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrVStrVHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrVStrVHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrVStrVHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrVStrVHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrVStrVHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrVStrVHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrVStrVHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrVStrVHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrVStrVHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrVStrVHI

# Register TStrVStrVHI in _snap:
_snap.TStrVStrVHI_swigregister(TStrVStrVHI)

class TCnComV(object):
    r"""Proxy of C++ TVec< TCnCom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TCnComV

    def __init__(self, *args):
        r"""
        __init__(TCnComV self) -> TCnComV
        __init__(TCnComV self, TCnComV Vec) -> TCnComV

        Parameters
        ----------
        Vec: TVec< TCnCom,int > const &

        __init__(TCnComV self, int const & _Vals) -> TCnComV

        Parameters
        ----------
        _Vals: int const &

        __init__(TCnComV self, int const & _MxVals, int const & _Vals) -> TCnComV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TCnComV self, TCnCom _ValT, int const & _Vals) -> TCnComV

        Parameters
        ----------
        _ValT: TCnCom *
        _Vals: int const &

        __init__(TCnComV self, TSIn SIn) -> TCnComV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TCnComV_swiginit(self, _snap.new_TCnComV(*args))
    LoadShM = _swig_new_instance_method(_snap.TCnComV_LoadShM)
    Load = _swig_new_instance_method(_snap.TCnComV_Load)
    Save = _swig_new_instance_method(_snap.TCnComV_Save)
    __add__ = _swig_new_instance_method(_snap.TCnComV___add__)
    __eq__ = _swig_new_instance_method(_snap.TCnComV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TCnComV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TCnComV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TCnComV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TCnComV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TCnComV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TCnComV_Gen)
    GenExt = _swig_new_instance_method(_snap.TCnComV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TCnComV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TCnComV_Reserve)
    Clr = _swig_new_instance_method(_snap.TCnComV_Clr)
    Trunc = _swig_new_instance_method(_snap.TCnComV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TCnComV_Reduce)
    Pack = _swig_new_instance_method(_snap.TCnComV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TCnComV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TCnComV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TCnComV_Empty)
    Len = _swig_new_instance_method(_snap.TCnComV_Len)
    Reserved = _swig_new_instance_method(_snap.TCnComV_Reserved)
    Last = _swig_new_instance_method(_snap.TCnComV_Last)
    LastValN = _swig_new_instance_method(_snap.TCnComV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TCnComV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TCnComV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TCnComV_BegI)
    EndI = _swig_new_instance_method(_snap.TCnComV_EndI)
    GetI = _swig_new_instance_method(_snap.TCnComV_GetI)
    Add = _swig_new_instance_method(_snap.TCnComV_Add)
    AddV = _swig_new_instance_method(_snap.TCnComV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TCnComV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TCnComV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TCnComV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TCnComV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TCnComV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TCnComV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TCnComV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TCnComV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TCnComV_Ins)
    Del = _swig_new_instance_method(_snap.TCnComV_Del)
    DelLast = _swig_new_instance_method(_snap.TCnComV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TCnComV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TCnComV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TCnComV_PutAll)
    Swap = _swig_new_instance_method(_snap.TCnComV_Swap)
    SwapI = _swig_new_static_method(_snap.TCnComV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TCnComV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TCnComV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TCnComV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TCnComV_BSort)
    ISort = _swig_new_instance_method(_snap.TCnComV_ISort)
    Partition = _swig_new_instance_method(_snap.TCnComV_Partition)
    QSort = _swig_new_instance_method(_snap.TCnComV_QSort)
    Sort = _swig_new_instance_method(_snap.TCnComV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TCnComV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TCnComV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TCnComV_Reverse)
    Merge = _swig_new_instance_method(_snap.TCnComV_Merge)
    Intrs = _swig_new_instance_method(_snap.TCnComV_Intrs)
    Union = _swig_new_instance_method(_snap.TCnComV_Union)
    Diff = _swig_new_instance_method(_snap.TCnComV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TCnComV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TCnComV_UnionLen)
    Count = _swig_new_instance_method(_snap.TCnComV_Count)
    SearchBin = _swig_new_instance_method(_snap.TCnComV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TCnComV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TCnComV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TCnComV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TCnComV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TCnComV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TCnComV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TCnComV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TCnComV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TCnComV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TCnComV_GetV)

# Register TCnComV in _snap:
_snap.TCnComV_swigregister(TCnComV)
TCnComV_SwapI = _snap.TCnComV_SwapI
TCnComV_GetV = _snap.TCnComV_GetV

class TStrTAttrPr(object):
    r"""Proxy of C++ TPair< TStr,TAttrType > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrTAttrPr_Val1_get, _snap.TStrTAttrPr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrTAttrPr_Val2_get, _snap.TStrTAttrPr_Val2_set, doc=r"""Val2 : enum TAttrType_""")

    def __init__(self, *args):
        r"""
        __init__(TStrTAttrPr self) -> TStrTAttrPr
        __init__(TStrTAttrPr self, TStrTAttrPr Pair) -> TStrTAttrPr

        Parameters
        ----------
        Pair: TPair< TStr,TAttrType > const &

        __init__(TStrTAttrPr self, TStr _Val1, enum TAttrType_ const & _Val2) -> TStrTAttrPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: enum TAttrType_ const &

        """
        _snap.TStrTAttrPr_swiginit(self, _snap.new_TStrTAttrPr(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrTAttrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrTAttrPr___lt__)
    GetVal = _swig_new_instance_method(_snap.TStrTAttrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrTAttrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrTAttrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrTAttrPr

# Register TStrTAttrPr in _snap:
_snap.TStrTAttrPr_swigregister(TStrTAttrPr)

class Schema(object):
    r"""Proxy of C++ TVec< TPair< TStr,TAttrType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Schema self) -> Schema
        __init__(Schema self, Schema Vec) -> Schema

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,int > const &

        __init__(Schema self, int const & _Vals) -> Schema

        Parameters
        ----------
        _Vals: int const &

        __init__(Schema self, int const & _MxVals, int const & _Vals) -> Schema

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(Schema self, TStrTAttrPr _ValT, int const & _Vals) -> Schema

        Parameters
        ----------
        _ValT: TPair< TStr,TAttrType > *
        _Vals: int const &

        """
        _snap.Schema_swiginit(self, _snap.new_Schema(*args))
    __swig_destroy__ = _snap.delete_Schema
    LoadShM = _swig_new_instance_method(_snap.Schema_LoadShM)
    __add__ = _swig_new_instance_method(_snap.Schema___add__)
    __eq__ = _swig_new_instance_method(_snap.Schema___eq__)
    __lt__ = _swig_new_instance_method(_snap.Schema___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.Schema_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.Schema_GetMemSize)
    Gen = _swig_new_instance_method(_snap.Schema_Gen)
    GenExt = _swig_new_instance_method(_snap.Schema_GenExt)
    IsExt = _swig_new_instance_method(_snap.Schema_IsExt)
    Reserve = _swig_new_instance_method(_snap.Schema_Reserve)
    Clr = _swig_new_instance_method(_snap.Schema_Clr)
    Trunc = _swig_new_instance_method(_snap.Schema_Trunc)
    Reduce = _swig_new_instance_method(_snap.Schema_Reduce)
    Pack = _swig_new_instance_method(_snap.Schema_Pack)
    MoveFrom = _swig_new_instance_method(_snap.Schema_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.Schema_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.Schema_Empty)
    Len = _swig_new_instance_method(_snap.Schema_Len)
    Reserved = _swig_new_instance_method(_snap.Schema_Reserved)
    Last = _swig_new_instance_method(_snap.Schema_Last)
    LastValN = _swig_new_instance_method(_snap.Schema_LastValN)
    LastLast = _swig_new_instance_method(_snap.Schema_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.Schema_GetRndVal)
    BegI = _swig_new_instance_method(_snap.Schema_BegI)
    EndI = _swig_new_instance_method(_snap.Schema_EndI)
    GetI = _swig_new_instance_method(_snap.Schema_GetI)
    Add = _swig_new_instance_method(_snap.Schema_Add)
    AddV = _swig_new_instance_method(_snap.Schema_AddV)
    AddSorted = _swig_new_instance_method(_snap.Schema_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.Schema_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.Schema_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.Schema_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.Schema_AddUnique)
    GetVal = _swig_new_instance_method(_snap.Schema_GetVal)
    SetVal = _swig_new_instance_method(_snap.Schema_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.Schema_GetSubValV)
    Ins = _swig_new_instance_method(_snap.Schema_Ins)
    Del = _swig_new_instance_method(_snap.Schema_Del)
    DelLast = _swig_new_instance_method(_snap.Schema_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.Schema_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.Schema_DelAll)
    PutAll = _swig_new_instance_method(_snap.Schema_PutAll)
    Swap = _swig_new_instance_method(_snap.Schema_Swap)
    SwapI = _swig_new_static_method(_snap.Schema_SwapI)
    NextPerm = _swig_new_instance_method(_snap.Schema_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.Schema_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.Schema_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.Schema_BSort)
    ISort = _swig_new_instance_method(_snap.Schema_ISort)
    Partition = _swig_new_instance_method(_snap.Schema_Partition)
    QSort = _swig_new_instance_method(_snap.Schema_QSort)
    Sort = _swig_new_instance_method(_snap.Schema_Sort)
    IsSorted = _swig_new_instance_method(_snap.Schema_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.Schema_Shuffle)
    Reverse = _swig_new_instance_method(_snap.Schema_Reverse)
    Merge = _swig_new_instance_method(_snap.Schema_Merge)
    Intrs = _swig_new_instance_method(_snap.Schema_Intrs)
    Union = _swig_new_instance_method(_snap.Schema_Union)
    Diff = _swig_new_instance_method(_snap.Schema_Diff)
    IntrsLen = _swig_new_instance_method(_snap.Schema_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.Schema_UnionLen)
    Count = _swig_new_instance_method(_snap.Schema_Count)
    SearchBin = _swig_new_instance_method(_snap.Schema_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.Schema_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.Schema_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.Schema_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.Schema_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.Schema_IsIn)
    IsInBin = _swig_new_instance_method(_snap.Schema_IsInBin)
    GetDat = _swig_new_instance_method(_snap.Schema_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.Schema_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.Schema_GetMxValN)
    GetV = _swig_new_static_method(_snap.Schema_GetV)

# Register Schema in _snap:
_snap.Schema_swigregister(Schema)
Schema_SwapI = _snap.Schema_SwapI
Schema_GetV = _snap.Schema_GetV

class TIntSet(object):
    r"""Proxy of C++ THashSet< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntSet self) -> TIntSet
        __init__(TIntSet self, TIntSet Set) -> TIntSet

        Parameters
        ----------
        Set: THashSet< TInt > const &

        __init__(TIntSet self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntSet

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntSet self, TIntV KeyV) -> TIntSet

        Parameters
        ----------
        KeyV: TVec< TInt > const &

        __init__(TIntSet self, TSIn SIn) -> TIntSet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntSet_swiginit(self, _snap.new_TIntSet(*args))
    Load = _swig_new_instance_method(_snap.TIntSet_Load)
    Save = _swig_new_instance_method(_snap.TIntSet_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntSet___eq__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntSet_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntSet_BegI)
    EndI = _swig_new_instance_method(_snap.TIntSet_EndI)
    GetI = _swig_new_instance_method(_snap.TIntSet_GetI)
    Gen = _swig_new_instance_method(_snap.TIntSet_Gen)
    Clr = _swig_new_instance_method(_snap.TIntSet_Clr)
    Empty = _swig_new_instance_method(_snap.TIntSet_Empty)
    Len = _swig_new_instance_method(_snap.TIntSet_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntSet_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntSet_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntSet_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntSet_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntSet_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntSet_AddKey)
    AddKeyV = _swig_new_instance_method(_snap.TIntSet_AddKeyV)
    DelKey = _swig_new_instance_method(_snap.TIntSet_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntSet_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntSet_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntSet_DelKeyIdV)
    MarkDelKey = _swig_new_instance_method(_snap.TIntSet_MarkDelKey)
    MarkDelKeyId = _swig_new_instance_method(_snap.TIntSet_MarkDelKeyId)
    GetKey = _swig_new_instance_method(_snap.TIntSet_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntSet_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntSet_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntSet_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntSet_IsKeyId)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntSet_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntSet_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntSet_GetKeyV)
    Swap = _swig_new_instance_method(_snap.TIntSet_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntSet_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntSet_Pack)
    GetSet = _swig_new_static_method(_snap.TIntSet_GetSet)
    __swig_destroy__ = _snap.delete_TIntSet

# Register TIntSet in _snap:
_snap.TIntSet_swigregister(TIntSet)
TIntSet_GetSet = _snap.TIntSet_GetSet

class TIntHSI(object):
    r"""Proxy of C++ THashSetKeyI< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntHSI self) -> TIntHSI
        __init__(TIntHSI self, TIntHSI _SetKeyI) -> TIntHSI

        Parameters
        ----------
        _SetKeyI: THashSetKeyI< TInt > const &

        __init__(TIntHSI self, THashSetKeyI< TInt >::TSetKey const * _KeyI, THashSetKeyI< TInt >::TSetKey const * _EndI) -> TIntHSI

        Parameters
        ----------
        _KeyI: THashSetKeyI< TInt >::TSetKey const *
        _EndI: THashSetKeyI< TInt >::TSetKey const *

        """
        _snap.TIntHSI_swiginit(self, _snap.new_TIntHSI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntHSI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntHSI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntHSI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntHSI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntHSI___deref__)
    Next = _swig_new_instance_method(_snap.TIntHSI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntHSI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntHSI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntHSI_GetKey)
    __swig_destroy__ = _snap.delete_TIntHSI
    Val = property(_snap.TIntHSI_Val_get, doc=r"""Val : int""")
    Mn = property(_snap.TIntHSI_Mn_get, doc=r"""Mn : q(const).int""")
    Mx = property(_snap.TIntHSI_Mx_get, doc=r"""Mx : q(const).int""")
    Kilo = property(_snap.TIntHSI_Kilo_get, doc=r"""Kilo : q(const).int""")
    Mega = property(_snap.TIntHSI_Mega_get, doc=r"""Mega : q(const).int""")
    Giga = property(_snap.TIntHSI_Giga_get, doc=r"""Giga : q(const).int""")
    Rnd = property(_snap.TIntHSI_Rnd_get, doc=r"""Rnd : TRnd""")
    Save = _swig_new_instance_method(_snap.TIntHSI_Save)
    __ne__ = _swig_new_instance_method(_snap.TIntHSI___ne__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntHSI_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntHSI_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntHSI_GetSecHashCd)

# Register TIntHSI in _snap:
_snap.TIntHSI_swigregister(TIntHSI)

class TNGraphNodeI(object):
    r"""Proxy of C++ TNGraphNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraphNodeI self) -> TNGraphNodeI
        __init__(TNGraphNodeI self, TNGraph::TNodeI const & NodeI) -> TNGraphNodeI

        Parameters
        ----------
        NodeI: TNGraph::TNodeI const &

        """
        _snap.TNGraphNodeI_swiginit(self, _snap.new_TNGraphNodeI(*args))
    Next = _swig_new_instance_method(_snap.TNGraphNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNGraphNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNGraphNodeI___eq__)
    GetNI = _swig_new_instance_method(_snap.TNGraphNodeI_GetNI)
    GetId = _swig_new_instance_method(_snap.TNGraphNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TNGraphNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TNGraphNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TNGraphNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TNGraphNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TNGraphNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TNGraphNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TNGraphNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TNGraphNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TNGraphNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TNGraphNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TNGraphNodeI

# Register TNGraphNodeI in _snap:
_snap.TNGraphNodeI_swigregister(TNGraphNodeI)

class TDirNetNodeI(object):
    r"""Proxy of C++ TDirNetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TDirNetNodeI self) -> TDirNetNodeI
        __init__(TDirNetNodeI self, TDirNet::TNodeI const & NodeI) -> TDirNetNodeI

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &

        """
        _snap.TDirNetNodeI_swiginit(self, _snap.new_TDirNetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TDirNetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TDirNetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TDirNetNodeI___eq__)
    GetId = _swig_new_instance_method(_snap.TDirNetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TDirNetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TDirNetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TDirNetNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TDirNetNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TDirNetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TDirNetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TDirNetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TDirNetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TDirNetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TDirNetNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TDirNetNodeI

# Register TDirNetNodeI in _snap:
_snap.TDirNetNodeI_swigregister(TDirNetNodeI)

class TNGraphEdgeI(object):
    r"""Proxy of C++ TNGraphEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraphEdgeI self) -> TNGraphEdgeI
        __init__(TNGraphEdgeI self, TNGraph::TEdgeI const & EdgeI) -> TNGraphEdgeI

        Parameters
        ----------
        EdgeI: TNGraph::TEdgeI const &

        """
        _snap.TNGraphEdgeI_swiginit(self, _snap.new_TNGraphEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TNGraphEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNGraphEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNGraphEdgeI___eq__)
    GetEI = _swig_new_instance_method(_snap.TNGraphEdgeI_GetEI)
    GetId = _swig_new_instance_method(_snap.TNGraphEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TNGraphEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TNGraphEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TNGraphEdgeI

# Register TNGraphEdgeI in _snap:
_snap.TNGraphEdgeI_swigregister(TNGraphEdgeI)

class TDirNetEdgeI(object):
    r"""Proxy of C++ TDirNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TDirNetEdgeI self) -> TDirNetEdgeI
        __init__(TDirNetEdgeI self, TDirNet::TEdgeI const & EdgeI) -> TDirNetEdgeI

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &

        """
        _snap.TDirNetEdgeI_swiginit(self, _snap.new_TDirNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TDirNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TDirNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TDirNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TDirNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TDirNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TDirNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TDirNetEdgeI

# Register TDirNetEdgeI in _snap:
_snap.TDirNetEdgeI_swigregister(TDirNetEdgeI)

class TUNGraphNodeI(object):
    r"""Proxy of C++ TUNGraphNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraphNodeI self) -> TUNGraphNodeI
        __init__(TUNGraphNodeI self, TUNGraph::TNodeI const & NodeI) -> TUNGraphNodeI

        Parameters
        ----------
        NodeI: TUNGraph::TNodeI const &

        """
        _snap.TUNGraphNodeI_swiginit(self, _snap.new_TUNGraphNodeI(*args))
    Next = _swig_new_instance_method(_snap.TUNGraphNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUNGraphNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUNGraphNodeI___eq__)
    GetNI = _swig_new_instance_method(_snap.TUNGraphNodeI_GetNI)
    GetId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TUNGraphNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TUNGraphNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TUNGraphNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TUNGraphNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TUNGraphNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TUNGraphNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TUNGraphNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TUNGraphNodeI

# Register TUNGraphNodeI in _snap:
_snap.TUNGraphNodeI_swigregister(TUNGraphNodeI)

class TUndirNetNodeI(object):
    r"""Proxy of C++ TUndirNetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUndirNetNodeI self) -> TUndirNetNodeI
        __init__(TUndirNetNodeI self, TUndirNet::TNodeI const & NodeI) -> TUndirNetNodeI

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &

        """
        _snap.TUndirNetNodeI_swiginit(self, _snap.new_TUndirNetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TUndirNetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUndirNetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUndirNetNodeI___eq__)
    GetId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TUndirNetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TUndirNetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TUndirNetNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TUndirNetNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TUndirNetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TUndirNetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TUndirNetNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TUndirNetNodeI

# Register TUndirNetNodeI in _snap:
_snap.TUndirNetNodeI_swigregister(TUndirNetNodeI)

class TUNGraphEdgeI(object):
    r"""Proxy of C++ TUNGraphEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraphEdgeI self) -> TUNGraphEdgeI
        __init__(TUNGraphEdgeI self, TUNGraph::TEdgeI const & EdgeI) -> TUNGraphEdgeI

        Parameters
        ----------
        EdgeI: TUNGraph::TEdgeI const &

        """
        _snap.TUNGraphEdgeI_swiginit(self, _snap.new_TUNGraphEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TUNGraphEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUNGraphEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUNGraphEdgeI___eq__)
    GetEI = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetEI)
    GetId = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TUNGraphEdgeI

# Register TUNGraphEdgeI in _snap:
_snap.TUNGraphEdgeI_swigregister(TUNGraphEdgeI)

class TUndirNetEdgeI(object):
    r"""Proxy of C++ TUndirNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUndirNetEdgeI self) -> TUndirNetEdgeI
        __init__(TUndirNetEdgeI self, TUndirNet::TEdgeI const & EdgeI) -> TUndirNetEdgeI

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &

        """
        _snap.TUndirNetEdgeI_swiginit(self, _snap.new_TUndirNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TUndirNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUndirNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUndirNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TUndirNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TUndirNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TUndirNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TUndirNetEdgeI

# Register TUndirNetEdgeI in _snap:
_snap.TUndirNetEdgeI_swigregister(TUndirNetEdgeI)

class TNEANetNodeI(object):
    r"""Proxy of C++ TNEANetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetNodeI self) -> TNEANetNodeI
        __init__(TNEANetNodeI self, TNEANet::TNodeI const & NodeI) -> TNEANetNodeI

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &

        """
        _snap.TNEANetNodeI_swiginit(self, _snap.new_TNEANetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetNodeI___eq__)
    GetNI = _swig_new_instance_method(_snap.TNEANetNodeI_GetNI)
    GetId = _swig_new_instance_method(_snap.TNEANetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TNEANetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TNEANetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TNEANetNodeI_GetOutDeg)
    GetInNId = _swig_new_instance_method(_snap.TNEANetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TNEANetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TNEANetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TNEANetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TNEANetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TNEANetNodeI_IsNbrNId)
    GetInEId = _swig_new_instance_method(_snap.TNEANetNodeI_GetInEId)
    GetOutEId = _swig_new_instance_method(_snap.TNEANetNodeI_GetOutEId)
    GetNbrEId = _swig_new_instance_method(_snap.TNEANetNodeI_GetNbrEId)
    IsInEId = _swig_new_instance_method(_snap.TNEANetNodeI_IsInEId)
    IsOutEId = _swig_new_instance_method(_snap.TNEANetNodeI_IsOutEId)
    IsNbrEId = _swig_new_instance_method(_snap.TNEANetNodeI_IsNbrEId)
    GetAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetAttrNames)
    GetAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetAttrVal)
    GetIntAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntAttrNames)
    GetIntAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntAttrVal)
    GetIntVAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntVAttrNames)
    GetIntVAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntVAttrVal)
    GetStrAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetStrAttrNames)
    GetStrAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetStrAttrVal)
    GetFltAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetFltAttrNames)
    GetFltAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetFltAttrVal)
    __swig_destroy__ = _snap.delete_TNEANetNodeI

# Register TNEANetNodeI in _snap:
_snap.TNEANetNodeI_swigregister(TNEANetNodeI)

class TNEANetEdgeI(object):
    r"""Proxy of C++ TNEANetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetEdgeI self) -> TNEANetEdgeI
        __init__(TNEANetEdgeI self, TNEANet::TEdgeI const & EdgeI) -> TNEANetEdgeI

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        _snap.TNEANetEdgeI_swiginit(self, _snap.new_TNEANetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetEdgeI___eq__)
    GetEI = _swig_new_instance_method(_snap.TNEANetEdgeI_GetEI)
    GetId = _swig_new_instance_method(_snap.TNEANetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TNEANetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TNEANetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TNEANetEdgeI

# Register TNEANetEdgeI in _snap:
_snap.TNEANetEdgeI_swigregister(TNEANetEdgeI)

class TNEANetAIntI(object):
    r"""Proxy of C++ TNEANetAIntI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetAIntI self) -> TNEANetAIntI
        __init__(TNEANetAIntI self, TInt HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAIntI

        Parameters
        ----------
        HIter: TIntVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAIntI self, TNEANet::TAIntI const & I) -> TNEANetAIntI

        Parameters
        ----------
        I: TNEANet::TAIntI const &

        """
        _snap.TNEANetAIntI_swiginit(self, _snap.new_TNEANetAIntI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetAIntI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetAIntI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetAIntI___eq__)
    GetDat = _swig_new_instance_method(_snap.TNEANetAIntI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TNEANetAIntI_IsDeleted)
    __swig_destroy__ = _snap.delete_TNEANetAIntI

# Register TNEANetAIntI in _snap:
_snap.TNEANetAIntI_swigregister(TNEANetAIntI)

class TNEANetAStrI(object):
    r"""Proxy of C++ TNEANetAStrI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetAStrI self) -> TNEANetAStrI
        __init__(TNEANetAStrI self, TStr HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAStrI

        Parameters
        ----------
        HIter: TStrVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAStrI self, TNEANet::TAStrI const & I) -> TNEANetAStrI

        Parameters
        ----------
        I: TNEANet::TAStrI const &

        """
        _snap.TNEANetAStrI_swiginit(self, _snap.new_TNEANetAStrI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetAStrI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetAStrI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetAStrI___eq__)
    GetDat = _swig_new_instance_method(_snap.TNEANetAStrI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TNEANetAStrI_IsDeleted)
    __swig_destroy__ = _snap.delete_TNEANetAStrI

# Register TNEANetAStrI in _snap:
_snap.TNEANetAStrI_swigregister(TNEANetAStrI)

class TNEANetAFltI(object):
    r"""Proxy of C++ TNEANetAFltI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetAFltI self) -> TNEANetAFltI
        __init__(TNEANetAFltI self, TFlt HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAFltI

        Parameters
        ----------
        HIter: TFltVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAFltI self, TNEANet::TAFltI const & I) -> TNEANetAFltI

        Parameters
        ----------
        I: TNEANet::TAFltI const &

        """
        _snap.TNEANetAFltI_swiginit(self, _snap.new_TNEANetAFltI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetAFltI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetAFltI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetAFltI___eq__)
    GetDat = _swig_new_instance_method(_snap.TNEANetAFltI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TNEANetAFltI_IsDeleted)
    __swig_destroy__ = _snap.delete_TNEANetAFltI

# Register TNEANetAFltI in _snap:
_snap.TNEANetAFltI_swigregister(TNEANetAFltI)

class TModeNetNodeI(object):
    r"""Proxy of C++ TModeNetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TModeNetNodeI self) -> TModeNetNodeI
        __init__(TModeNetNodeI self, TModeNet::TNodeI const & NodeI) -> TModeNetNodeI

        Parameters
        ----------
        NodeI: TModeNet::TNodeI const &

        """
        _snap.TModeNetNodeI_swiginit(self, _snap.new_TModeNetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TModeNetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TModeNetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TModeNetNodeI___eq__)
    GetId = _swig_new_instance_method(_snap.TModeNetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TModeNetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TModeNetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TModeNetNodeI_GetOutDeg)
    GetInNId = _swig_new_instance_method(_snap.TModeNetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TModeNetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TModeNetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TModeNetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TModeNetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TModeNetNodeI_IsNbrNId)
    GetInEId = _swig_new_instance_method(_snap.TModeNetNodeI_GetInEId)
    GetOutEId = _swig_new_instance_method(_snap.TModeNetNodeI_GetOutEId)
    GetNbrEId = _swig_new_instance_method(_snap.TModeNetNodeI_GetNbrEId)
    IsInEId = _swig_new_instance_method(_snap.TModeNetNodeI_IsInEId)
    IsOutEId = _swig_new_instance_method(_snap.TModeNetNodeI_IsOutEId)
    IsNbrEId = _swig_new_instance_method(_snap.TModeNetNodeI_IsNbrEId)
    GetAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetAttrNames)
    GetAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetAttrVal)
    GetIntAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntAttrNames)
    GetIntAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntAttrVal)
    GetIntVAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntVAttrNames)
    GetIntVAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntVAttrVal)
    GetStrAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetStrAttrNames)
    GetStrAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetStrAttrVal)
    GetFltAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetFltAttrNames)
    GetFltAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetFltAttrVal)
    __swig_destroy__ = _snap.delete_TModeNetNodeI

# Register TModeNetNodeI in _snap:
_snap.TModeNetNodeI_swigregister(TModeNetNodeI)

class TModeNetEdgeI(object):
    r"""Proxy of C++ TModeNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TModeNetEdgeI self) -> TModeNetEdgeI
        __init__(TModeNetEdgeI self, TNEANet::TEdgeI const & EdgeI) -> TModeNetEdgeI

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        _snap.TModeNetEdgeI_swiginit(self, _snap.new_TModeNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TModeNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TModeNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TModeNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TModeNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TModeNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TModeNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TModeNetEdgeI

# Register TModeNetEdgeI in _snap:
_snap.TModeNetEdgeI_swigregister(TModeNetEdgeI)

class TCrossNetEdgeI(object):
    r"""Proxy of C++ TCrossNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetEdgeI self) -> TCrossNetEdgeI
        __init__(TCrossNetEdgeI self, TCrossNet::TCrossEdgeI const & EdgeI) -> TCrossNetEdgeI

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &

        """
        _snap.TCrossNetEdgeI_swiginit(self, _snap.new_TCrossNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TCrossNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TCrossNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TCrossNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TCrossNetEdgeI

# Register TCrossNetEdgeI in _snap:
_snap.TCrossNetEdgeI_swigregister(TCrossNetEdgeI)

class TCrossNetAIntI(object):
    r"""Proxy of C++ TCrossNetAIntI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetAIntI self) -> TCrossNetAIntI
        __init__(TCrossNetAIntI self, TInt HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAIntI

        Parameters
        ----------
        HIter: TIntVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAIntI self, TCrossNet::TAIntI const & I) -> TCrossNetAIntI

        Parameters
        ----------
        I: TCrossNet::TAIntI const &

        """
        _snap.TCrossNetAIntI_swiginit(self, _snap.new_TCrossNetAIntI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetAIntI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetAIntI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetAIntI___eq__)
    GetDat = _swig_new_instance_method(_snap.TCrossNetAIntI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TCrossNetAIntI_IsDeleted)
    __swig_destroy__ = _snap.delete_TCrossNetAIntI

# Register TCrossNetAIntI in _snap:
_snap.TCrossNetAIntI_swigregister(TCrossNetAIntI)

class TCrossNetAStrI(object):
    r"""Proxy of C++ TCrossNetAStrI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetAStrI self) -> TCrossNetAStrI
        __init__(TCrossNetAStrI self, TStr HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAStrI

        Parameters
        ----------
        HIter: TStrVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAStrI self, TCrossNet::TAStrI const & I) -> TCrossNetAStrI

        Parameters
        ----------
        I: TCrossNet::TAStrI const &

        """
        _snap.TCrossNetAStrI_swiginit(self, _snap.new_TCrossNetAStrI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetAStrI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetAStrI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetAStrI___eq__)
    GetDat = _swig_new_instance_method(_snap.TCrossNetAStrI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TCrossNetAStrI_IsDeleted)
    __swig_destroy__ = _snap.delete_TCrossNetAStrI

# Register TCrossNetAStrI in _snap:
_snap.TCrossNetAStrI_swigregister(TCrossNetAStrI)

class TCrossNetAFltI(object):
    r"""Proxy of C++ TCrossNetAFltI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetAFltI self) -> TCrossNetAFltI
        __init__(TCrossNetAFltI self, TFlt HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAFltI

        Parameters
        ----------
        HIter: TFltVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAFltI self, TCrossNet::TAFltI const & I) -> TCrossNetAFltI

        Parameters
        ----------
        I: TCrossNet::TAFltI const &

        """
        _snap.TCrossNetAFltI_swiginit(self, _snap.new_TCrossNetAFltI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetAFltI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetAFltI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetAFltI___eq__)
    GetDat = _swig_new_instance_method(_snap.TCrossNetAFltI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TCrossNetAFltI_IsDeleted)
    __swig_destroy__ = _snap.delete_TCrossNetAFltI

# Register TCrossNetAFltI in _snap:
_snap.TCrossNetAFltI_swigregister(TCrossNetAFltI)

class TMMNetModeNetI(object):
    r"""Proxy of C++ TMMNetModeNetI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMMNetModeNetI self) -> TMMNetModeNetI
        __init__(TMMNetModeNetI self, TMMNet::TModeNetI const & NodeI) -> TMMNetModeNetI

        Parameters
        ----------
        NodeI: TMMNet::TModeNetI const &

        """
        _snap.TMMNetModeNetI_swiginit(self, _snap.new_TMMNetModeNetI(*args))
    Next = _swig_new_instance_method(_snap.TMMNetModeNetI_Next)
    __lt__ = _swig_new_instance_method(_snap.TMMNetModeNetI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TMMNetModeNetI___eq__)
    GetModeId = _swig_new_instance_method(_snap.TMMNetModeNetI_GetModeId)
    GetModeNet = _swig_new_instance_method(_snap.TMMNetModeNetI_GetModeNet)
    __swig_destroy__ = _snap.delete_TMMNetModeNetI

# Register TMMNetModeNetI in _snap:
_snap.TMMNetModeNetI_swigregister(TMMNetModeNetI)

class TMMNetCrossNetI(object):
    r"""Proxy of C++ TMMNetCrossNetI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMMNetCrossNetI self) -> TMMNetCrossNetI
        __init__(TMMNetCrossNetI self, TMMNet::TCrossNetI const & EdgeI) -> TMMNetCrossNetI

        Parameters
        ----------
        EdgeI: TMMNet::TCrossNetI const &

        """
        _snap.TMMNetCrossNetI_swiginit(self, _snap.new_TMMNetCrossNetI(*args))
    Next = _swig_new_instance_method(_snap.TMMNetCrossNetI_Next)
    __lt__ = _swig_new_instance_method(_snap.TMMNetCrossNetI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TMMNetCrossNetI___eq__)
    GetCrossId = _swig_new_instance_method(_snap.TMMNetCrossNetI_GetCrossId)
    GetCrossNet = _swig_new_instance_method(_snap.TMMNetCrossNetI_GetCrossNet)
    __swig_destroy__ = _snap.delete_TMMNetCrossNetI

# Register TMMNetCrossNetI in _snap:
_snap.TMMNetCrossNetI_swigregister(TMMNetCrossNetI)

TPrGraph = _snap.TPrGraph
LoadModeNetToNet = _snap.LoadModeNetToNet
LoadCrossNetToNet = _snap.LoadCrossNetToNet
GetRndWalkRestart_PUNGraph = _snap.GetRndWalkRestart_PUNGraph
GetRndWalkRestart_PNGraph = _snap.GetRndWalkRestart_PNGraph
GetRndWalkRestart_PNEANet = _snap.GetRndWalkRestart_PNEANet


#
# define __getitem__ for [] addressing
#

def getitem_vec(self, i):
    return self.GetVal(i)

def setitem_vec(self, i, val):
    self.SetVal(i, val)

def len_vec(self):
    return self.Len()

def delitem_vec(self,  i):
    self.Del(i)

#
# define iterator for TVec
#

class IterVec:
    def __init__(self, vec):
        self.vec = vec
        self.count = -1

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.count+1 < self.vec.Len():
            self.count += 1
            return self.vec[self.count]

        raise StopIteration

def itervec(self):
    return IterVec(self)

# expand TVec types with methods __iter__ and __getitem__

TIntV.__getitem__ = getitem_vec
TIntV.__setitem__ = setitem_vec
TIntV.__iter__ = itervec
TIntV.__len__ = len_vec
TIntV.__delitem__ = delitem_vec
TFltV.__getitem__ = getitem_vec
TFltV.__setitem__ = setitem_vec
TFltV.__iter__ = itervec
TFltV.__len__ = len_vec
TFltV.__delitem__ = delitem_vec
TStrV.__getitem__ = getitem_vec
TStrV.__setitem__ = setitem_vec
TStrV.__iter__ = itervec
TStrV.__len__ = len_vec
TStrV.__delitem__ = delitem_vec
TIntPrV.__getitem__ = getitem_vec
TIntPrV.__setitem__ = setitem_vec
TIntPrV.__iter__ = itervec
TIntPrV.__len__ = len_vec
TIntPrV.__delitem__ = delitem_vec
TFltPrV.__getitem__ = getitem_vec
TFltPrV.__setitem__ = setitem_vec
TFltPrV.__iter__ = itervec
TFltPrV.__len__ = len_vec
TFltPrV.__delitem__ = delitem_vec
TStrIntPrV.__getitem__ = getitem_vec
TStrIntPrV.__setitem__ = setitem_vec
TStrIntPrV.__iter__ = itervec
TStrIntPrV.__len__ = len_vec
TStrIntPrV.__delitem__ = delitem_vec
TIntTrV.__getitem__ = getitem_vec
TIntTrV.__setitem__ = setitem_vec
TIntTrV.__iter__ = itervec
TIntTrV.__len__ = len_vec
TIntTrV.__delitem__ = delitem_vec
TIntFltKdV.__getitem__ = getitem_vec
TIntFltKdV.__setitem__ = setitem_vec
TIntFltKdV.__iter__ = itervec
TIntFltKdV.__len__ = len_vec
TIntFltKdV.__delitem__ = delitem_vec
TIntIntVV.__getitem__ = getitem_vec
TIntIntVV.__setitem__ = setitem_vec
TIntIntVV.__iter__ = itervec
TIntIntVV.__len__ = len_vec
TIntIntVV.__delitem__ = delitem_vec
PNEANetV.__getitem__ = getitem_vec
PNEANetV.__setitem__ = setitem_vec
PNEANetV.__iter__ = itervec
PNEANetV.__len__ = len_vec
PNEANetV.__delitem__ = delitem_vec
TFltVFltV.__getitem__ = getitem_vec
TFltVFltV.__setitem__ = setitem_vec
TFltVFltV.__iter__ = itervec
TFltVFltV.__len__ = len_vec
TFltVFltV.__delitem__ = delitem_vec
TCnComV.__getitem__ = getitem_vec
TCnComV.__setitem__ = setitem_vec
TCnComV.__iter__ = itervec
TCnComV.__len__ = len_vec
TCnComV.__delitem__ = delitem_vec
TCnCom.__getitem__ = getitem_vec
TCnCom.__setitem__ = setitem_vec
TCnCom.__iter__ = itervec
TCnCom.__len__ = len_vec
TCnCom.__delitem__ = delitem_vec
Schema.__getitem__ = getitem_vec
Schema.__setitem__ = setitem_vec
Schema.__iter__ = itervec
Schema.__len__ = len_vec
Schema.__delitem__ = delitem_vec


TBoolV.__getitem__ = getitem_vec
TBoolV.__setitem__ = setitem_vec
TBoolV.__iter__ = itervec
TBoolV.__len__ = len_vec
TBoolV.__delitem__ = delitem_vec
TChV.__getitem__ = getitem_vec
TChV.__setitem__ = setitem_vec
TChV.__iter__ = itervec
TChV.__len__ = len_vec
TChV.__delitem__ = delitem_vec
TUChV.__getitem__ = getitem_vec
TUChV.__setitem__ = setitem_vec
TUChV.__iter__ = itervec
TUChV.__len__ = len_vec
TUChV.__delitem__ = delitem_vec
TUIntV.__getitem__ = getitem_vec
TUIntV.__setitem__ = setitem_vec
TUIntV.__iter__ = itervec
TUIntV.__len__ = len_vec
TUIntV.__delitem__ = delitem_vec
TUInt64V.__getitem__ = getitem_vec
TUInt64V.__setitem__ = setitem_vec
TUInt64V.__iter__ = itervec
TUInt64V.__len__ = len_vec
TUInt64V.__delitem__ = delitem_vec
TSFltV.__getitem__ = getitem_vec
TSFltV.__setitem__ = setitem_vec
TSFltV.__iter__ = itervec
TSFltV.__len__ = len_vec
TSFltV.__delitem__ = delitem_vec
TAscFltV.__getitem__ = getitem_vec
TAscFltV.__setitem__ = setitem_vec
TAscFltV.__iter__ = itervec
TAscFltV.__len__ = len_vec
TAscFltV.__delitem__ = delitem_vec
TChAV.__getitem__ = getitem_vec
TChAV.__setitem__ = setitem_vec
TChAV.__iter__ = itervec
TChAV.__len__ = len_vec
TChAV.__delitem__ = delitem_vec
TIntQuV.__getitem__ = getitem_vec
TIntQuV.__setitem__ = setitem_vec
TIntQuV.__iter__ = itervec
TIntQuV.__len__ = len_vec
TIntQuV.__delitem__ = delitem_vec
TFltTrV.__getitem__ = getitem_vec
TFltTrV.__setitem__ = setitem_vec
TFltTrV.__iter__ = itervec
TFltTrV.__len__ = len_vec
TFltTrV.__delitem__ = delitem_vec
TIntKdV.__getitem__ = getitem_vec
TIntKdV.__setitem__ = setitem_vec
TIntKdV.__iter__ = itervec
TIntKdV.__len__ = len_vec
TIntKdV.__delitem__ = delitem_vec
TUChIntPrV.__getitem__ = getitem_vec
TUChIntPrV.__setitem__ = setitem_vec
TUChIntPrV.__iter__ = itervec
TUChIntPrV.__len__ = len_vec
TUChIntPrV.__delitem__ = delitem_vec
TUChUInt64PrV.__getitem__ = getitem_vec
TUChUInt64PrV.__setitem__ = setitem_vec
TUChUInt64PrV.__iter__ = itervec
TUChUInt64PrV.__len__ = len_vec
TUChUInt64PrV.__delitem__ = delitem_vec
TIntUInt64PrV.__getitem__ = getitem_vec
TIntUInt64PrV.__setitem__ = setitem_vec
TIntUInt64PrV.__iter__ = itervec
TIntUInt64PrV.__len__ = len_vec
TIntUInt64PrV.__delitem__ = delitem_vec
TIntUInt64KdV.__getitem__ = getitem_vec
TIntUInt64KdV.__setitem__ = setitem_vec
TIntUInt64KdV.__iter__ = itervec
TIntUInt64KdV.__len__ = len_vec
TIntUInt64KdV.__delitem__ = delitem_vec
TIntFltPrV.__getitem__ = getitem_vec
TIntFltPrV.__setitem__ = setitem_vec
TIntFltPrV.__iter__ = itervec
TIntFltPrV.__len__ = len_vec
TIntFltPrV.__delitem__ = delitem_vec
TIntFltPrKdV.__getitem__ = getitem_vec
TIntFltPrKdV.__setitem__ = setitem_vec
TIntFltPrKdV.__iter__ = itervec
TIntFltPrKdV.__len__ = len_vec
TIntFltPrKdV.__delitem__ = delitem_vec
TFltIntPrV.__getitem__ = getitem_vec
TFltIntPrV.__setitem__ = setitem_vec
TFltIntPrV.__iter__ = itervec
TFltIntPrV.__len__ = len_vec
TFltIntPrV.__delitem__ = delitem_vec
TFltUInt64PrV.__getitem__ = getitem_vec
TFltUInt64PrV.__setitem__ = setitem_vec
TFltUInt64PrV.__iter__ = itervec
TFltUInt64PrV.__len__ = len_vec
TFltUInt64PrV.__delitem__ = delitem_vec
TFltStrPrV.__getitem__ = getitem_vec
TFltStrPrV.__setitem__ = setitem_vec
TFltStrPrV.__iter__ = itervec
TFltStrPrV.__len__ = len_vec
TFltStrPrV.__delitem__ = delitem_vec
TAscFltStrPrV.__getitem__ = getitem_vec
TAscFltStrPrV.__setitem__ = setitem_vec
TAscFltStrPrV.__iter__ = itervec
TAscFltStrPrV.__len__ = len_vec
TAscFltStrPrV.__delitem__ = delitem_vec
TIntStrPrV.__getitem__ = getitem_vec
TIntStrPrV.__setitem__ = setitem_vec
TIntStrPrV.__iter__ = itervec
TIntStrPrV.__len__ = len_vec
TIntStrPrV.__delitem__ = delitem_vec
TIntIntStrTrV.__getitem__ = getitem_vec
TIntIntStrTrV.__setitem__ = setitem_vec
TIntIntStrTrV.__iter__ = itervec
TIntIntStrTrV.__len__ = len_vec
TIntIntStrTrV.__delitem__ = delitem_vec
TIntIntFltTrV.__getitem__ = getitem_vec
TIntIntFltTrV.__setitem__ = setitem_vec
TIntIntFltTrV.__iter__ = itervec
TIntIntFltTrV.__len__ = len_vec
TIntIntFltTrV.__delitem__ = delitem_vec
TIntFltIntTrV.__getitem__ = getitem_vec
TIntFltIntTrV.__setitem__ = setitem_vec
TIntFltIntTrV.__iter__ = itervec
TIntFltIntTrV.__len__ = len_vec
TIntFltIntTrV.__delitem__ = delitem_vec
TIntStrIntTrV.__getitem__ = getitem_vec
TIntStrIntTrV.__setitem__ = setitem_vec
TIntStrIntTrV.__iter__ = itervec
TIntStrIntTrV.__len__ = len_vec
TIntStrIntTrV.__delitem__ = delitem_vec
TIntKdV.__getitem__ = getitem_vec
TIntKdV.__setitem__ = setitem_vec
TIntKdV.__iter__ = itervec
TIntKdV.__len__ = len_vec
TIntKdV.__delitem__ = delitem_vec
TUIntIntKdV.__getitem__ = getitem_vec
TUIntIntKdV.__setitem__ = setitem_vec
TUIntIntKdV.__iter__ = itervec
TUIntIntKdV.__len__ = len_vec
TUIntIntKdV.__delitem__ = delitem_vec
TIntPrFltKdV.__getitem__ = getitem_vec
TIntPrFltKdV.__setitem__ = setitem_vec
TIntPrFltKdV.__iter__ = itervec
TIntPrFltKdV.__len__ = len_vec
TIntPrFltKdV.__delitem__ = delitem_vec
TIntStrKdV.__getitem__ = getitem_vec
TIntStrKdV.__setitem__ = setitem_vec
TIntStrKdV.__iter__ = itervec
TIntStrKdV.__len__ = len_vec
TIntStrKdV.__delitem__ = delitem_vec
TIntStrPrPrV.__getitem__ = getitem_vec
TIntStrPrPrV.__setitem__ = setitem_vec
TIntStrPrPrV.__iter__ = itervec
TIntStrPrPrV.__len__ = len_vec
TIntStrPrPrV.__delitem__ = delitem_vec
TIntStrVPrV.__getitem__ = getitem_vec
TIntStrVPrV.__setitem__ = setitem_vec
TIntStrVPrV.__iter__ = itervec
TIntStrVPrV.__len__ = len_vec
TIntStrVPrV.__delitem__ = delitem_vec
TIntIntVIntTrV.__getitem__ = getitem_vec
TIntIntVIntTrV.__setitem__ = setitem_vec
TIntIntVIntTrV.__iter__ = itervec
TIntIntVIntTrV.__len__ = len_vec
TIntIntVIntTrV.__delitem__ = delitem_vec
TIntIntIntVTrV.__getitem__ = getitem_vec
TIntIntIntVTrV.__setitem__ = setitem_vec
TIntIntIntVTrV.__iter__ = itervec
TIntIntIntVTrV.__len__ = len_vec
TIntIntIntVTrV.__delitem__ = delitem_vec
TUInt64IntPrV.__getitem__ = getitem_vec
TUInt64IntPrV.__setitem__ = setitem_vec
TUInt64IntPrV.__iter__ = itervec
TUInt64IntPrV.__len__ = len_vec
TUInt64IntPrV.__delitem__ = delitem_vec
TUInt64FltPrV.__getitem__ = getitem_vec
TUInt64FltPrV.__setitem__ = setitem_vec
TUInt64FltPrV.__iter__ = itervec
TUInt64FltPrV.__len__ = len_vec
TUInt64FltPrV.__delitem__ = delitem_vec
TUInt64StrPrV.__getitem__ = getitem_vec
TUInt64StrPrV.__setitem__ = setitem_vec
TUInt64StrPrV.__iter__ = itervec
TUInt64StrPrV.__len__ = len_vec
TUInt64StrPrV.__delitem__ = delitem_vec
TUInt64IntKdV.__getitem__ = getitem_vec
TUInt64IntKdV.__setitem__ = setitem_vec
TUInt64IntKdV.__iter__ = itervec
TUInt64IntKdV.__len__ = len_vec
TUInt64IntKdV.__delitem__ = delitem_vec
TUInt64FltKdV.__getitem__ = getitem_vec
TUInt64FltKdV.__setitem__ = setitem_vec
TUInt64FltKdV.__iter__ = itervec
TUInt64FltKdV.__len__ = len_vec
TUInt64FltKdV.__delitem__ = delitem_vec
TUInt64StrKdV.__getitem__ = getitem_vec
TUInt64StrKdV.__setitem__ = setitem_vec
TUInt64StrKdV.__iter__ = itervec
TUInt64StrKdV.__len__ = len_vec
TUInt64StrKdV.__delitem__ = delitem_vec
TFltBoolKdV.__getitem__ = getitem_vec
TFltBoolKdV.__setitem__ = setitem_vec
TFltBoolKdV.__iter__ = itervec
TFltBoolKdV.__len__ = len_vec
TFltBoolKdV.__delitem__ = delitem_vec
TFltIntKdV.__getitem__ = getitem_vec
TFltIntKdV.__setitem__ = setitem_vec
TFltIntKdV.__iter__ = itervec
TFltIntKdV.__len__ = len_vec
TFltIntKdV.__delitem__ = delitem_vec
TFltUInt64KdV.__getitem__ = getitem_vec
TFltUInt64KdV.__setitem__ = setitem_vec
TFltUInt64KdV.__iter__ = itervec
TFltUInt64KdV.__len__ = len_vec
TFltUInt64KdV.__delitem__ = delitem_vec
TFltIntPrKdV.__getitem__ = getitem_vec
TFltIntPrKdV.__setitem__ = setitem_vec
TFltIntPrKdV.__iter__ = itervec
TFltIntPrKdV.__len__ = len_vec
TFltIntPrKdV.__delitem__ = delitem_vec
TFltKdV.__getitem__ = getitem_vec
TFltKdV.__setitem__ = setitem_vec
TFltKdV.__iter__ = itervec
TFltKdV.__len__ = len_vec
TFltKdV.__delitem__ = delitem_vec
TFltStrKdV.__getitem__ = getitem_vec
TFltStrKdV.__setitem__ = setitem_vec
TFltStrKdV.__iter__ = itervec
TFltStrKdV.__len__ = len_vec
TFltStrKdV.__delitem__ = delitem_vec
TFltStrPrPrV.__getitem__ = getitem_vec
TFltStrPrPrV.__setitem__ = setitem_vec
TFltStrPrPrV.__iter__ = itervec
TFltStrPrPrV.__len__ = len_vec
TFltStrPrPrV.__delitem__ = delitem_vec
TFltIntIntTrV.__getitem__ = getitem_vec
TFltIntIntTrV.__setitem__ = setitem_vec
TFltIntIntTrV.__iter__ = itervec
TFltIntIntTrV.__len__ = len_vec
TFltIntIntTrV.__delitem__ = delitem_vec
TFltFltStrTrV.__getitem__ = getitem_vec
TFltFltStrTrV.__setitem__ = setitem_vec
TFltFltStrTrV.__iter__ = itervec
TFltFltStrTrV.__len__ = len_vec
TFltFltStrTrV.__delitem__ = delitem_vec
TAscFltIntPrV.__getitem__ = getitem_vec
TAscFltIntPrV.__setitem__ = setitem_vec
TAscFltIntPrV.__iter__ = itervec
TCnCom.__len__ = len_vec
TAscFltIntKdV.__getitem__ = getitem_vec
TAscFltIntKdV.__setitem__ = setitem_vec
TAscFltIntKdV.__iter__ = itervec
TAscFltIntKdV.__len__ = len_vec
TAscFltIntKdV.__delitem__ = delitem_vec
TStrPrV.__getitem__ = getitem_vec
TStrPrV.__setitem__ = setitem_vec
TStrPrV.__iter__ = itervec
TStrPrV.__len__ = len_vec
TStrPrV.__delitem__ = delitem_vec
TStrFltPrV.__getitem__ = getitem_vec
TStrFltPrV.__setitem__ = setitem_vec
TStrFltPrV.__iter__ = itervec
TStrFltPrV.__len__ = len_vec
TStrFltPrV.__delitem__ = delitem_vec
TStrIntKdV.__getitem__ = getitem_vec
TStrIntKdV.__setitem__ = setitem_vec
TStrIntKdV.__iter__ = itervec
TStrIntKdV.__len__ = len_vec
TStrIntKdV.__delitem__ = delitem_vec
TStrFltKdV.__getitem__ = getitem_vec
TStrFltKdV.__setitem__ = setitem_vec
TStrFltKdV.__iter__ = itervec
TStrFltKdV.__len__ = len_vec
TStrFltKdV.__delitem__ = delitem_vec
TStrAscFltKdV.__getitem__ = getitem_vec
TStrAscFltKdV.__setitem__ = setitem_vec
TStrAscFltKdV.__iter__ = itervec
TStrAscFltKdV.__len__ = len_vec
TStrAscFltKdV.__delitem__ = delitem_vec
TStrTrV.__getitem__ = getitem_vec
TStrTrV.__setitem__ = setitem_vec
TStrTrV.__iter__ = itervec
TStrTrV.__len__ = len_vec
TStrTrV.__delitem__ = delitem_vec
TStrQuV.__getitem__ = getitem_vec
TStrQuV.__setitem__ = setitem_vec
TStrQuV.__iter__ = itervec
TStrQuV.__len__ = len_vec
TStrQuV.__delitem__ = delitem_vec
TStrFltFltTrV.__getitem__ = getitem_vec
TStrFltFltTrV.__setitem__ = setitem_vec
TStrFltFltTrV.__iter__ = itervec
TStrFltFltTrV.__len__ = len_vec
TStrFltFltTrV.__delitem__ = delitem_vec
TStrStrIntTrV.__getitem__ = getitem_vec
TStrStrIntTrV.__setitem__ = setitem_vec
TStrStrIntTrV.__iter__ = itervec
TStrStrIntTrV.__len__ = len_vec
TStrStrIntTrV.__delitem__ = delitem_vec
TStrKdV.__getitem__ = getitem_vec
TStrKdV.__setitem__ = setitem_vec
TStrKdV.__iter__ = itervec
TStrKdV.__len__ = len_vec
TStrKdV.__delitem__ = delitem_vec
TStrStrVPrV.__getitem__ = getitem_vec
TStrStrVPrV.__setitem__ = setitem_vec
TStrStrVPrV.__iter__ = itervec
TStrStrVPrV.__len__ = len_vec
TStrStrVPrV.__delitem__ = delitem_vec
TStrVIntPrV.__getitem__ = getitem_vec
TStrVIntPrV.__setitem__ = setitem_vec
TStrVIntPrV.__iter__ = itervec
TStrVIntPrV.__len__ = len_vec
TStrVIntPrV.__delitem__ = delitem_vec
TFltIntIntIntQuV.__getitem__ = getitem_vec
TFltIntIntIntQuV.__setitem__ = setitem_vec
TFltIntIntIntQuV.__iter__ = itervec
TFltIntIntIntQuV.__len__ = len_vec
TFltIntIntIntQuV.__delitem__ = delitem_vec
TIntStrIntIntQuV.__getitem__ = getitem_vec
TIntStrIntIntQuV.__setitem__ = setitem_vec
TIntStrIntIntQuV.__iter__ = itervec
TIntStrIntIntQuV.__len__ = len_vec
TIntStrIntIntQuV.__delitem__ = delitem_vec
TIntIntPrPrV.__getitem__ = getitem_vec
TIntIntPrPrV.__setitem__ = setitem_vec
TIntIntPrPrV.__iter__ = itervec
TIntIntPrPrV.__len__ = len_vec
TIntIntPrPrV.__delitem__ = delitem_vec
PFltV.__getitem__ = getitem_vec
PFltV.__setitem__ = setitem_vec
PFltV.__iter__ = itervec
PFltV.__len__ = len_vec
PFltV.__delitem__ = delitem_vec
PAscFltV.__getitem__ = getitem_vec
PAscFltV.__setitem__ = setitem_vec
PAscFltV.__iter__ = itervec
PAscFltV.__len__ = len_vec
PAscFltV.__delitem__ = delitem_vec
PStrV.__getitem__ = getitem_vec
PStrV.__setitem__ = setitem_vec
PStrV.__iter__ = itervec
PStrV.__len__ = len_vec
PStrV.__delitem__ = delitem_vec
TBoolVV.__getitem__ = getitem_vec
TBoolVV.__setitem__ = setitem_vec
TBoolVV.__iter__ = itervec
TBoolVV.__len__ = len_vec
TBoolVV.__delitem__ = delitem_vec
TChVV.__getitem__ = getitem_vec
TChVV.__setitem__ = setitem_vec
TChVV.__iter__ = itervec
TChVV.__len__ = len_vec
TChVV.__delitem__ = delitem_vec
TIntVV.__getitem__ = getitem_vec
TIntVV.__setitem__ = setitem_vec
TIntVV.__iter__ = itervec
TIntVV.__len__ = len_vec
TIntVV.__delitem__ = delitem_vec
TSFltVV.__getitem__ = getitem_vec
TSFltVV.__setitem__ = setitem_vec
TSFltVV.__iter__ = itervec
TSFltVV.__len__ = len_vec
TSFltVV.__delitem__ = delitem_vec
TFltVV.__getitem__ = getitem_vec
TFltVV.__setitem__ = setitem_vec
TFltVV.__iter__ = itervec
TFltVV.__len__ = len_vec
TFltVV.__delitem__ = delitem_vec
TStrVV.__getitem__ = getitem_vec
TStrVV.__setitem__ = setitem_vec
TStrVV.__iter__ = itervec
TStrVV.__len__ = len_vec
TStrVV.__delitem__ = delitem_vec
TIntPrVV.__getitem__ = getitem_vec
TIntPrVV.__setitem__ = setitem_vec
TIntPrVV.__iter__ = itervec
TIntPrVV.__len__ = len_vec
TIntPrVV.__delitem__ = delitem_vec
TIntVVV.__getitem__ = getitem_vec
TIntVVV.__setitem__ = setitem_vec
TIntVVV.__iter__ = itervec
TIntVVV.__len__ = len_vec
TIntVVV.__delitem__ = delitem_vec
TFltVVV.__getitem__ = getitem_vec
TFltVVV.__setitem__ = setitem_vec
TFltVVV.__iter__ = itervec
TFltVVV.__len__ = len_vec
TFltVVV.__delitem__ = delitem_vec
#TIntQV.__getitem__ = getitem_vec
#TIntQV.__setitem__ = setitem_vec
#TIntQV.__iter__ = itervec
#TIntQV.__len__ = len_vec
#TIntQV.__delitem__ = delitem_vec
TIntStrStrTrV.__getitem__ = getitem_vec
TIntStrStrTrV.__setitem__ = setitem_vec
TIntStrStrTrV.__iter__ = itervec
TIntStrStrTrV.__len__ = len_vec
TIntStrStrTrV.__delitem__ = delitem_vec



#
# define __getitem__ for [] addressing
#
def getitem_hash(self, i):
    return self.GetDat(i)

def setitem_hash(self, key, value):
    self.AddDat(key, value)

def delitem_hash(self, key):
    self.DelKey(key)

def len_hash(self):
    return self.Len()

#
# define iterator for THash
#

class IterHash:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration

        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhash(self):
    return IterHash(self)

TIntH.__getitem__ = getitem_hash
TIntH.__setitem__ = setitem_hash
TIntH.__delitem__ = delitem_hash
TIntH.__len__ = len_hash
TIntH.__iter__ = iterhash
TIntIntH.__getitem__ = getitem_hash
TIntIntH.__setitem__ = setitem_hash
TIntIntH.__delitem__ = delitem_hash
TIntIntH.__len__ = len_hash
TIntIntH.__iter__ = iterhash
TIntFltH.__getitem__ = getitem_hash
TIntFltH.__setitem__ = setitem_hash
TIntFltH.__delitem__ = delitem_hash
TIntFltH.__len__ = len_hash
TIntFltH.__iter__ = iterhash
TIntStrH.__getitem__ = getitem_hash
TIntStrH.__setitem__ = setitem_hash
TIntStrH.__delitem__ = delitem_hash
TIntStrH.__len__ = len_hash
TIntStrH.__iter__ = iterhash
TIntPrFltH.__getitem__ = getitem_hash
TIntPrFltH.__setitem__ = setitem_hash
TIntPrFltH.__delitem__ = delitem_hash
TIntPrFltH.__len__ = len_hash
TIntPrFltH.__iter__ = iterhash
TStrIntH.__getitem__ = getitem_hash
TStrIntH.__setitem__ = setitem_hash
TStrIntH.__iter__ = iterhash
TStrIntH.__delitem__ = delitem_hash
TStrIntH.__len__ = len_hash


TUInt64H.__getitem__ = getitem_hash
TUInt64H.__setitem__ = setitem_hash
TUInt64H.__iter__ = iterhash
TUInt64H.__delitem__ = delitem_hash
TUInt64H.__len__ = len_hash
TIntBoolH.__getitem__ = getitem_hash
TIntBoolH.__setitem__ = setitem_hash
TIntBoolH.__iter__ = iterhash
TIntBoolH.__delitem__ = delitem_hash
TIntBoolH.__len__ = len_hash
TIntUInt64H.__getitem__ = getitem_hash
TIntUInt64H.__setitem__ = setitem_hash
TIntUInt64H.__iter__ = iterhash
TIntUInt64H.__delitem__ = delitem_hash
TIntUInt64H.__len__ = len_hash
TIntIntVH.__getitem__ = getitem_hash
TIntIntVH.__setitem__ = setitem_hash
TIntIntVH.__iter__ = iterhash
TIntIntVH.__delitem__ = delitem_hash
TIntIntVH.__len__ = len_hash
TIntIntHH.__getitem__ = getitem_hash
TIntIntHH.__setitem__ = setitem_hash
TIntIntHH.__iter__ = iterhash
TIntIntHH.__delitem__ = delitem_hash
TIntIntHH.__len__ = len_hash
TIntFltPrH.__getitem__ = getitem_hash
TIntFltPrH.__setitem__ = setitem_hash
TIntFltPrH.__iter__ = iterhash
TIntFltPrH.__delitem__ = delitem_hash
TIntFltPrH.__len__ = len_hash
TIntFltTrH.__getitem__ = getitem_hash
TIntFltTrH.__setitem__ = setitem_hash
TIntFltTrH.__iter__ = iterhash
TIntFltTrH.__delitem__ = delitem_hash
TIntFltTrH.__len__ = len_hash
TIntFltVH.__getitem__ = getitem_hash
TIntFltVH.__setitem__ = setitem_hash
TIntFltVH.__iter__ = iterhash
TIntFltVH.__delitem__ = delitem_hash
TIntFltVH.__len__ = len_hash
TIntStrVH.__getitem__ = getitem_hash
TIntStrVH.__setitem__ = setitem_hash
TIntStrVH.__iter__ = iterhash
TIntStrVH.__delitem__ = delitem_hash
TIntStrVH.__len__ = len_hash
TIntIntPrH.__getitem__ = getitem_hash
TIntIntPrH.__setitem__ = setitem_hash
TIntIntPrH.__iter__ = iterhash
TIntIntPrH.__delitem__ = delitem_hash
TIntIntPrH.__len__ = len_hash
TIntIntPrVH.__getitem__ = getitem_hash
TIntIntPrVH.__setitem__ = setitem_hash
TIntIntPrVH.__iter__ = iterhash
TIntIntPrVH.__delitem__ = delitem_hash
TIntIntPrVH.__len__ = len_hash
TUInt64StrVH.__getitem__ = getitem_hash
TUInt64StrVH.__setitem__ = setitem_hash
TUInt64StrVH.__iter__ = iterhash
TUInt64StrVH.__delitem__ = delitem_hash
TUInt64StrVH.__len__ = len_hash
TIntPrIntH.__getitem__ = getitem_hash
TIntPrIntH.__setitem__ = setitem_hash
TIntPrIntH.__iter__ = iterhash
TIntPrIntH.__delitem__ = delitem_hash
TIntPrIntH.__len__ = len_hash
TIntPrIntVH.__getitem__ = getitem_hash
TIntPrIntVH.__setitem__ = setitem_hash
TIntPrIntVH.__iter__ = iterhash
TIntPrIntVH.__delitem__ = delitem_hash
TIntPrIntVH.__len__ = len_hash
TIntPrIntPrVH.__getitem__ = getitem_hash
TIntPrIntPrVH.__setitem__ = setitem_hash
TIntPrIntPrVH.__iter__ = iterhash
TIntPrIntPrVH.__delitem__ = delitem_hash
TIntPrIntPrVH.__len__ = len_hash
TIntTrIntH.__getitem__ = getitem_hash
TIntTrIntH.__setitem__ = setitem_hash
TIntTrIntH.__iter__ = iterhash
TIntTrIntH.__delitem__ = delitem_hash
TIntTrIntH.__len__ = len_hash
TIntVIntH.__getitem__ = getitem_hash
TIntVIntH.__setitem__ = setitem_hash
TIntVIntH.__iter__ = iterhash
TIntVIntH.__delitem__ = delitem_hash
TIntVIntH.__len__ = len_hash
TUIntH.__getitem__ = getitem_hash
TUIntH.__setitem__ = setitem_hash
TUIntH.__iter__ = iterhash
TUIntH.__delitem__ = delitem_hash
TUIntH.__len__ = len_hash
TIntPrIntH.__getitem__ = getitem_hash
TIntPrIntH.__setitem__ = setitem_hash
TIntPrIntH.__iter__ = iterhash
TIntPrIntH.__delitem__ = delitem_hash
TIntPrIntH.__len__ = len_hash
TIntPrIntVH.__getitem__ = getitem_hash
TIntPrIntVH.__setitem__ = setitem_hash
TIntPrIntVH.__iter__ = iterhash
TIntPrIntVH.__delitem__ = delitem_hash
TIntPrIntVH.__len__ = len_hash
TIntTrFltH.__getitem__ = getitem_hash
TIntTrFltH.__setitem__ = setitem_hash
TIntTrFltH.__iter__ = iterhash
TIntTrFltH.__delitem__ = delitem_hash
TIntTrFltH.__len__ = len_hash
TIntPrStrH.__getitem__ = getitem_hash
TIntPrStrH.__setitem__ = setitem_hash
TIntPrStrH.__iter__ = iterhash
TIntPrStrH.__delitem__ = delitem_hash
TIntPrStrH.__len__ = len_hash
TIntPrStrVH.__getitem__ = getitem_hash
TIntPrStrVH.__setitem__ = setitem_hash
TIntPrStrVH.__iter__ = iterhash
TIntPrStrVH.__delitem__ = delitem_hash
TIntPrStrVH.__len__ = len_hash
TIntStrPrIntH.__getitem__ = getitem_hash
TIntStrPrIntH.__setitem__ = setitem_hash
TIntStrPrIntH.__iter__ = iterhash
TIntStrPrIntH.__delitem__ = delitem_hash
TIntStrPrIntH.__len__ = len_hash
TFltFltH.__getitem__ = getitem_hash
TFltFltH.__setitem__ = setitem_hash
TFltFltH.__iter__ = iterhash
TFltFltH.__delitem__ = delitem_hash
TFltFltH.__len__ = len_hash
TStrH.__getitem__ = getitem_hash
TStrH.__setitem__ = setitem_hash
TStrH.__iter__ = iterhash
TStrH.__delitem__ = delitem_hash
TStrH.__len__ = len_hash
TStrBoolH.__getitem__ = getitem_hash
TStrBoolH.__setitem__ = setitem_hash
TStrBoolH.__iter__ = iterhash
TStrBoolH.__delitem__ = delitem_hash
TStrBoolH.__len__ = len_hash
TStrIntPrH.__getitem__ = getitem_hash
TStrIntPrH.__setitem__ = setitem_hash
TStrIntPrH.__iter__ = iterhash
TStrIntPrH.__delitem__ = delitem_hash
TStrIntPrH.__len__ = len_hash
TStrIntVH.__getitem__ = getitem_hash
TStrIntVH.__setitem__ = setitem_hash
TStrIntVH.__iter__ = iterhash
TStrIntVH.__delitem__ = delitem_hash
TStrIntVH.__len__ = len_hash
TStrUInt64H.__getitem__ = getitem_hash
TStrUInt64H.__setitem__ = setitem_hash
TStrUInt64H.__iter__ = iterhash
TStrUInt64H.__delitem__ = delitem_hash
TStrUInt64H.__len__ = len_hash
TStrUInt64VH.__getitem__ = getitem_hash
TStrUInt64VH.__setitem__ = setitem_hash
TStrUInt64VH.__iter__ = iterhash
TStrUInt64VH.__delitem__ = delitem_hash
TStrUInt64VH.__len__ = len_hash
TStrIntPrVH.__getitem__ = getitem_hash
TStrIntPrVH.__setitem__ = setitem_hash
TStrIntPrVH.__iter__ = iterhash
TStrIntPrVH.__delitem__ = delitem_hash
TStrIntPrVH.__len__ = len_hash
TStrFltH.__getitem__ = getitem_hash
TStrFltH.__setitem__ = setitem_hash
TStrFltH.__iter__ = iterhash
TStrFltH.__delitem__ = delitem_hash
TStrFltH.__len__ = len_hash
TStrFltVH.__getitem__ = getitem_hash
TStrFltVH.__setitem__ = setitem_hash
TStrFltVH.__iter__ = iterhash
TStrFltVH.__delitem__ = delitem_hash
TStrFltVH.__len__ = len_hash
TStrStrH.__getitem__ = getitem_hash
TStrStrH.__setitem__ = setitem_hash
TStrStrH.__iter__ = iterhash
TStrStrH.__delitem__ = delitem_hash
TStrStrH.__len__ = len_hash
TStrStrPrH.__getitem__ = getitem_hash
TStrStrPrH.__setitem__ = setitem_hash
TStrStrPrH.__iter__ = iterhash
TStrStrPrH.__delitem__ = delitem_hash
TStrStrPrH.__len__ = len_hash
TStrStrVH.__getitem__ = getitem_hash
TStrStrVH.__setitem__ = setitem_hash
TStrStrVH.__iter__ = iterhash
TStrStrVH.__delitem__ = delitem_hash
TStrStrVH.__len__ = len_hash
TStrStrPrVH.__getitem__ = getitem_hash
TStrStrPrVH.__setitem__ = setitem_hash
TStrStrPrVH.__iter__ = iterhash
TStrStrPrVH.__delitem__ = delitem_hash
TStrStrPrVH.__len__ = len_hash
TStrStrKdVH.__getitem__ = getitem_hash
TStrStrKdVH.__setitem__ = setitem_hash
TStrStrKdVH.__iter__ = iterhash
TStrStrKdVH.__delitem__ = delitem_hash
TStrStrKdVH.__len__ = len_hash
TStrIntFltPrH.__getitem__ = getitem_hash
TStrIntFltPrH.__setitem__ = setitem_hash
TStrIntFltPrH.__iter__ = iterhash
TStrIntFltPrH.__delitem__ = delitem_hash
TStrIntFltPrH.__len__ = len_hash
TStrStrIntPrVH.__getitem__ = getitem_hash
TStrStrIntPrVH.__setitem__ = setitem_hash
TStrStrIntPrVH.__iter__ = iterhash
TStrStrIntPrVH.__delitem__ = delitem_hash
TStrStrIntPrVH.__len__ = len_hash
TStrStrIntKdVH.__getitem__ = getitem_hash
TStrStrIntKdVH.__setitem__ = setitem_hash
TStrStrIntKdVH.__iter__ = iterhash
TStrStrIntKdVH.__delitem__ = delitem_hash
TStrStrIntKdVH.__len__ = len_hash
TStrPrBoolH.__getitem__ = getitem_hash
TStrPrBoolH.__setitem__ = setitem_hash
TStrPrBoolH.__iter__ = iterhash
TStrPrBoolH.__delitem__ = delitem_hash
TStrPrBoolH.__len__ = len_hash
TStrPrIntH.__getitem__ = getitem_hash
TStrPrIntH.__setitem__ = setitem_hash
TStrPrIntH.__iter__ = iterhash
TStrPrIntH.__delitem__ = delitem_hash
TStrPrIntH.__len__ = len_hash
TStrPrFltH.__getitem__ = getitem_hash
TStrPrFltH.__setitem__ = setitem_hash
TStrPrFltH.__iter__ = iterhash
TStrPrFltH.__delitem__ = delitem_hash
TStrPrFltH.__len__ = len_hash
TStrPrStrH.__getitem__ = getitem_hash
TStrPrStrH.__setitem__ = setitem_hash
TStrPrStrH.__iter__ = iterhash
TStrPrStrH.__delitem__ = delitem_hash
TStrPrStrH.__len__ = len_hash
TStrPrStrVH.__getitem__ = getitem_hash
TStrPrStrVH.__setitem__ = setitem_hash
TStrPrStrVH.__iter__ = iterhash
TStrPrStrVH.__delitem__ = delitem_hash
TStrPrStrVH.__len__ = len_hash
TStrTrIntH.__getitem__ = getitem_hash
TStrTrIntH.__setitem__ = setitem_hash
TStrTrIntH.__iter__ = iterhash
TStrTrIntH.__delitem__ = delitem_hash
TStrTrIntH.__len__ = len_hash
TStrIntPrIntH.__getitem__ = getitem_hash
TStrIntPrIntH.__setitem__ = setitem_hash
TStrIntPrIntH.__iter__ = iterhash
TStrIntPrIntH.__delitem__ = delitem_hash
TStrIntPrIntH.__len__ = len_hash
TStrVH.__getitem__ = getitem_hash
TStrVH.__setitem__ = setitem_hash
TStrVH.__iter__ = iterhash
TStrVH.__delitem__ = delitem_hash
TStrVH.__len__ = len_hash
TStrVIntVH.__getitem__ = getitem_hash
TStrVIntVH.__setitem__ = setitem_hash
TStrVIntVH.__iter__ = iterhash
TStrVIntVH.__delitem__ = delitem_hash
TStrVIntVH.__len__ = len_hash
TStrVStrH.__getitem__ = getitem_hash
TStrVStrH.__setitem__ = setitem_hash
TStrVStrH.__iter__ = iterhash
TStrVStrH.__delitem__ = delitem_hash
TStrVStrH.__len__ = len_hash
TStrVStrVH.__getitem__ = getitem_hash
TStrVStrVH.__setitem__ = setitem_hash
TStrVStrVH.__iter__ = iterhash
TStrVStrVH.__delitem__ = delitem_hash
TStrVStrVH.__len__ = len_hash
TIntStrPrVH.__getitem__ = getitem_hash
TIntStrPrVH.__setitem__ = setitem_hash
TIntStrPrVH.__iter__ = iterhash
TIntStrPrVH.__delitem__ = delitem_hash
TIntStrPrVH.__len__ = len_hash



#
# define __getitem__ for [] addressing
#
def getitem_hashset(self, i):
    return self.GetSetKey(i)

def delitem_hashset(self, i):
    self.DelKey(i)

def contains_hashset(self, key):
    return self.IsKey(key)

#
# define iterator for THashSet
#

class IterHashSet:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration

        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhashset(self):
    return IterHashSet(self)


TIntSet.__iter__ = iterhashset
TIntSet.__contains__ = contains_hashset


PrintGraphStatTable_PNEANet = _snap.PrintGraphStatTable_PNEANet
class PNEANet(object):
    r"""Proxy of C++ TPt< TNEANet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PNEANet_New)
    __swig_destroy__ = _snap.delete_PNEANet
    Save = _swig_new_instance_method(_snap.PNEANet_Save)
    __deref__ = _swig_new_instance_method(_snap.PNEANet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PNEANet___ref__)
    __call__ = _swig_new_instance_method(_snap.PNEANet___call__)
    Empty = _swig_new_instance_method(_snap.PNEANet_Empty)
    Clr = _swig_new_instance_method(_snap.PNEANet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PNEANet_GetRefs)
    CRef = property(_snap.PNEANet_CRef_get, doc=r"""CRef : TCRef""")
    Save_V1 = _swig_new_instance_method(_snap.PNEANet_Save_V1)
    Save_V2 = _swig_new_instance_method(_snap.PNEANet_Save_V2)
    Load = _swig_new_instance_method(_snap.PNEANet_Load)
    Load_V1 = _swig_new_instance_method(_snap.PNEANet_Load_V1)
    Load_V2 = _swig_new_instance_method(_snap.PNEANet_Load_V2)
    LoadNetworkShM = _swig_new_instance_method(_snap.PNEANet_LoadNetworkShM)
    LoadShM = _swig_new_instance_method(_snap.PNEANet_LoadShM)
    ConvertToSparse = _swig_new_instance_method(_snap.PNEANet_ConvertToSparse)
    HasFlag = _swig_new_instance_method(_snap.PNEANet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PNEANet_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PNEANet_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PNEANet_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PNEANet_DelNode)
    IsNode = _swig_new_instance_method(_snap.PNEANet_IsNode)
    BegNI = _swig_new_instance_method(_snap.PNEANet_BegNI)
    EndNI = _swig_new_instance_method(_snap.PNEANet_EndNI)
    GetNI = _swig_new_instance_method(_snap.PNEANet_GetNI)
    BegNAIntI = _swig_new_instance_method(_snap.PNEANet_BegNAIntI)
    EndNAIntI = _swig_new_instance_method(_snap.PNEANet_EndNAIntI)
    GetNAIntI = _swig_new_instance_method(_snap.PNEANet_GetNAIntI)
    BegNAIntVI = _swig_new_instance_method(_snap.PNEANet_BegNAIntVI)
    EndNAIntVI = _swig_new_instance_method(_snap.PNEANet_EndNAIntVI)
    GetNAIntVI = _swig_new_instance_method(_snap.PNEANet_GetNAIntVI)
    BegNAStrI = _swig_new_instance_method(_snap.PNEANet_BegNAStrI)
    EndNAStrI = _swig_new_instance_method(_snap.PNEANet_EndNAStrI)
    GetNAStrI = _swig_new_instance_method(_snap.PNEANet_GetNAStrI)
    BegNAFltI = _swig_new_instance_method(_snap.PNEANet_BegNAFltI)
    EndNAFltI = _swig_new_instance_method(_snap.PNEANet_EndNAFltI)
    GetNAFltI = _swig_new_instance_method(_snap.PNEANet_GetNAFltI)
    AttrNameNI = _swig_new_instance_method(_snap.PNEANet_AttrNameNI)
    AttrValueNI = _swig_new_instance_method(_snap.PNEANet_AttrValueNI)
    IntAttrNameNI = _swig_new_instance_method(_snap.PNEANet_IntAttrNameNI)
    IntAttrValueNI = _swig_new_instance_method(_snap.PNEANet_IntAttrValueNI)
    IntVAttrNameNI = _swig_new_instance_method(_snap.PNEANet_IntVAttrNameNI)
    IntVAttrValueNI = _swig_new_instance_method(_snap.PNEANet_IntVAttrValueNI)
    StrAttrNameNI = _swig_new_instance_method(_snap.PNEANet_StrAttrNameNI)
    StrAttrValueNI = _swig_new_instance_method(_snap.PNEANet_StrAttrValueNI)
    FltAttrNameNI = _swig_new_instance_method(_snap.PNEANet_FltAttrNameNI)
    FltAttrValueNI = _swig_new_instance_method(_snap.PNEANet_FltAttrValueNI)
    AttrNameEI = _swig_new_instance_method(_snap.PNEANet_AttrNameEI)
    AttrValueEI = _swig_new_instance_method(_snap.PNEANet_AttrValueEI)
    IntAttrNameEI = _swig_new_instance_method(_snap.PNEANet_IntAttrNameEI)
    IntAttrValueEI = _swig_new_instance_method(_snap.PNEANet_IntAttrValueEI)
    IntVAttrNameEI = _swig_new_instance_method(_snap.PNEANet_IntVAttrNameEI)
    IntVAttrValueEI = _swig_new_instance_method(_snap.PNEANet_IntVAttrValueEI)
    StrAttrNameEI = _swig_new_instance_method(_snap.PNEANet_StrAttrNameEI)
    StrAttrValueEI = _swig_new_instance_method(_snap.PNEANet_StrAttrValueEI)
    FltAttrNameEI = _swig_new_instance_method(_snap.PNEANet_FltAttrNameEI)
    FltAttrValueEI = _swig_new_instance_method(_snap.PNEANet_FltAttrValueEI)
    BegEAIntI = _swig_new_instance_method(_snap.PNEANet_BegEAIntI)
    EndEAIntI = _swig_new_instance_method(_snap.PNEANet_EndEAIntI)
    GetEAIntI = _swig_new_instance_method(_snap.PNEANet_GetEAIntI)
    BegEAIntVI = _swig_new_instance_method(_snap.PNEANet_BegEAIntVI)
    EndEAIntVI = _swig_new_instance_method(_snap.PNEANet_EndEAIntVI)
    GetEAIntVI = _swig_new_instance_method(_snap.PNEANet_GetEAIntVI)
    BegEAStrI = _swig_new_instance_method(_snap.PNEANet_BegEAStrI)
    EndEAStrI = _swig_new_instance_method(_snap.PNEANet_EndEAStrI)
    GetEAStrI = _swig_new_instance_method(_snap.PNEANet_GetEAStrI)
    BegEAFltI = _swig_new_instance_method(_snap.PNEANet_BegEAFltI)
    EndEAFltI = _swig_new_instance_method(_snap.PNEANet_EndEAFltI)
    GetEAFltI = _swig_new_instance_method(_snap.PNEANet_GetEAFltI)
    GetMxNId = _swig_new_instance_method(_snap.PNEANet_GetMxNId)
    GetMxEId = _swig_new_instance_method(_snap.PNEANet_GetMxEId)
    GetEdges = _swig_new_instance_method(_snap.PNEANet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PNEANet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.PNEANet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PNEANet_IsEdge)
    GetEId = _swig_new_instance_method(_snap.PNEANet_GetEId)
    BegEI = _swig_new_instance_method(_snap.PNEANet_BegEI)
    EndEI = _swig_new_instance_method(_snap.PNEANet_EndEI)
    GetEI = _swig_new_instance_method(_snap.PNEANet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PNEANet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PNEANet_GetRndNI)
    GetRndEId = _swig_new_instance_method(_snap.PNEANet_GetRndEId)
    GetRndEI = _swig_new_instance_method(_snap.PNEANet_GetRndEI)
    GetNIdV = _swig_new_instance_method(_snap.PNEANet_GetNIdV)
    GetEIdV = _swig_new_instance_method(_snap.PNEANet_GetEIdV)
    Reserve = _swig_new_instance_method(_snap.PNEANet_Reserve)
    Defrag = _swig_new_instance_method(_snap.PNEANet_Defrag)
    IsOk = _swig_new_instance_method(_snap.PNEANet_IsOk)
    Dump = _swig_new_instance_method(_snap.PNEANet_Dump)
    AddIntAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddIntAttrDatN)
    AddStrAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddStrAttrDatN)
    AddFltAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddFltAttrDatN)
    AddIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrDatN)
    AppendIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_AppendIntVAttrDatN)
    DelFromIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_DelFromIntVAttrDatN)
    AddIntAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddIntAttrDatE)
    AddStrAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddStrAttrDatE)
    AddFltAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddFltAttrDatE)
    AddIntVAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrDatE)
    AppendIntVAttrDatE = _swig_new_instance_method(_snap.PNEANet_AppendIntVAttrDatE)
    GetIntAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetIntAttrDatN)
    GetStrAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetStrAttrDatN)
    GetFltAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetFltAttrDatN)
    GetIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetIntVAttrDatN)
    GetIntAttrIndN = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndN)
    GetAttrIndN = _swig_new_instance_method(_snap.PNEANet_GetAttrIndN)
    GetIntAttrIndDatN = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndDatN)
    GetStrAttrIndDatN = _swig_new_instance_method(_snap.PNEANet_GetStrAttrIndDatN)
    GetFltAttrIndDatN = _swig_new_instance_method(_snap.PNEANet_GetFltAttrIndDatN)
    GetIntAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetIntAttrDatE)
    GetStrAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetStrAttrDatE)
    GetFltAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetFltAttrDatE)
    GetIntVAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetIntVAttrDatE)
    GetIntAttrIndE = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndE)
    GetAttrIndE = _swig_new_instance_method(_snap.PNEANet_GetAttrIndE)
    GetIntAttrIndDatE = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndDatE)
    GetFltAttrIndDatE = _swig_new_instance_method(_snap.PNEANet_GetFltAttrIndDatE)
    GetStrAttrIndDatE = _swig_new_instance_method(_snap.PNEANet_GetStrAttrIndDatE)
    DelAttrDatN = _swig_new_instance_method(_snap.PNEANet_DelAttrDatN)
    DelAttrDatE = _swig_new_instance_method(_snap.PNEANet_DelAttrDatE)
    AddIntAttrN = _swig_new_instance_method(_snap.PNEANet_AddIntAttrN)
    AddStrAttrN = _swig_new_instance_method(_snap.PNEANet_AddStrAttrN)
    AddFltAttrN = _swig_new_instance_method(_snap.PNEANet_AddFltAttrN)
    AddIntVAttrN = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrN)
    AddIntAttrE = _swig_new_instance_method(_snap.PNEANet_AddIntAttrE)
    AddStrAttrE = _swig_new_instance_method(_snap.PNEANet_AddStrAttrE)
    AddFltAttrE = _swig_new_instance_method(_snap.PNEANet_AddFltAttrE)
    AddIntVAttrE = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrE)
    DelAttrN = _swig_new_instance_method(_snap.PNEANet_DelAttrN)
    DelAttrE = _swig_new_instance_method(_snap.PNEANet_DelAttrE)
    IsAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsAttrDeletedN)
    IsIntAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsIntAttrDeletedN)
    IsIntVAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsIntVAttrDeletedN)
    IsStrAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsStrAttrDeletedN)
    IsFltAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsFltAttrDeletedN)
    NodeAttrIsDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsDeleted)
    NodeAttrIsIntDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsIntDeleted)
    NodeAttrIsIntVDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsIntVDeleted)
    NodeAttrIsStrDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsStrDeleted)
    NodeAttrIsFltDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsFltDeleted)
    IsAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsAttrDeletedE)
    IsIntAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsIntAttrDeletedE)
    IsIntVAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsIntVAttrDeletedE)
    IsStrAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsStrAttrDeletedE)
    IsFltAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsFltAttrDeletedE)
    EdgeAttrIsDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsDeleted)
    EdgeAttrIsIntDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsIntDeleted)
    EdgeAttrIsIntVDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsIntVDeleted)
    EdgeAttrIsStrDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsStrDeleted)
    EdgeAttrIsFltDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsFltDeleted)
    GetNodeAttrValue = _swig_new_instance_method(_snap.PNEANet_GetNodeAttrValue)
    GetEdgeAttrValue = _swig_new_instance_method(_snap.PNEANet_GetEdgeAttrValue)
    GetWeightOutEdges = _swig_new_instance_method(_snap.PNEANet_GetWeightOutEdges)
    IsFltAttrE = _swig_new_instance_method(_snap.PNEANet_IsFltAttrE)
    IsIntAttrE = _swig_new_instance_method(_snap.PNEANet_IsIntAttrE)
    IsStrAttrE = _swig_new_instance_method(_snap.PNEANet_IsStrAttrE)
    GetFltAttrVecE = _swig_new_instance_method(_snap.PNEANet_GetFltAttrVecE)
    GetFltKeyIdE = _swig_new_instance_method(_snap.PNEANet_GetFltKeyIdE)
    GetWeightOutEdgesV = _swig_new_instance_method(_snap.PNEANet_GetWeightOutEdgesV)
    GetAttrNNames = _swig_new_instance_method(_snap.PNEANet_GetAttrNNames)
    GetAttrENames = _swig_new_instance_method(_snap.PNEANet_GetAttrENames)
    AddSAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.PNEANet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.PNEANet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.PNEANet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.PNEANet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.PNEANet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.PNEANet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.PNEANet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.PNEANet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.PNEANet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.PNEANet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.PNEANet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.PNEANet_GetSAttrNameE)

# Register PNEANet in _snap:
_snap.PNEANet_swigregister(PNEANet)
PNEANet_New = _snap.PNEANet_New

PrintInfo_PNEANet = _snap.PrintInfo_PNEANet
GetNodeWcc_PNEANet = _snap.GetNodeWcc_PNEANet
IsConnected_PNEANet = _snap.IsConnected_PNEANet
IsWeaklyConn_PNEANet = _snap.IsWeaklyConn_PNEANet
GetWccSzCnt_PNEANet = _snap.GetWccSzCnt_PNEANet
GetWccs_PNEANet = _snap.GetWccs_PNEANet
GetSccSzCnt_PNEANet = _snap.GetSccSzCnt_PNEANet
GetSccs_PNEANet = _snap.GetSccs_PNEANet
GetMxWccSz_PNEANet = _snap.GetMxWccSz_PNEANet
GetMxSccSz_PNEANet = _snap.GetMxSccSz_PNEANet
GetMxWcc_PNEANet = _snap.GetMxWcc_PNEANet
GetMxScc_PNEANet = _snap.GetMxScc_PNEANet
GetMxBiCon_PNEANet = _snap.GetMxBiCon_PNEANet
GetNodeEcc_PNEANet = _snap.GetNodeEcc_PNEANet
GetPageRank_PNEANet = _snap.GetPageRank_PNEANet
GetPageRank_v1_PNEANet = _snap.GetPageRank_v1_PNEANet
GetHits_PNEANet = _snap.GetHits_PNEANet
GetBetweennessCentr_PNEANet = _snap.GetBetweennessCentr_PNEANet
GetClosenessCentr_PNEANet = _snap.GetClosenessCentr_PNEANet
GetFarnessCentr_PNEANet = _snap.GetFarnessCentr_PNEANet
CntInDegNodes_PNEANet = _snap.CntInDegNodes_PNEANet
CntOutDegNodes_PNEANet = _snap.CntOutDegNodes_PNEANet
CntDegNodes_PNEANet = _snap.CntDegNodes_PNEANet
CntNonZNodes_PNEANet = _snap.CntNonZNodes_PNEANet
CntEdgesToSet_PNEANet = _snap.CntEdgesToSet_PNEANet
GetMxDegNId_PNEANet = _snap.GetMxDegNId_PNEANet
GetMxInDegNId_PNEANet = _snap.GetMxInDegNId_PNEANet
GetMxOutDegNId_PNEANet = _snap.GetMxOutDegNId_PNEANet
GetInDegCnt_PNEANet = _snap.GetInDegCnt_PNEANet
GetOutDegCnt_PNEANet = _snap.GetOutDegCnt_PNEANet
GetDegCnt_PNEANet = _snap.GetDegCnt_PNEANet
GetDegSeqV_PNEANet = _snap.GetDegSeqV_PNEANet
GetNodeInDegV_PNEANet = _snap.GetNodeInDegV_PNEANet
GetNodeOutDegV_PNEANet = _snap.GetNodeOutDegV_PNEANet
CntUniqUndirEdges_PNEANet = _snap.CntUniqUndirEdges_PNEANet
CntUniqDirEdges_PNEANet = _snap.CntUniqDirEdges_PNEANet
CntUniqBiDirEdges_PNEANet = _snap.CntUniqBiDirEdges_PNEANet
CntSelfEdges_PNEANet = _snap.CntSelfEdges_PNEANet
GetUnDir_PNEANet = _snap.GetUnDir_PNEANet
MakeUnDir_PNEANet = _snap.MakeUnDir_PNEANet
AddSelfEdges_PNEANet = _snap.AddSelfEdges_PNEANet
DelSelfEdges_PNEANet = _snap.DelSelfEdges_PNEANet
DelNodes_PNEANet = _snap.DelNodes_PNEANet
DelZeroDegNodes_PNEANet = _snap.DelZeroDegNodes_PNEANet
DelDegKNodes_PNEANet = _snap.DelDegKNodes_PNEANet
IsTree_PNEANet = _snap.IsTree_PNEANet
GetTreeRootNId_PNEANet = _snap.GetTreeRootNId_PNEANet
GetTreeSig_PNEANet = _snap.GetTreeSig_PNEANet
GetBfsTree_PNEANet = _snap.GetBfsTree_PNEANet
GetSubTreeSz_PNEANet = _snap.GetSubTreeSz_PNEANet
GetNodesAtHop_PNEANet = _snap.GetNodesAtHop_PNEANet
GetNodesAtHops_PNEANet = _snap.GetNodesAtHops_PNEANet
GetShortPath_PNEANet = _snap.GetShortPath_PNEANet
GetBfsFullDiam_PNEANet = _snap.GetBfsFullDiam_PNEANet
GetBfsEffDiam_PNEANet = _snap.GetBfsEffDiam_PNEANet
GetBfsEffDiamAll_PNEANet = _snap.GetBfsEffDiamAll_PNEANet
DrawGViz_PNEANet = _snap.DrawGViz_PNEANet
GenGrid_PNEANet = _snap.GenGrid_PNEANet
GenStar_PNEANet = _snap.GenStar_PNEANet
GenCircle_PNEANet = _snap.GenCircle_PNEANet
GenFull_PNEANet = _snap.GenFull_PNEANet
GenTree_PNEANet = _snap.GenTree_PNEANet
GenBaraHierar_PNEANet = _snap.GenBaraHierar_PNEANet
GenRndGnm_PNEANet = _snap.GenRndGnm_PNEANet
LoadEdgeList_PNEANet = _snap.LoadEdgeList_PNEANet
LoadEdgeListStr_PNEANet = _snap.LoadEdgeListStr_PNEANet
LoadConnList_PNEANet = _snap.LoadConnList_PNEANet
LoadConnListStr_PNEANet = _snap.LoadConnListStr_PNEANet
LoadPajek_PNEANet = _snap.LoadPajek_PNEANet
SaveEdgeList_PNEANet = _snap.SaveEdgeList_PNEANet
SavePajek_PNEANet = _snap.SavePajek_PNEANet
SaveMatlabSparseMtx_PNEANet = _snap.SaveMatlabSparseMtx_PNEANet
SaveGViz_PNEANet = _snap.SaveGViz_PNEANet
GetKCore_PNEANet = _snap.GetKCore_PNEANet
GetKCoreEdges_PNEANet = _snap.GetKCoreEdges_PNEANet
GetKCoreNodes_PNEANet = _snap.GetKCoreNodes_PNEANet
ConvertGraph_PNEANet_PNEANet = _snap.ConvertGraph_PNEANet_PNEANet
ConvertGraph_PNEANet_PNGraph = _snap.ConvertGraph_PNEANet_PNGraph
ConvertGraph_PNEANet_PUNGraph = _snap.ConvertGraph_PNEANet_PUNGraph
ConvertSubGraph_PNEANet_PNEANet = _snap.ConvertSubGraph_PNEANet_PNEANet
ConvertSubGraph_PNEANet_PNGraph = _snap.ConvertSubGraph_PNEANet_PNGraph
ConvertSubGraph_PNEANet_PUNGraph = _snap.ConvertSubGraph_PNEANet_PUNGraph
ConvertESubGraph_PNEANet_PNEANet = _snap.ConvertESubGraph_PNEANet_PNEANet
GetSubGraph_PNEANet = _snap.GetSubGraph_PNEANet
GetESubGraph_PNEANet = _snap.GetESubGraph_PNEANet
GetRndSubGraph_PNEANet = _snap.GetRndSubGraph_PNEANet
GetRndESubGraph_PNEANet = _snap.GetRndESubGraph_PNEANet
GetClustCf_PNEANet = _snap.GetClustCf_PNEANet
GetClustCfAll_PNEANet = _snap.GetClustCfAll_PNEANet
GetNodeClustCf_PNEANet = _snap.GetNodeClustCf_PNEANet
GetTriads_PNEANet = _snap.GetTriads_PNEANet
GetTriadsAll_PNEANet = _snap.GetTriadsAll_PNEANet
GetTriadEdges_PNEANet = _snap.GetTriadEdges_PNEANet
GetNodeTriads_PNEANet = _snap.GetNodeTriads_PNEANet
GetNodeTriadsAll_PNEANet = _snap.GetNodeTriadsAll_PNEANet
GetTriadParticip_PNEANet = _snap.GetTriadParticip_PNEANet
GetTriangleCnt_PNEANet = _snap.GetTriangleCnt_PNEANet
GetCmnNbrs_PNEANet = _snap.GetCmnNbrs_PNEANet
GetLen2Paths_PNEANet = _snap.GetLen2Paths_PNEANet
GetModularity_PNEANet = _snap.GetModularity_PNEANet
GetEdgesInOut_PNEANet = _snap.GetEdgesInOut_PNEANet
GetAnf_PNEANet = _snap.GetAnf_PNEANet
GetAnfEffDiam_PNEANet = _snap.GetAnfEffDiam_PNEANet
TestAnf_PNEANet = _snap.TestAnf_PNEANet
PlotKCoreEdges_PNEANet = _snap.PlotKCoreEdges_PNEANet
PlotKCoreNodes_PNEANet = _snap.PlotKCoreNodes_PNEANet
PlotShortPathDistr_PNEANet = _snap.PlotShortPathDistr_PNEANet
PlotHops_PNEANet = _snap.PlotHops_PNEANet
PlotClustCf_PNEANet = _snap.PlotClustCf_PNEANet
PlotSccDistr_PNEANet = _snap.PlotSccDistr_PNEANet
PlotWccDistr_PNEANet = _snap.PlotWccDistr_PNEANet
PlotOutDegDistr_PNEANet = _snap.PlotOutDegDistr_PNEANet
PlotInDegDistr_PNEANet = _snap.PlotInDegDistr_PNEANet
PercentDegree_PNEANet = _snap.PercentDegree_PNEANet
NodesGTEDegree_PNEANet = _snap.NodesGTEDegree_PNEANet
MxDegree_PNEANet = _snap.MxDegree_PNEANet
PercentMxWcc_PNEANet = _snap.PercentMxWcc_PNEANet
PercentMxScc_PNEANet = _snap.PercentMxScc_PNEANet
ToNetwork_PNEANet = _snap.ToNetwork_PNEANet
class PMMNet(object):
    r"""Proxy of C++ TPt< TMMNet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PMMNet_New)
    __swig_destroy__ = _snap.delete_PMMNet
    Save = _swig_new_instance_method(_snap.PMMNet_Save)
    __deref__ = _swig_new_instance_method(_snap.PMMNet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PMMNet___ref__)
    __call__ = _swig_new_instance_method(_snap.PMMNet___call__)
    Empty = _swig_new_instance_method(_snap.PMMNet_Empty)
    Clr = _swig_new_instance_method(_snap.PMMNet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PMMNet_GetRefs)
    CRef = property(_snap.PMMNet_CRef_get, doc=r"""CRef : TCRef""")
    AddModeNet = _swig_new_instance_method(_snap.PMMNet_AddModeNet)
    DelModeNet = _swig_new_instance_method(_snap.PMMNet_DelModeNet)
    AddCrossNet = _swig_new_instance_method(_snap.PMMNet_AddCrossNet)
    DelCrossNet = _swig_new_instance_method(_snap.PMMNet_DelCrossNet)
    Load = _swig_new_instance_method(_snap.PMMNet_Load)
    LoadShM = _swig_new_instance_method(_snap.PMMNet_LoadShM)
    ConvertToSparse = _swig_new_instance_method(_snap.PMMNet_ConvertToSparse)
    GetModeId = _swig_new_instance_method(_snap.PMMNet_GetModeId)
    GetModeName = _swig_new_instance_method(_snap.PMMNet_GetModeName)
    GetCrossId = _swig_new_instance_method(_snap.PMMNet_GetCrossId)
    GetCrossName = _swig_new_instance_method(_snap.PMMNet_GetCrossName)
    GetModeNetByName = _swig_new_instance_method(_snap.PMMNet_GetModeNetByName)
    GetModeNetById = _swig_new_instance_method(_snap.PMMNet_GetModeNetById)
    GetCrossNetByName = _swig_new_instance_method(_snap.PMMNet_GetCrossNetByName)
    GetCrossNetById = _swig_new_instance_method(_snap.PMMNet_GetCrossNetById)
    GetCrossNetI = _swig_new_instance_method(_snap.PMMNet_GetCrossNetI)
    BegCrossNetI = _swig_new_instance_method(_snap.PMMNet_BegCrossNetI)
    EndCrossNetI = _swig_new_instance_method(_snap.PMMNet_EndCrossNetI)
    GetModeNetI = _swig_new_instance_method(_snap.PMMNet_GetModeNetI)
    BegModeNetI = _swig_new_instance_method(_snap.PMMNet_BegModeNetI)
    EndModeNetI = _swig_new_instance_method(_snap.PMMNet_EndModeNetI)
    GetModeNets = _swig_new_instance_method(_snap.PMMNet_GetModeNets)
    GetCrossNets = _swig_new_instance_method(_snap.PMMNet_GetCrossNets)
    GetSubgraphByCrossNet = _swig_new_instance_method(_snap.PMMNet_GetSubgraphByCrossNet)
    GetSubgraphByModeNet = _swig_new_instance_method(_snap.PMMNet_GetSubgraphByModeNet)
    ToNetwork = _swig_new_instance_method(_snap.PMMNet_ToNetwork)
    ToNetwork2 = _swig_new_instance_method(_snap.PMMNet_ToNetwork2)

# Register PMMNet in _snap:
_snap.PMMNet_swigregister(PMMNet)
PMMNet_New = _snap.PMMNet_New


# redefine TNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNGraphEdgeI.GetId = GetId

PrintGraphStatTable_PNGraph = _snap.PrintGraphStatTable_PNGraph
class PNGraph(object):
    r"""Proxy of C++ TPt< TNGraph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PNGraph_New)
    __swig_destroy__ = _snap.delete_PNGraph
    Save = _swig_new_instance_method(_snap.PNGraph_Save)
    __deref__ = _swig_new_instance_method(_snap.PNGraph___deref__)
    __ref__ = _swig_new_instance_method(_snap.PNGraph___ref__)
    __call__ = _swig_new_instance_method(_snap.PNGraph___call__)
    Empty = _swig_new_instance_method(_snap.PNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.PNGraph_Clr)
    GetRefs = _swig_new_instance_method(_snap.PNGraph_GetRefs)
    Load = _swig_new_instance_method(_snap.PNGraph_Load)
    LoadShM = _swig_new_instance_method(_snap.PNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PNGraph_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PNGraph_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PNGraph_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.PNGraph_IsNode)
    BegNI = _swig_new_instance_method(_snap.PNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.PNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.PNGraph_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PNGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PNGraph_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.PNGraph_AddEdge2)
    DelEdge = _swig_new_instance_method(_snap.PNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PNGraph_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.PNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.PNGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PNGraph_GetNIdV)
    Reserve = _swig_new_instance_method(_snap.PNGraph_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.PNGraph_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.PNGraph_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.PNGraph_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.PNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.PNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.PNGraph_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PNGraph_GetSmallGraph)

# Register PNGraph in _snap:
_snap.PNGraph_swigregister(PNGraph)
PNGraph_New = _snap.PNGraph_New

PrintInfo_PNGraph = _snap.PrintInfo_PNGraph
GetNodeWcc_PNGraph = _snap.GetNodeWcc_PNGraph
IsConnected_PNGraph = _snap.IsConnected_PNGraph
IsWeaklyConn_PNGraph = _snap.IsWeaklyConn_PNGraph
GetWccSzCnt_PNGraph = _snap.GetWccSzCnt_PNGraph
GetWccs_PNGraph = _snap.GetWccs_PNGraph
GetSccSzCnt_PNGraph = _snap.GetSccSzCnt_PNGraph
GetSccs_PNGraph = _snap.GetSccs_PNGraph
GetMxWccSz_PNGraph = _snap.GetMxWccSz_PNGraph
GetMxSccSz_PNGraph = _snap.GetMxSccSz_PNGraph
GetMxWcc_PNGraph = _snap.GetMxWcc_PNGraph
GetMxScc_PNGraph = _snap.GetMxScc_PNGraph
GetMxBiCon_PNGraph = _snap.GetMxBiCon_PNGraph
GetNodeEcc_PNGraph = _snap.GetNodeEcc_PNGraph
GetPageRank_PNGraph = _snap.GetPageRank_PNGraph
GetPageRank_v1_PNGraph = _snap.GetPageRank_v1_PNGraph
GetHits_PNGraph = _snap.GetHits_PNGraph
GetBetweennessCentr_PNGraph = _snap.GetBetweennessCentr_PNGraph
GetClosenessCentr_PNGraph = _snap.GetClosenessCentr_PNGraph
GetFarnessCentr_PNGraph = _snap.GetFarnessCentr_PNGraph
CntInDegNodes_PNGraph = _snap.CntInDegNodes_PNGraph
CntOutDegNodes_PNGraph = _snap.CntOutDegNodes_PNGraph
CntDegNodes_PNGraph = _snap.CntDegNodes_PNGraph
CntNonZNodes_PNGraph = _snap.CntNonZNodes_PNGraph
CntEdgesToSet_PNGraph = _snap.CntEdgesToSet_PNGraph
GetMxDegNId_PNGraph = _snap.GetMxDegNId_PNGraph
GetMxInDegNId_PNGraph = _snap.GetMxInDegNId_PNGraph
GetMxOutDegNId_PNGraph = _snap.GetMxOutDegNId_PNGraph
GetInDegCnt_PNGraph = _snap.GetInDegCnt_PNGraph
GetOutDegCnt_PNGraph = _snap.GetOutDegCnt_PNGraph
GetDegCnt_PNGraph = _snap.GetDegCnt_PNGraph
GetDegSeqV_PNGraph = _snap.GetDegSeqV_PNGraph
GetNodeInDegV_PNGraph = _snap.GetNodeInDegV_PNGraph
GetNodeOutDegV_PNGraph = _snap.GetNodeOutDegV_PNGraph
CntUniqUndirEdges_PNGraph = _snap.CntUniqUndirEdges_PNGraph
CntUniqDirEdges_PNGraph = _snap.CntUniqDirEdges_PNGraph
CntUniqBiDirEdges_PNGraph = _snap.CntUniqBiDirEdges_PNGraph
CntSelfEdges_PNGraph = _snap.CntSelfEdges_PNGraph
GetUnDir_PNGraph = _snap.GetUnDir_PNGraph
MakeUnDir_PNGraph = _snap.MakeUnDir_PNGraph
AddSelfEdges_PNGraph = _snap.AddSelfEdges_PNGraph
DelSelfEdges_PNGraph = _snap.DelSelfEdges_PNGraph
DelNodes_PNGraph = _snap.DelNodes_PNGraph
DelZeroDegNodes_PNGraph = _snap.DelZeroDegNodes_PNGraph
DelDegKNodes_PNGraph = _snap.DelDegKNodes_PNGraph
IsTree_PNGraph = _snap.IsTree_PNGraph
GetTreeRootNId_PNGraph = _snap.GetTreeRootNId_PNGraph
GetTreeSig_PNGraph = _snap.GetTreeSig_PNGraph
GetBfsTree_PNGraph = _snap.GetBfsTree_PNGraph
GetSubTreeSz_PNGraph = _snap.GetSubTreeSz_PNGraph
GetNodesAtHop_PNGraph = _snap.GetNodesAtHop_PNGraph
GetNodesAtHops_PNGraph = _snap.GetNodesAtHops_PNGraph
GetShortPath_PNGraph = _snap.GetShortPath_PNGraph
GetBfsFullDiam_PNGraph = _snap.GetBfsFullDiam_PNGraph
GetBfsEffDiam_PNGraph = _snap.GetBfsEffDiam_PNGraph
GetBfsEffDiamAll_PNGraph = _snap.GetBfsEffDiamAll_PNGraph
DrawGViz_PNGraph = _snap.DrawGViz_PNGraph
GenGrid_PNGraph = _snap.GenGrid_PNGraph
GenStar_PNGraph = _snap.GenStar_PNGraph
GenCircle_PNGraph = _snap.GenCircle_PNGraph
GenFull_PNGraph = _snap.GenFull_PNGraph
GenTree_PNGraph = _snap.GenTree_PNGraph
GenBaraHierar_PNGraph = _snap.GenBaraHierar_PNGraph
GenRndGnm_PNGraph = _snap.GenRndGnm_PNGraph
LoadEdgeList_PNGraph = _snap.LoadEdgeList_PNGraph
LoadEdgeListStr_PNGraph = _snap.LoadEdgeListStr_PNGraph
LoadConnList_PNGraph = _snap.LoadConnList_PNGraph
LoadConnListStr_PNGraph = _snap.LoadConnListStr_PNGraph
LoadPajek_PNGraph = _snap.LoadPajek_PNGraph
SaveEdgeList_PNGraph = _snap.SaveEdgeList_PNGraph
SavePajek_PNGraph = _snap.SavePajek_PNGraph
SaveMatlabSparseMtx_PNGraph = _snap.SaveMatlabSparseMtx_PNGraph
SaveGViz_PNGraph = _snap.SaveGViz_PNGraph
GetKCore_PNGraph = _snap.GetKCore_PNGraph
GetKCoreEdges_PNGraph = _snap.GetKCoreEdges_PNGraph
GetKCoreNodes_PNGraph = _snap.GetKCoreNodes_PNGraph
ConvertGraph_PNGraph_PUNGraph = _snap.ConvertGraph_PNGraph_PUNGraph
ConvertGraph_PNGraph_PNGraph = _snap.ConvertGraph_PNGraph_PNGraph
ConvertGraph_PNGraph_PNEANet = _snap.ConvertGraph_PNGraph_PNEANet
ConvertSubGraph_PNGraph_PUNGraph = _snap.ConvertSubGraph_PNGraph_PUNGraph
ConvertSubGraph_PNGraph_PNGraph = _snap.ConvertSubGraph_PNGraph_PNGraph
ConvertSubGraph_PNGraph_PNEANet = _snap.ConvertSubGraph_PNGraph_PNEANet
ConvertESubGraph_PNGraph_PNEANet = _snap.ConvertESubGraph_PNGraph_PNEANet
GetSubGraph_PNGraph = _snap.GetSubGraph_PNGraph
GetSubGraphRenumber_PNGraph = _snap.GetSubGraphRenumber_PNGraph
GetRndSubGraph_PNGraph = _snap.GetRndSubGraph_PNGraph
GetRndESubGraph_PNGraph = _snap.GetRndESubGraph_PNGraph
GetClustCf_PNGraph = _snap.GetClustCf_PNGraph
GetClustCfAll_PNGraph = _snap.GetClustCfAll_PNGraph
GetNodeClustCf_PNGraph = _snap.GetNodeClustCf_PNGraph
GetTriads_PNGraph = _snap.GetTriads_PNGraph
GetTriadsAll_PNGraph = _snap.GetTriadsAll_PNGraph
GetTriadEdges_PNGraph = _snap.GetTriadEdges_PNGraph
GetNodeTriads_PNGraph = _snap.GetNodeTriads_PNGraph
GetNodeTriadsAll_PNGraph = _snap.GetNodeTriadsAll_PNGraph
GetTriadParticip_PNGraph = _snap.GetTriadParticip_PNGraph
GetTriangleCnt_PNGraph = _snap.GetTriangleCnt_PNGraph
GetCmnNbrs_PNGraph = _snap.GetCmnNbrs_PNGraph
GetLen2Paths_PNGraph = _snap.GetLen2Paths_PNGraph
GetModularity_PNGraph = _snap.GetModularity_PNGraph
GetEdgesInOut_PNGraph = _snap.GetEdgesInOut_PNGraph
GetAnf_PNGraph = _snap.GetAnf_PNGraph
GetAnfEffDiam_PNGraph = _snap.GetAnfEffDiam_PNGraph
TestAnf_PNGraph = _snap.TestAnf_PNGraph
PlotKCoreEdges_PNGraph = _snap.PlotKCoreEdges_PNGraph
PlotKCoreNodes_PNGraph = _snap.PlotKCoreNodes_PNGraph
PlotShortPathDistr_PNGraph = _snap.PlotShortPathDistr_PNGraph
PlotHops_PNGraph = _snap.PlotHops_PNGraph
PlotClustCf_PNGraph = _snap.PlotClustCf_PNGraph
PlotSccDistr_PNGraph = _snap.PlotSccDistr_PNGraph
PlotWccDistr_PNGraph = _snap.PlotWccDistr_PNGraph
PlotOutDegDistr_PNGraph = _snap.PlotOutDegDistr_PNGraph
PlotInDegDistr_PNGraph = _snap.PlotInDegDistr_PNGraph
PercentDegree_PNGraph = _snap.PercentDegree_PNGraph
NodesGTEDegree_PNGraph = _snap.NodesGTEDegree_PNGraph
MxDegree_PNGraph = _snap.MxDegree_PNGraph
PercentMxWcc_PNGraph = _snap.PercentMxWcc_PNGraph
PercentMxScc_PNGraph = _snap.PercentMxScc_PNGraph
ToGraph_PNGraph = _snap.ToGraph_PNGraph

# redefine TUNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUNGraphEdgeI.GetId = GetId

PrintGraphStatTable_PUNGraph = _snap.PrintGraphStatTable_PUNGraph
class PUNGraph(object):
    r"""Proxy of C++ TPt< TUNGraph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PUNGraph_New)
    __swig_destroy__ = _snap.delete_PUNGraph
    Save = _swig_new_instance_method(_snap.PUNGraph_Save)
    __deref__ = _swig_new_instance_method(_snap.PUNGraph___deref__)
    __ref__ = _swig_new_instance_method(_snap.PUNGraph___ref__)
    __call__ = _swig_new_instance_method(_snap.PUNGraph___call__)
    Empty = _swig_new_instance_method(_snap.PUNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.PUNGraph_Clr)
    GetRefs = _swig_new_instance_method(_snap.PUNGraph_GetRefs)
    Load = _swig_new_instance_method(_snap.PUNGraph_Load)
    LoadShM = _swig_new_instance_method(_snap.PUNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PUNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PUNGraph_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PUNGraph_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PUNGraph_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PUNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.PUNGraph_IsNode)
    BegNI = _swig_new_instance_method(_snap.PUNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.PUNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.PUNGraph_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PUNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PUNGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PUNGraph_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PUNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.PUNGraph_AddEdge2)
    DelEdge = _swig_new_instance_method(_snap.PUNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PUNGraph_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PUNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.PUNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.PUNGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PUNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PUNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PUNGraph_GetNIdV)
    SortNodeAdjV = _swig_new_instance_method(_snap.PUNGraph_SortNodeAdjV)
    Reserve = _swig_new_instance_method(_snap.PUNGraph_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.PUNGraph_ReserveNIdDeg)
    Defrag = _swig_new_instance_method(_snap.PUNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.PUNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.PUNGraph_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PUNGraph_GetSmallGraph)

# Register PUNGraph in _snap:
_snap.PUNGraph_swigregister(PUNGraph)
PUNGraph_New = _snap.PUNGraph_New

PrintInfo_PUNGraph = _snap.PrintInfo_PUNGraph
GetNodeWcc_PUNGraph = _snap.GetNodeWcc_PUNGraph
IsConnected_PUNGraph = _snap.IsConnected_PUNGraph
IsWeaklyConn_PUNGraph = _snap.IsWeaklyConn_PUNGraph
GetWccSzCnt_PUNGraph = _snap.GetWccSzCnt_PUNGraph
GetWccs_PUNGraph = _snap.GetWccs_PUNGraph
GetSccSzCnt_PUNGraph = _snap.GetSccSzCnt_PUNGraph
GetSccs_PUNGraph = _snap.GetSccs_PUNGraph
GetMxWccSz_PUNGraph = _snap.GetMxWccSz_PUNGraph
GetMxSccSz_PUNGraph = _snap.GetMxSccSz_PUNGraph
GetMxWcc_PUNGraph = _snap.GetMxWcc_PUNGraph
GetMxScc_PUNGraph = _snap.GetMxScc_PUNGraph
GetMxBiCon_PUNGraph = _snap.GetMxBiCon_PUNGraph
GetNodeEcc_PUNGraph = _snap.GetNodeEcc_PUNGraph
GetPageRank_PUNGraph = _snap.GetPageRank_PUNGraph
GetPageRank_v1_PUNGraph = _snap.GetPageRank_v1_PUNGraph
GetHits_PUNGraph = _snap.GetHits_PUNGraph
GetBetweennessCentr_PUNGraph = _snap.GetBetweennessCentr_PUNGraph
GetClosenessCentr_PUNGraph = _snap.GetClosenessCentr_PUNGraph
GetFarnessCentr_PUNGraph = _snap.GetFarnessCentr_PUNGraph
CntInDegNodes_PUNGraph = _snap.CntInDegNodes_PUNGraph
CntOutDegNodes_PUNGraph = _snap.CntOutDegNodes_PUNGraph
CntDegNodes_PUNGraph = _snap.CntDegNodes_PUNGraph
CntNonZNodes_PUNGraph = _snap.CntNonZNodes_PUNGraph
CntEdgesToSet_PUNGraph = _snap.CntEdgesToSet_PUNGraph
GetMxDegNId_PUNGraph = _snap.GetMxDegNId_PUNGraph
GetMxInDegNId_PUNGraph = _snap.GetMxInDegNId_PUNGraph
GetMxOutDegNId_PUNGraph = _snap.GetMxOutDegNId_PUNGraph
GetInDegCnt_PUNGraph = _snap.GetInDegCnt_PUNGraph
GetOutDegCnt_PUNGraph = _snap.GetOutDegCnt_PUNGraph
GetDegCnt_PUNGraph = _snap.GetDegCnt_PUNGraph
GetDegSeqV_PUNGraph = _snap.GetDegSeqV_PUNGraph
GetNodeInDegV_PUNGraph = _snap.GetNodeInDegV_PUNGraph
GetNodeOutDegV_PUNGraph = _snap.GetNodeOutDegV_PUNGraph
CntUniqUndirEdges_PUNGraph = _snap.CntUniqUndirEdges_PUNGraph
CntUniqDirEdges_PUNGraph = _snap.CntUniqDirEdges_PUNGraph
CntUniqBiDirEdges_PUNGraph = _snap.CntUniqBiDirEdges_PUNGraph
CntSelfEdges_PUNGraph = _snap.CntSelfEdges_PUNGraph
GetUnDir_PUNGraph = _snap.GetUnDir_PUNGraph
MakeUnDir_PUNGraph = _snap.MakeUnDir_PUNGraph
AddSelfEdges_PUNGraph = _snap.AddSelfEdges_PUNGraph
DelSelfEdges_PUNGraph = _snap.DelSelfEdges_PUNGraph
DelNodes_PUNGraph = _snap.DelNodes_PUNGraph
DelZeroDegNodes_PUNGraph = _snap.DelZeroDegNodes_PUNGraph
DelDegKNodes_PUNGraph = _snap.DelDegKNodes_PUNGraph
IsTree_PUNGraph = _snap.IsTree_PUNGraph
GetTreeRootNId_PUNGraph = _snap.GetTreeRootNId_PUNGraph
GetTreeSig_PUNGraph = _snap.GetTreeSig_PUNGraph
GetBfsTree_PUNGraph = _snap.GetBfsTree_PUNGraph
GetSubTreeSz_PUNGraph = _snap.GetSubTreeSz_PUNGraph
GetNodesAtHop_PUNGraph = _snap.GetNodesAtHop_PUNGraph
GetNodesAtHops_PUNGraph = _snap.GetNodesAtHops_PUNGraph
GetShortPath_PUNGraph = _snap.GetShortPath_PUNGraph
GetBfsFullDiam_PUNGraph = _snap.GetBfsFullDiam_PUNGraph
GetBfsEffDiam_PUNGraph = _snap.GetBfsEffDiam_PUNGraph
GetBfsEffDiamAll_PUNGraph = _snap.GetBfsEffDiamAll_PUNGraph
DrawGViz_PUNGraph = _snap.DrawGViz_PUNGraph
GenGrid_PUNGraph = _snap.GenGrid_PUNGraph
GenStar_PUNGraph = _snap.GenStar_PUNGraph
GenCircle_PUNGraph = _snap.GenCircle_PUNGraph
GenFull_PUNGraph = _snap.GenFull_PUNGraph
GenTree_PUNGraph = _snap.GenTree_PUNGraph
GenBaraHierar_PUNGraph = _snap.GenBaraHierar_PUNGraph
GenRndGnm_PUNGraph = _snap.GenRndGnm_PUNGraph
LoadEdgeList_PUNGraph = _snap.LoadEdgeList_PUNGraph
LoadEdgeListStr_PUNGraph = _snap.LoadEdgeListStr_PUNGraph
LoadConnList_PUNGraph = _snap.LoadConnList_PUNGraph
LoadConnListStr_PUNGraph = _snap.LoadConnListStr_PUNGraph
LoadPajek_PUNGraph = _snap.LoadPajek_PUNGraph
SaveEdgeList_PUNGraph = _snap.SaveEdgeList_PUNGraph
SavePajek_PUNGraph = _snap.SavePajek_PUNGraph
SaveMatlabSparseMtx_PUNGraph = _snap.SaveMatlabSparseMtx_PUNGraph
SaveGViz_PUNGraph = _snap.SaveGViz_PUNGraph
GetKCore_PUNGraph = _snap.GetKCore_PUNGraph
GetKCoreEdges_PUNGraph = _snap.GetKCoreEdges_PUNGraph
GetKCoreNodes_PUNGraph = _snap.GetKCoreNodes_PUNGraph
ConvertGraph_PUNGraph_PUNGraph = _snap.ConvertGraph_PUNGraph_PUNGraph
ConvertGraph_PUNGraph_PNGraph = _snap.ConvertGraph_PUNGraph_PNGraph
ConvertGraph_PUNGraph_PNEANet = _snap.ConvertGraph_PUNGraph_PNEANet
ConvertSubGraph_PUNGraph_PUNGraph = _snap.ConvertSubGraph_PUNGraph_PUNGraph
ConvertSubGraph_PUNGraph_PNGraph = _snap.ConvertSubGraph_PUNGraph_PNGraph
ConvertSubGraph_PUNGraph_PNEANet = _snap.ConvertSubGraph_PUNGraph_PNEANet
ConvertESubGraph_PUNGraph_PNEANet = _snap.ConvertESubGraph_PUNGraph_PNEANet
GetSubGraph_PUNGraph = _snap.GetSubGraph_PUNGraph
GetSubGraphRenumber_PUNGraph = _snap.GetSubGraphRenumber_PUNGraph
GetRndSubGraph_PUNGraph = _snap.GetRndSubGraph_PUNGraph
GetRndESubGraph_PUNGraph = _snap.GetRndESubGraph_PUNGraph
GetClustCf_PUNGraph = _snap.GetClustCf_PUNGraph
GetClustCfAll_PUNGraph = _snap.GetClustCfAll_PUNGraph
GetNodeClustCf_PUNGraph = _snap.GetNodeClustCf_PUNGraph
GetTriads_PUNGraph = _snap.GetTriads_PUNGraph
GetTriadsAll_PUNGraph = _snap.GetTriadsAll_PUNGraph
GetTriadEdges_PUNGraph = _snap.GetTriadEdges_PUNGraph
GetNodeTriads_PUNGraph = _snap.GetNodeTriads_PUNGraph
GetNodeTriadsAll_PUNGraph = _snap.GetNodeTriadsAll_PUNGraph
GetTriadParticip_PUNGraph = _snap.GetTriadParticip_PUNGraph
GetTriangleCnt_PUNGraph = _snap.GetTriangleCnt_PUNGraph
GetCmnNbrs_PUNGraph = _snap.GetCmnNbrs_PUNGraph
GetLen2Paths_PUNGraph = _snap.GetLen2Paths_PUNGraph
GetModularity_PUNGraph = _snap.GetModularity_PUNGraph
GetEdgesInOut_PUNGraph = _snap.GetEdgesInOut_PUNGraph
GetAnf_PUNGraph = _snap.GetAnf_PUNGraph
GetAnfEffDiam_PUNGraph = _snap.GetAnfEffDiam_PUNGraph
TestAnf_PUNGraph = _snap.TestAnf_PUNGraph
PlotKCoreEdges_PUNGraph = _snap.PlotKCoreEdges_PUNGraph
PlotKCoreNodes_PUNGraph = _snap.PlotKCoreNodes_PUNGraph
PlotShortPathDistr_PUNGraph = _snap.PlotShortPathDistr_PUNGraph
PlotHops_PUNGraph = _snap.PlotHops_PUNGraph
PlotClustCf_PUNGraph = _snap.PlotClustCf_PUNGraph
PlotSccDistr_PUNGraph = _snap.PlotSccDistr_PUNGraph
PlotWccDistr_PUNGraph = _snap.PlotWccDistr_PUNGraph
PlotOutDegDistr_PUNGraph = _snap.PlotOutDegDistr_PUNGraph
PlotInDegDistr_PUNGraph = _snap.PlotInDegDistr_PUNGraph
PercentDegree_PUNGraph = _snap.PercentDegree_PUNGraph
NodesGTEDegree_PUNGraph = _snap.NodesGTEDegree_PUNGraph
MxDegree_PUNGraph = _snap.MxDegree_PUNGraph
PercentMxWcc_PUNGraph = _snap.PercentMxWcc_PUNGraph
PercentMxScc_PUNGraph = _snap.PercentMxScc_PUNGraph
ToGraph_PUNGraph = _snap.ToGraph_PUNGraph

# redefine TDirNetEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TDirNetEdgeI.GetId = GetId

PrintGraphStatTable_PDirNet = _snap.PrintGraphStatTable_PDirNet
class PDirNet(object):
    r"""Proxy of C++ TPt< TDirNet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PDirNet_New)
    __swig_destroy__ = _snap.delete_PDirNet
    Save = _swig_new_instance_method(_snap.PDirNet_Save)
    __deref__ = _swig_new_instance_method(_snap.PDirNet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PDirNet___ref__)
    __call__ = _swig_new_instance_method(_snap.PDirNet___call__)
    Empty = _swig_new_instance_method(_snap.PDirNet_Empty)
    Clr = _swig_new_instance_method(_snap.PDirNet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PDirNet_GetRefs)
    Save_V1 = _swig_new_instance_method(_snap.PDirNet_Save_V1)
    Load = _swig_new_instance_method(_snap.PDirNet_Load)
    Load_V1 = _swig_new_instance_method(_snap.PDirNet_Load_V1)
    LoadShM = _swig_new_instance_method(_snap.PDirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PDirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PDirNet_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PDirNet_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PDirNet_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PDirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.PDirNet_IsNode)
    BegNI = _swig_new_instance_method(_snap.PDirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.PDirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.PDirNet_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PDirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PDirNet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PDirNet_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PDirNet_AddEdgeUnchecked)
    DelEdge = _swig_new_instance_method(_snap.PDirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PDirNet_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PDirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.PDirNet_EndEI)
    GetEI = _swig_new_instance_method(_snap.PDirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PDirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PDirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PDirNet_GetNIdV)
    Reserve = _swig_new_instance_method(_snap.PDirNet_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.PDirNet_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.PDirNet_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.PDirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.PDirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.PDirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.PDirNet_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PDirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.PDirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.PDirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.PDirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.PDirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.PDirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.PDirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.PDirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.PDirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.PDirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.PDirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.PDirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.PDirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.PDirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.PDirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.PDirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.PDirNet_GetSAttrNameE)

# Register PDirNet in _snap:
_snap.PDirNet_swigregister(PDirNet)
PDirNet_New = _snap.PDirNet_New

PrintInfo_PDirNet = _snap.PrintInfo_PDirNet
GetNodeWcc_PDirNet = _snap.GetNodeWcc_PDirNet
IsConnected_PDirNet = _snap.IsConnected_PDirNet
IsWeaklyConn_PDirNet = _snap.IsWeaklyConn_PDirNet
GetWccSzCnt_PDirNet = _snap.GetWccSzCnt_PDirNet
GetWccs_PDirNet = _snap.GetWccs_PDirNet
GetSccSzCnt_PDirNet = _snap.GetSccSzCnt_PDirNet
GetSccs_PDirNet = _snap.GetSccs_PDirNet
GetMxWccSz_PDirNet = _snap.GetMxWccSz_PDirNet
GetMxSccSz_PDirNet = _snap.GetMxSccSz_PDirNet
GetMxWcc_PDirNet = _snap.GetMxWcc_PDirNet
GetMxScc_PDirNet = _snap.GetMxScc_PDirNet
GetMxBiCon_PDirNet = _snap.GetMxBiCon_PDirNet
GetNodeEcc_PDirNet = _snap.GetNodeEcc_PDirNet
GetPageRank_PDirNet = _snap.GetPageRank_PDirNet
GetPageRank_v1_PDirNet = _snap.GetPageRank_v1_PDirNet
GetHits_PDirNet = _snap.GetHits_PDirNet
CntInDegNodes_PDirNet = _snap.CntInDegNodes_PDirNet
CntOutDegNodes_PDirNet = _snap.CntOutDegNodes_PDirNet
CntDegNodes_PDirNet = _snap.CntDegNodes_PDirNet
CntNonZNodes_PDirNet = _snap.CntNonZNodes_PDirNet
CntEdgesToSet_PDirNet = _snap.CntEdgesToSet_PDirNet
GetMxDegNId_PDirNet = _snap.GetMxDegNId_PDirNet
GetMxInDegNId_PDirNet = _snap.GetMxInDegNId_PDirNet
GetMxOutDegNId_PDirNet = _snap.GetMxOutDegNId_PDirNet
GetInDegCnt_PDirNet = _snap.GetInDegCnt_PDirNet
GetOutDegCnt_PDirNet = _snap.GetOutDegCnt_PDirNet
GetDegCnt_PDirNet = _snap.GetDegCnt_PDirNet
GetDegSeqV_PDirNet = _snap.GetDegSeqV_PDirNet
GetNodeInDegV_PDirNet = _snap.GetNodeInDegV_PDirNet
GetNodeOutDegV_PDirNet = _snap.GetNodeOutDegV_PDirNet
CntUniqUndirEdges_PDirNet = _snap.CntUniqUndirEdges_PDirNet
CntUniqDirEdges_PDirNet = _snap.CntUniqDirEdges_PDirNet
CntUniqBiDirEdges_PDirNet = _snap.CntUniqBiDirEdges_PDirNet
CntSelfEdges_PDirNet = _snap.CntSelfEdges_PDirNet
GetUnDir_PDirNet = _snap.GetUnDir_PDirNet
MakeUnDir_PDirNet = _snap.MakeUnDir_PDirNet
AddSelfEdges_PDirNet = _snap.AddSelfEdges_PDirNet
DelSelfEdges_PDirNet = _snap.DelSelfEdges_PDirNet
DelNodes_PDirNet = _snap.DelNodes_PDirNet
DelZeroDegNodes_PDirNet = _snap.DelZeroDegNodes_PDirNet
DelDegKNodes_PDirNet = _snap.DelDegKNodes_PDirNet
IsTree_PDirNet = _snap.IsTree_PDirNet
GetTreeRootNId_PDirNet = _snap.GetTreeRootNId_PDirNet
GetTreeSig_PDirNet = _snap.GetTreeSig_PDirNet
GetBfsTree_PDirNet = _snap.GetBfsTree_PDirNet
GetSubTreeSz_PDirNet = _snap.GetSubTreeSz_PDirNet
GetNodesAtHop_PDirNet = _snap.GetNodesAtHop_PDirNet
GetNodesAtHops_PDirNet = _snap.GetNodesAtHops_PDirNet
GetShortPath_PDirNet = _snap.GetShortPath_PDirNet
GetBfsFullDiam_PDirNet = _snap.GetBfsFullDiam_PDirNet
GetBfsEffDiam_PDirNet = _snap.GetBfsEffDiam_PDirNet
GetBfsEffDiamAll_PDirNet = _snap.GetBfsEffDiamAll_PDirNet
DrawGViz_PDirNet = _snap.DrawGViz_PDirNet
GenGrid_PDirNet = _snap.GenGrid_PDirNet
GenStar_PDirNet = _snap.GenStar_PDirNet
GenCircle_PDirNet = _snap.GenCircle_PDirNet
GenFull_PDirNet = _snap.GenFull_PDirNet
GenTree_PDirNet = _snap.GenTree_PDirNet
GenBaraHierar_PDirNet = _snap.GenBaraHierar_PDirNet
GenRndGnm_PDirNet = _snap.GenRndGnm_PDirNet
LoadEdgeList_PDirNet = _snap.LoadEdgeList_PDirNet
LoadEdgeListStr_PDirNet = _snap.LoadEdgeListStr_PDirNet
LoadConnList_PDirNet = _snap.LoadConnList_PDirNet
LoadConnListStr_PDirNet = _snap.LoadConnListStr_PDirNet
LoadPajek_PDirNet = _snap.LoadPajek_PDirNet
SaveEdgeList_PDirNet = _snap.SaveEdgeList_PDirNet
SavePajek_PDirNet = _snap.SavePajek_PDirNet
SaveMatlabSparseMtx_PDirNet = _snap.SaveMatlabSparseMtx_PDirNet
SaveGViz_PDirNet = _snap.SaveGViz_PDirNet
GetKCore_PDirNet = _snap.GetKCore_PDirNet
GetKCoreEdges_PDirNet = _snap.GetKCoreEdges_PDirNet
GetKCoreNodes_PDirNet = _snap.GetKCoreNodes_PDirNet
ConvertGraph_PDirNet_PUNGraph = _snap.ConvertGraph_PDirNet_PUNGraph
ConvertGraph_PDirNet_PDirNet = _snap.ConvertGraph_PDirNet_PDirNet
ConvertGraph_PDirNet_PNEANet = _snap.ConvertGraph_PDirNet_PNEANet
ConvertSubGraph_PDirNet_PUNGraph = _snap.ConvertSubGraph_PDirNet_PUNGraph
ConvertSubGraph_PDirNet_PDirNet = _snap.ConvertSubGraph_PDirNet_PDirNet
ConvertSubGraph_PDirNet_PNEANet = _snap.ConvertSubGraph_PDirNet_PNEANet
ConvertESubGraph_PDirNet_PNEANet = _snap.ConvertESubGraph_PDirNet_PNEANet
GetSubGraph_PDirNet = _snap.GetSubGraph_PDirNet
GetRndSubGraph_PDirNet = _snap.GetRndSubGraph_PDirNet
GetRndESubGraph_PDirNet = _snap.GetRndESubGraph_PDirNet
GetClustCf_PDirNet = _snap.GetClustCf_PDirNet
GetClustCfAll_PDirNet = _snap.GetClustCfAll_PDirNet
GetNodeClustCf_PDirNet = _snap.GetNodeClustCf_PDirNet
GetTriads_PDirNet = _snap.GetTriads_PDirNet
GetTriadsAll_PDirNet = _snap.GetTriadsAll_PDirNet
GetTriadEdges_PDirNet = _snap.GetTriadEdges_PDirNet
GetNodeTriads_PDirNet = _snap.GetNodeTriads_PDirNet
GetNodeTriadsAll_PDirNet = _snap.GetNodeTriadsAll_PDirNet
GetTriadParticip_PDirNet = _snap.GetTriadParticip_PDirNet
GetTriangleCnt_PDirNet = _snap.GetTriangleCnt_PDirNet
GetCmnNbrs_PDirNet = _snap.GetCmnNbrs_PDirNet
GetLen2Paths_PDirNet = _snap.GetLen2Paths_PDirNet
GetModularity_PDirNet = _snap.GetModularity_PDirNet
GetEdgesInOut_PDirNet = _snap.GetEdgesInOut_PDirNet
GetAnf_PDirNet = _snap.GetAnf_PDirNet
GetAnfEffDiam_PDirNet = _snap.GetAnfEffDiam_PDirNet
TestAnf_PDirNet = _snap.TestAnf_PDirNet
PlotKCoreEdges_PDirNet = _snap.PlotKCoreEdges_PDirNet
PlotKCoreNodes_PDirNet = _snap.PlotKCoreNodes_PDirNet
PlotShortPathDistr_PDirNet = _snap.PlotShortPathDistr_PDirNet
PlotHops_PDirNet = _snap.PlotHops_PDirNet
PlotClustCf_PDirNet = _snap.PlotClustCf_PDirNet
PlotSccDistr_PDirNet = _snap.PlotSccDistr_PDirNet
PlotWccDistr_PDirNet = _snap.PlotWccDistr_PDirNet
PlotOutDegDistr_PDirNet = _snap.PlotOutDegDistr_PDirNet
PlotInDegDistr_PDirNet = _snap.PlotInDegDistr_PDirNet
PercentDegree_PDirNet = _snap.PercentDegree_PDirNet
NodesGTEDegree_PDirNet = _snap.NodesGTEDegree_PDirNet
MxDegree_PDirNet = _snap.MxDegree_PDirNet
PercentMxWcc_PDirNet = _snap.PercentMxWcc_PDirNet
PercentMxScc_PDirNet = _snap.PercentMxScc_PDirNet
ToGraph_PDirNet = _snap.ToGraph_PDirNet

# redefine TUndirNetEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUndirNetEdgeI.GetId = GetId

PrintGraphStatTable_PUndirNet = _snap.PrintGraphStatTable_PUndirNet
class PUndirNet(object):
    r"""Proxy of C++ TPt< TUndirNet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PUndirNet_New)
    __swig_destroy__ = _snap.delete_PUndirNet
    Save = _swig_new_instance_method(_snap.PUndirNet_Save)
    __deref__ = _swig_new_instance_method(_snap.PUndirNet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PUndirNet___ref__)
    __call__ = _swig_new_instance_method(_snap.PUndirNet___call__)
    Empty = _swig_new_instance_method(_snap.PUndirNet_Empty)
    Clr = _swig_new_instance_method(_snap.PUndirNet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PUndirNet_GetRefs)
    Save_V1 = _swig_new_instance_method(_snap.PUndirNet_Save_V1)
    Load = _swig_new_instance_method(_snap.PUndirNet_Load)
    Load_V1 = _swig_new_instance_method(_snap.PUndirNet_Load_V1)
    LoadShM = _swig_new_instance_method(_snap.PUndirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PUndirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PUndirNet_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PUndirNet_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PUndirNet_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PUndirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.PUndirNet_IsNode)
    BegNI = _swig_new_instance_method(_snap.PUndirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.PUndirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.PUndirNet_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PUndirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PUndirNet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PUndirNet_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PUndirNet_AddEdgeUnchecked)
    DelEdge = _swig_new_instance_method(_snap.PUndirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PUndirNet_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PUndirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.PUndirNet_EndEI)
    GetEI = _swig_new_instance_method(_snap.PUndirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PUndirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PUndirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PUndirNet_GetNIdV)
    Reserve = _swig_new_instance_method(_snap.PUndirNet_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.PUndirNet_ReserveNIdDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.PUndirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.PUndirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.PUndirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.PUndirNet_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PUndirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.PUndirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.PUndirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.PUndirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.PUndirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.PUndirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.PUndirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.PUndirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.PUndirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrNameE)

# Register PUndirNet in _snap:
_snap.PUndirNet_swigregister(PUndirNet)
PUndirNet_New = _snap.PUndirNet_New

PrintInfo_PUndirNet = _snap.PrintInfo_PUndirNet
GetNodeWcc_PUndirNet = _snap.GetNodeWcc_PUndirNet
IsConnected_PUndirNet = _snap.IsConnected_PUndirNet
IsWeaklyConn_PUndirNet = _snap.IsWeaklyConn_PUndirNet
GetWccSzCnt_PUndirNet = _snap.GetWccSzCnt_PUndirNet
GetWccs_PUndirNet = _snap.GetWccs_PUndirNet
GetSccSzCnt_PUndirNet = _snap.GetSccSzCnt_PUndirNet
GetSccs_PUndirNet = _snap.GetSccs_PUndirNet
GetMxWccSz_PUndirNet = _snap.GetMxWccSz_PUndirNet
GetMxSccSz_PUndirNet = _snap.GetMxSccSz_PUndirNet
GetMxWcc_PUndirNet = _snap.GetMxWcc_PUndirNet
GetMxScc_PUndirNet = _snap.GetMxScc_PUndirNet
GetMxBiCon_PUndirNet = _snap.GetMxBiCon_PUndirNet
GetNodeEcc_PUndirNet = _snap.GetNodeEcc_PUndirNet
GetPageRank_PUndirNet = _snap.GetPageRank_PUndirNet
GetPageRank_v1_PUndirNet = _snap.GetPageRank_v1_PUndirNet
GetHits_PUndirNet = _snap.GetHits_PUndirNet
CntInDegNodes_PUndirNet = _snap.CntInDegNodes_PUndirNet
CntOutDegNodes_PUndirNet = _snap.CntOutDegNodes_PUndirNet
CntDegNodes_PUndirNet = _snap.CntDegNodes_PUndirNet
CntNonZNodes_PUndirNet = _snap.CntNonZNodes_PUndirNet
CntEdgesToSet_PUndirNet = _snap.CntEdgesToSet_PUndirNet
GetMxDegNId_PUndirNet = _snap.GetMxDegNId_PUndirNet
GetMxInDegNId_PUndirNet = _snap.GetMxInDegNId_PUndirNet
GetMxOutDegNId_PUndirNet = _snap.GetMxOutDegNId_PUndirNet
GetInDegCnt_PUndirNet = _snap.GetInDegCnt_PUndirNet
GetOutDegCnt_PUndirNet = _snap.GetOutDegCnt_PUndirNet
GetDegCnt_PUndirNet = _snap.GetDegCnt_PUndirNet
GetDegSeqV_PUndirNet = _snap.GetDegSeqV_PUndirNet
GetNodeInDegV_PUndirNet = _snap.GetNodeInDegV_PUndirNet
GetNodeOutDegV_PUndirNet = _snap.GetNodeOutDegV_PUndirNet
CntUniqUndirEdges_PUndirNet = _snap.CntUniqUndirEdges_PUndirNet
CntUniqDirEdges_PUndirNet = _snap.CntUniqDirEdges_PUndirNet
CntUniqBiDirEdges_PUndirNet = _snap.CntUniqBiDirEdges_PUndirNet
CntSelfEdges_PUndirNet = _snap.CntSelfEdges_PUndirNet
GetUnDir_PUndirNet = _snap.GetUnDir_PUndirNet
MakeUnDir_PUndirNet = _snap.MakeUnDir_PUndirNet
AddSelfEdges_PUndirNet = _snap.AddSelfEdges_PUndirNet
DelSelfEdges_PUndirNet = _snap.DelSelfEdges_PUndirNet
DelNodes_PUndirNet = _snap.DelNodes_PUndirNet
DelZeroDegNodes_PUndirNet = _snap.DelZeroDegNodes_PUndirNet
DelDegKNodes_PUndirNet = _snap.DelDegKNodes_PUndirNet
IsTree_PUndirNet = _snap.IsTree_PUndirNet
GetTreeRootNId_PUndirNet = _snap.GetTreeRootNId_PUndirNet
GetTreeSig_PUndirNet = _snap.GetTreeSig_PUndirNet
GetBfsTree_PUndirNet = _snap.GetBfsTree_PUndirNet
GetSubTreeSz_PUndirNet = _snap.GetSubTreeSz_PUndirNet
GetNodesAtHop_PUndirNet = _snap.GetNodesAtHop_PUndirNet
GetNodesAtHops_PUndirNet = _snap.GetNodesAtHops_PUndirNet
GetShortPath_PUndirNet = _snap.GetShortPath_PUndirNet
GetBfsFullDiam_PUndirNet = _snap.GetBfsFullDiam_PUndirNet
GetBfsEffDiam_PUndirNet = _snap.GetBfsEffDiam_PUndirNet
GetBfsEffDiamAll_PUndirNet = _snap.GetBfsEffDiamAll_PUndirNet
DrawGViz_PUndirNet = _snap.DrawGViz_PUndirNet
GenGrid_PUndirNet = _snap.GenGrid_PUndirNet
GenStar_PUndirNet = _snap.GenStar_PUndirNet
GenCircle_PUndirNet = _snap.GenCircle_PUndirNet
GenFull_PUndirNet = _snap.GenFull_PUndirNet
GenTree_PUndirNet = _snap.GenTree_PUndirNet
GenBaraHierar_PUndirNet = _snap.GenBaraHierar_PUndirNet
GenRndGnm_PUndirNet = _snap.GenRndGnm_PUndirNet
LoadEdgeList_PUndirNet = _snap.LoadEdgeList_PUndirNet
LoadEdgeListStr_PUndirNet = _snap.LoadEdgeListStr_PUndirNet
LoadConnList_PUndirNet = _snap.LoadConnList_PUndirNet
LoadConnListStr_PUndirNet = _snap.LoadConnListStr_PUndirNet
LoadPajek_PUndirNet = _snap.LoadPajek_PUndirNet
SaveEdgeList_PUndirNet = _snap.SaveEdgeList_PUndirNet
SavePajek_PUndirNet = _snap.SavePajek_PUndirNet
SaveMatlabSparseMtx_PUndirNet = _snap.SaveMatlabSparseMtx_PUndirNet
SaveGViz_PUndirNet = _snap.SaveGViz_PUndirNet
GetKCore_PUndirNet = _snap.GetKCore_PUndirNet
GetKCoreEdges_PUndirNet = _snap.GetKCoreEdges_PUndirNet
GetKCoreNodes_PUndirNet = _snap.GetKCoreNodes_PUndirNet
ConvertGraph_PUndirNet_PUndirNet = _snap.ConvertGraph_PUndirNet_PUndirNet
ConvertGraph_PUndirNet_PNGraph = _snap.ConvertGraph_PUndirNet_PNGraph
ConvertGraph_PUndirNet_PNEANet = _snap.ConvertGraph_PUndirNet_PNEANet
ConvertSubGraph_PUndirNet_PUndirNet = _snap.ConvertSubGraph_PUndirNet_PUndirNet
ConvertSubGraph_PUndirNet_PNGraph = _snap.ConvertSubGraph_PUndirNet_PNGraph
ConvertSubGraph_PUndirNet_PNEANet = _snap.ConvertSubGraph_PUndirNet_PNEANet
ConvertESubGraph_PUndirNet_PNEANet = _snap.ConvertESubGraph_PUndirNet_PNEANet
GetSubGraph_PUndirNet = _snap.GetSubGraph_PUndirNet
GetRndSubGraph_PUndirNet = _snap.GetRndSubGraph_PUndirNet
GetRndESubGraph_PUndirNet = _snap.GetRndESubGraph_PUndirNet
GetClustCf_PUndirNet = _snap.GetClustCf_PUndirNet
GetClustCfAll_PUndirNet = _snap.GetClustCfAll_PUndirNet
GetNodeClustCf_PUndirNet = _snap.GetNodeClustCf_PUndirNet
GetTriads_PUndirNet = _snap.GetTriads_PUndirNet
GetTriadsAll_PUndirNet = _snap.GetTriadsAll_PUndirNet
GetTriadEdges_PUndirNet = _snap.GetTriadEdges_PUndirNet
GetNodeTriads_PUndirNet = _snap.GetNodeTriads_PUndirNet
GetNodeTriadsAll_PUndirNet = _snap.GetNodeTriadsAll_PUndirNet
GetTriadParticip_PUndirNet = _snap.GetTriadParticip_PUndirNet
GetTriangleCnt_PUndirNet = _snap.GetTriangleCnt_PUndirNet
GetCmnNbrs_PUndirNet = _snap.GetCmnNbrs_PUndirNet
GetLen2Paths_PUndirNet = _snap.GetLen2Paths_PUndirNet
GetModularity_PUndirNet = _snap.GetModularity_PUndirNet
GetEdgesInOut_PUndirNet = _snap.GetEdgesInOut_PUndirNet
GetAnf_PUndirNet = _snap.GetAnf_PUndirNet
GetAnfEffDiam_PUndirNet = _snap.GetAnfEffDiam_PUndirNet
TestAnf_PUndirNet = _snap.TestAnf_PUndirNet
PlotKCoreEdges_PUndirNet = _snap.PlotKCoreEdges_PUndirNet
PlotKCoreNodes_PUndirNet = _snap.PlotKCoreNodes_PUndirNet
PlotShortPathDistr_PUndirNet = _snap.PlotShortPathDistr_PUndirNet
PlotHops_PUndirNet = _snap.PlotHops_PUndirNet
PlotClustCf_PUndirNet = _snap.PlotClustCf_PUndirNet
PlotSccDistr_PUndirNet = _snap.PlotSccDistr_PUndirNet
PlotWccDistr_PUndirNet = _snap.PlotWccDistr_PUndirNet
PlotOutDegDistr_PUndirNet = _snap.PlotOutDegDistr_PUndirNet
PlotInDegDistr_PUndirNet = _snap.PlotInDegDistr_PUndirNet
PercentDegree_PUndirNet = _snap.PercentDegree_PUndirNet
NodesGTEDegree_PUndirNet = _snap.NodesGTEDegree_PUndirNet
MxDegree_PUndirNet = _snap.MxDegree_PUndirNet
PercentMxWcc_PUndirNet = _snap.PercentMxWcc_PUndirNet
PercentMxScc_PUndirNet = _snap.PercentMxScc_PUndirNet
ToGraph_PUndirNet = _snap.ToGraph_PUndirNet


#
# dispatch table for instantiated polymorphic SNAP templates
# BELOW INCLUDE out-*.txt
#

def LoadPajek(tspec, *args):
    if tspec == PUNGraph: return LoadPajek_PUNGraph(*args)
    if tspec == PUndirNet: return LoadPajek_PUndirNet(*args)
    if tspec == PDirNet: return LoadPajek_PDirNet(*args)
    if tspec == PNGraph : return LoadPajek_PNGraph(*args)
    if tspec == PNEANet : return LoadPajek_PNEANet(*args)
    if tspec == PNGraphMP: return LoadPajek_PNGraphMP(*args)
    if tspec == PNEANetMP: return LoadPajek_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def SaveGViz(tspec, *args):
    if type(tspec) == PUNGraph: return SaveGViz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveGViz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveGViz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveGViz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveGViz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveGViz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def TestAnf(tspec, *args):
    if type(tspec) == PUNGraph: return TestAnf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return TestAnf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return TestAnf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return TestAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return TestAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return TestAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return TestAnf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntEdgesToSet(tspec, *args):
    if type(tspec) == PUNGraph: return CntEdgesToSet_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntEdgesToSet_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntEdgesToSet_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntEdgesToSet_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntEdgesToSet_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntEdgesToSet_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntEdgesToSet_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetModularity(tspec, *args):
    if type(tspec) == PUNGraph: return GetModularity_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetModularity_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetModularity_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetModularity_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetModularity_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetModularity_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetModularity_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsEffDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsEffDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsEffDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsEffDiamAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsEffDiamAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsEffDiamAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsEffDiamAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsEffDiamAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsEffDiamAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsEffDiamAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsEffDiamAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentMxWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentMxWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubGraphRenumber(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubGraphRenumber_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubGraphRenumber_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubGraphRenumber_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubGraphRenumber_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubGraphRenumber_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubGraphRenumber_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubGraphRenumber_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsTree(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsTree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsTree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsTree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsTree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PrintGraphStatTable(tspec, *args):
    if type(tspec) == PUNGraph: return PrintGraphStatTable_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PrintGraphStatTable_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PrintGraphStatTable_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PrintGraphStatTable_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintGraphStatTable_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintGraphStatTable_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintGraphStatTable_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetDegSeqV(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegSeqV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetDegSeqV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetDegSeqV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetDegSeqV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegSeqV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegSeqV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegSeqV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenGrid(tspec, *args):
    if tspec == PUNGraph: return GenGrid_PUNGraph(*args)
    if tspec == PUndirNet: return GenGrid_PUndirNet(*args)
    if tspec == PDirNet: return GenGrid_PDirNet(*args)
    if tspec == PNGraph : return GenGrid_PNGraph(*args)
    if tspec == PNEANet : return GenGrid_PNEANet(*args)
    if tspec == PNGraphMP: return GenGrid_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenGrid_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def LoadEdgeList(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeList_PUNGraph(*args)
    if tspec == PUndirNet: return LoadEdgeList_PUndirNet(*args)
    if tspec == PDirNet: return LoadEdgeList_PDirNet(*args)
    if tspec == PNGraph : return LoadEdgeList_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeList_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return GetUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetUnDir_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetUnDir_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetUnDir_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DrawGViz(tspec, *args):
    if type(tspec) == PUNGraph: return DrawGViz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DrawGViz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DrawGViz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DrawGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DrawGViz_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return DrawGViz_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return DrawGViz_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotKCoreNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotKCoreNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotOutDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotOutDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotOutDegDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotOutDegDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotOutDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotOutDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotOutDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotOutDegDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntUniqBiDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqBiDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqBiDirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqBiDirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqBiDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqBiDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqBiDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqBiDirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCoreEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCoreEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsFullDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsFullDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsFullDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsFullDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsFullDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsFullDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsFullDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsFullDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadConnList(tspec, *args):
    if tspec == PUNGraph: return LoadConnList_PUNGraph(*args)
    if tspec == PUndirNet: return LoadConnList_PUndirNet(*args)
    if tspec == PDirNet: return LoadConnList_PDirNet(*args)
    if tspec == PNGraph : return LoadConnList_PNGraph(*args)
    if tspec == PNEANet : return LoadConnList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnList_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetHitsMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetHitsMP_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetHitsMP_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetHitsMP_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetHitsMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHitsMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHitsMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHitsMP_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRank(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRank_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRank_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRank_v1(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_v1_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRank_v1_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRank_v1_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_v1_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_v1_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_v1_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_v1_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntInDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntInDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntInDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntInDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntInDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntInDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntInDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntInDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxScc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxScc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxScc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def AddSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return AddSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return AddSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return AddSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return AddSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return AddSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return AddSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return AddSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelDegKNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelDegKNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelDegKNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelDegKNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelDegKNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelDegKNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelDegKNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelDegKNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotSccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotSccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotSccDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotSccDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotSccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotSccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotSccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotSccDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def IsWeaklyConn(tspec, *args):
    if type(tspec) == PUNGraph: return IsWeaklyConn_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsWeaklyConn_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsWeaklyConn_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsWeaklyConn_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsWeaklyConn_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsWeaklyConn_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsWeaklyConn_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxInDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxInDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxInDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxInDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxInDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxInDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxInDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxInDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSccSzCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSccSzCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccSzCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClosenessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetClosenessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClosenessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClosenessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClosenessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClosenessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClosenessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClosenessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxWccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxWccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxWccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetCmnNbrs(tspec, *args):
    if type(tspec) == PUNGraph: return GetCmnNbrs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetCmnNbrs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetCmnNbrs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetCmnNbrs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetCmnNbrs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetCmnNbrs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetCmnNbrs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadEdges_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadEdges_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadEdges_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadConnListStr(tspec, *args):
    if tspec == PUNGraph: return LoadConnListStr_PUNGraph(*args)
    if tspec == PUndirNet: return LoadConnListStr_PUndirNet(*args)
    if tspec == PDirNet: return LoadConnListStr_PDirNet(*args)
    if tspec == PNGraph : return LoadConnListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadConnListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnListStr_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetMxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxWccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxWccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxOutDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxOutDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxOutDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxOutDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxOutDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxOutDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxOutDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxOutDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetLen2Paths(tspec, *args):
    if type(tspec) == PUNGraph: return GetLen2Paths_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetLen2Paths_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetLen2Paths_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetLen2Paths_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetLen2Paths_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetLen2Paths_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetLen2Paths_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRankMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRankMP_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRankMP_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRankMP_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRankMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRankMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRankMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRankMP_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PrintInfo(tspec, *args):
    if type(tspec) == PUNGraph: return PrintInfo_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PrintInfo_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PrintInfo_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PrintInfo_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintInfo_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintInfo_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintInfo_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetWccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetWccs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetWccs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetWccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxSccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxSccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxSccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def NodesGTEDegree(tspec, *args):
    if type(tspec) == PUNGraph: return NodesGTEDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return NodesGTEDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return NodesGTEDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return NodesGTEDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return NodesGTEDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return NodesGTEDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return NodesGTEDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotShortPathDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotShortPathDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotShortPathDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotShortPathDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotShortPathDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotShortPathDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotShortPathDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotShortPathDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodesAtHop(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHop_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodesAtHop_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodesAtHop_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHop_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHop_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHop_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHop_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotInDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotInDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotInDegDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotInDegDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotInDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotInDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotInDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotInDegDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetHits(tspec, *args):
    if type(tspec) == PUNGraph: return GetHits_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetHits_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetHits_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetHits_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHits_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHits_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHits_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxBiCon(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxBiCon_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxBiCon_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxBiCon_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxBiCon_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxBiCon_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxBiCon_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxBiCon_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelZeroDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelZeroDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelZeroDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelZeroDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelZeroDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelZeroDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelZeroDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelZeroDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetRndESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetRndESubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetRndESubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetRndESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndESubGraph_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndESubGraph_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSccs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSccs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentDegree(tspec, *args):
    if type(tspec) == PUNGraph: return PercentDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubTreeSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubTreeSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubTreeSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubTreeSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubTreeSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubTreeSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubTreeSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubTreeSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenFull(tspec, *args):
    if tspec == PUNGraph: return GenFull_PUNGraph(*args)
    if tspec == PUndirNet: return GenFull_PUndirNet(*args)
    if tspec == PDirNet: return GenFull_PDirNet(*args)
    if tspec == PNGraph : return GenFull_PNGraph(*args)
    if tspec == PNEANet : return GenFull_PNEANet(*args)
    if tspec == PNGraphMP: return GenFull_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenFull_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def IsConnected(tspec, *args):
    if type(tspec) == PUNGraph: return IsConnected_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsConnected_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsConnected_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsConnected_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsConnected_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsConnected_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsConnected_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxDegree(tspec, *args):
    if type(tspec) == PUNGraph: return MxDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SavePajek(tspec, *args):
    if type(tspec) == PUNGraph: return SavePajek_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SavePajek_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SavePajek_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SavePajek_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SavePajek_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SavePajek_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SavePajek_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTreeRootNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeRootNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTreeRootNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTreeRootNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeRootNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeRootNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeRootNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeRootNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotHops(tspec, *args):
    if type(tspec) == PUNGraph: return PlotHops_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotHops_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotHops_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotHops_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return DelSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClustCfAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetClustCfAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClustCfAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClustCfAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClustCfAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClustCfAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClustCfAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClustCfAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodesAtHops(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHops_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodesAtHops_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodesAtHops_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHops_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeOutDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeOutDegV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeOutDegV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeOutDegV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeOutDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeOutDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeOutDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeOutDegV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetAnf(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetAnf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetAnf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return PlotClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenCircle(tspec, *args):
    if tspec == PUNGraph: return GenCircle_PUNGraph(*args)
    if tspec == PUndirNet: return GenCircle_PUndirNet(*args)
    if tspec == PDirNet: return GenCircle_PDirNet(*args)
    if tspec == PNGraph : return GenCircle_PNGraph(*args)
    if tspec == PNEANet : return GenCircle_PNEANet(*args)
    if tspec == PNGraphMP: return GenCircle_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenCircle_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def MakeUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return MakeUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MakeUnDir_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MakeUnDir_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MakeUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MakeUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MakeUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MakeUnDir_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetESubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetESubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetESubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetESubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBetweennessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetBetweennessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBetweennessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBetweennessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBetweennessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBetweennessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBetweennessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBetweennessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadParticip(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadParticip_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadParticip_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadParticip_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadParticip_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadParticip_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadParticip_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadParticip_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentMxScc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentMxScc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxScc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetWccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetWccSzCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetWccSzCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetWccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccSzCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def IsTree(tspec, *args):
    if type(tspec) == PUNGraph: return IsTree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsTree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsTree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsTree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenRndGnm(tspec, *args):
    if tspec == PUNGraph: return GenRndGnm_PUNGraph(*args)
    if tspec == PUndirNet: return GenRndGnm_PUndirNet(*args)
    if tspec == PDirNet: return GenRndGnm_PDirNet(*args)
    if tspec == PNGraph : return GenRndGnm_PNGraph(*args)
    if tspec == PNEANet : return GenRndGnm_PNEANet(*args)
    if tspec == PNGraphMP: return GenRndGnm_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenRndGnm_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetFarnessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetFarnessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetFarnessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetFarnessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetFarnessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetFarnessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetFarnessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetFarnessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SaveMatlabSparseMtx(tspec, *args):
    if type(tspec) == PUNGraph: return SaveMatlabSparseMtx_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveMatlabSparseMtx_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveMatlabSparseMtx_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveMatlabSparseMtx_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveMatlabSparseMtx_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveMatlabSparseMtx_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveMatlabSparseMtx_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxSccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxSccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxSccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetAnfEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnfEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetAnfEffDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetAnfEffDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetAnfEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnfEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnfEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnfEffDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTreeSig(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeSig_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTreeSig_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTreeSig_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeSig_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeSig_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeSig_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeSig_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntOutDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntOutDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntOutDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntOutDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntOutDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntOutDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntOutDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntOutDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriangleCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriangleCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriangleCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriangleCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriangleCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriangleCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriangleCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriangleCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetOutDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetOutDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetOutDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetOutDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetOutDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetOutDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetOutDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetOutDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenBaraHierar(tspec, *args):
    if tspec == PUNGraph: return GenBaraHierar_PUNGraph(*args)
    if tspec == PUndirNet: return GenBaraHierar_PUndirNet(*args)
    if tspec == PDirNet: return GenBaraHierar_PDirNet(*args)
    if tspec == PNGraph : return GenBaraHierar_PNGraph(*args)
    if tspec == PNEANet : return GenBaraHierar_PNEANet(*args)
    if tspec == PNGraphMP: return GenBaraHierar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenBaraHierar_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GenTree(tspec, *args):
    if tspec == PUNGraph: return GenTree_PUNGraph(*args)
    if tspec == PUndirNet: return GenTree_PUndirNet(*args)
    if tspec == PDirNet: return GenTree_PDirNet(*args)
    if tspec == PNGraph : return GenTree_PNGraph(*args)
    if tspec == PNEANet : return GenTree_PNEANet(*args)
    if tspec == PNGraphMP: return GenTree_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenTree_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetShortPath(tspec, *args):
    if type(tspec) == PUNGraph: return GetShortPath_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetShortPath_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetShortPath_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetShortPath_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetShortPath_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetShortPath_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetShortPath_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCoreNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCoreNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetInDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetInDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetInDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetInDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetInDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetInDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetInDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetInDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntUniqDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqDirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqDirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqDirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeInDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeInDegV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeInDegV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeInDegV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeInDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeInDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeInDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeInDegV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetRndSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetRndSubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetRndSubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetRndSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndSubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotWccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotWccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotWccDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotWccDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotWccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotWccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotWccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotWccDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetEdgesInOut(tspec, *args):
    if type(tspec) == PUNGraph: return GetEdgesInOut_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetEdgesInOut_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetEdgesInOut_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetEdgesInOut_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetEdgesInOut_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetEdgesInOut_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetEdgesInOut_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCore(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCore_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCore_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCore_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCore_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCore_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCore_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCore_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntNonZNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntNonZNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntNonZNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntNonZNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntNonZNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntNonZNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntNonZNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntNonZNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenStar(tspec, *args):
    if tspec == PUNGraph: return GenStar_PUNGraph(*args)
    if tspec == PUndirNet: return GenStar_PUndirNet(*args)
    if tspec == PDirNet: return GenStar_PDirNet(*args)
    if tspec == PNGraph : return GenStar_PNGraph(*args)
    if tspec == PNEANet : return GenStar_PNEANet(*args)
    if tspec == PNGraphMP: return GenStar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenStar_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def PlotKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotKCoreEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotKCoreEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SaveEdgeList(tspec, *args):
    if type(tspec) == PUNGraph: return SaveEdgeList_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveEdgeList_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveEdgeList_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveEdgeList_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveEdgeList_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveEdgeList_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveEdgeList_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeTriads_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeTriads_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeTriads_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeTriads_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeTriadsAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeTriadsAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeTriadsAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeTriadsAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeTriadsAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeTriadsAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeTriadsAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeTriadsAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeEcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeEcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeEcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeEcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeEcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeEcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeEcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeEcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadEdgeListStr(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeListStr_PUNGraph(*args)
    if tspec == PUndirNet: return LoadEdgeListStr_PUndirNet(*args)
    if tspec == PDirNet: return LoadEdgeListStr_PDirNet(*args)
    if tspec == PNGraph : return LoadEdgeListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeListStr_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def CntUniqUndirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqUndirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqUndirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqUndirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqUndirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqUndirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqUndirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqUndirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriads_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriads_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriads_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriads_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadsAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadsAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadsAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadsAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadsAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadsAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadsAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadsAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')

#
# BELOW INCLUDE disp-custom.py
#
def ConvertGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ConvertSubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ConvertESubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ToNetwork(tspec, *args):
    if tspec == PNEANet : return ToNetwork_PNEANet(*args)
    raise TypeError('First argument has invalid type')
def ToGraph(tspec, *args):
    if tspec == PUNGraph: return ToGraph_PUNGraph(*args)
    if tspec == PUndirNet: return ToGraph_PUndirNet(*args)
    if tspec == PDirNet: return ToGraph_PDirNet(*args)
    if tspec == PNGraph : return ToGraph_PNGraph(*args)
    raise TypeError('First argument has invalid type')

#
# generators for nodes and edges
#

# iterate through all the nodes
def Nodes(self):
    NI = self.BegNI()
    while NI < self.EndNI():
        yield NI
        NI.Next()

# iterate through all the edges
def Edges(self):
    EI = self.BegEI()
    while EI < self.EndEI():
        yield EI
        EI.Next()

# iterate through out edges of a node
def GetOutEdges(self):
    for e in range(0, self.GetOutDeg()):
        yield self.GetOutNId(e)

# iterate through in edges of a node
def GetInEdges(self):
    for e in range(0, self.GetInDeg()):
        yield self.GetInNId(e)

#
# generators for nodes and edges
#

# iterate through all the nodes
def MMNodes(self):
    NI = self.BegMMNI()
    while NI < self.EndMMNI():
        yield NI
        NI.Next()

#
# redefine some methods to use T... class not P... class
#

def Clr(self):
    self().Clr()

def Empty(self):
    return self().Empty()

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PNEANet.Nodes = Nodes
PNEANet.Edges = Edges
PNEANet.Clr = Clr
PNEANet.Empty = Empty
PNEANet.Save = Save

TModeNet.Nodes = MMNodes
TModeNet.Edges = Edges

PMMNet.Save = Save

PUNGraph.Nodes = Nodes
PUNGraph.Edges = Edges
PUNGraph.Clr = Clr
PUNGraph.Empty = Empty
PUNGraph.Save = Save


PUndirNet.Nodes = Nodes
PUndirNet.Edges = Edges
PUndirNet.Clr = Clr
PUndirNet.Empty = Empty
PUndirNet.Save = Save

PDirNet.Nodes = Nodes
PDirNet.Edges = Edges
PDirNet.Clr = Clr
PDirNet.Empty = Empty
PDirNet.Save = Save

PNGraph.Nodes = Nodes
PNGraph.Edges = Edges
PNGraph.Clr = Clr
PNGraph.Empty = Empty
PNGraph.Save = Save

TNGraphNodeI.GetOutEdges = GetOutEdges
TNGraphNodeI.GetInEdges = GetInEdges

TUNGraphNodeI.GetOutEdges = GetOutEdges
TUNGraphNodeI.GetInEdges = GetInEdges

TDirNetNodeI.GetOutEdges = GetOutEdges
TDirNetNodeI.GetInEdges = GetInEdges

TUndirNetNodeI.GetOutEdges = GetOutEdges
TUndirNetNodeI.GetInEdges = GetInEdges

TNEANetNodeI.GetOutEdges = GetOutEdges
TNEANetNodeI.GetInEdges = GetInEdges

TModeNetNodeI.GetOutEdges = GetOutEdges
TModeNetNodeI.GetInEdges = GetInEdges


class PTable(object):
    r"""Proxy of C++ TPt< TTable > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PTable_New)
    __swig_destroy__ = _snap.delete_PTable
    Save = _swig_new_instance_method(_snap.PTable_Save)
    __deref__ = _swig_new_instance_method(_snap.PTable___deref__)
    __ref__ = _swig_new_instance_method(_snap.PTable___ref__)
    __call__ = _swig_new_instance_method(_snap.PTable___call__)
    Empty = _swig_new_instance_method(_snap.PTable_Empty)
    Clr = _swig_new_instance_method(_snap.PTable_Clr)
    GetRefs = _swig_new_instance_method(_snap.PTable_GetRefs)
    SetMP = _swig_new_instance_method(_snap.PTable_SetMP)
    GetMP = _swig_new_instance_method(_snap.PTable_GetMP)
    NormalizeColName = _swig_new_instance_method(_snap.PTable_NormalizeColName)
    NormalizeColNameV = _swig_new_instance_method(_snap.PTable_NormalizeColNameV)
    AddIntCol = _swig_new_instance_method(_snap.PTable_AddIntCol)
    AddFltCol = _swig_new_instance_method(_snap.PTable_AddFltCol)
    AddStrCol = _swig_new_instance_method(_snap.PTable_AddStrCol)
    GetSchema = _swig_new_instance_method(_snap.PTable_GetSchema)
    LoadSS = _swig_new_instance_method(_snap.PTable_LoadSS)
    SaveSS = _swig_new_instance_method(_snap.PTable_SaveSS)
    SaveBin = _swig_new_instance_method(_snap.PTable_SaveBin)
    Load = _swig_new_instance_method(_snap.PTable_Load)
    LoadShM = _swig_new_instance_method(_snap.PTable_LoadShM)
    Dump = _swig_new_instance_method(_snap.PTable_Dump)
    TableFromHashMap = _swig_new_instance_method(_snap.PTable_TableFromHashMap)
    GetContext = _swig_new_instance_method(_snap.PTable_GetContext)
    ChangeContext = _swig_new_instance_method(_snap.PTable_ChangeContext)
    GetColIdx = _swig_new_instance_method(_snap.PTable_GetColIdx)
    GetIntVal = _swig_new_instance_method(_snap.PTable_GetIntVal)
    GetFltVal = _swig_new_instance_method(_snap.PTable_GetFltVal)
    GetStrMapById = _swig_new_instance_method(_snap.PTable_GetStrMapById)
    GetStrMapByName = _swig_new_instance_method(_snap.PTable_GetStrMapByName)
    GetStrValById = _swig_new_instance_method(_snap.PTable_GetStrValById)
    GetStrValByName = _swig_new_instance_method(_snap.PTable_GetStrValByName)
    GetIntRowIdxByVal = _swig_new_instance_method(_snap.PTable_GetIntRowIdxByVal)
    GetStrRowIdxByMap = _swig_new_instance_method(_snap.PTable_GetStrRowIdxByMap)
    GetFltRowIdxByVal = _swig_new_instance_method(_snap.PTable_GetFltRowIdxByVal)
    RequestIndexInt = _swig_new_instance_method(_snap.PTable_RequestIndexInt)
    RequestIndexFlt = _swig_new_instance_method(_snap.PTable_RequestIndexFlt)
    RequestIndexStrMap = _swig_new_instance_method(_snap.PTable_RequestIndexStrMap)
    GetStr = _swig_new_instance_method(_snap.PTable_GetStr)
    GetIntValAtRowIdx = _swig_new_instance_method(_snap.PTable_GetIntValAtRowIdx)
    GetFltValAtRowIdx = _swig_new_instance_method(_snap.PTable_GetFltValAtRowIdx)
    ToGraphSequence = _swig_new_instance_method(_snap.PTable_ToGraphSequence)
    ToVarGraphSequence = _swig_new_instance_method(_snap.PTable_ToVarGraphSequence)
    ToGraphPerGroup = _swig_new_instance_method(_snap.PTable_ToGraphPerGroup)
    ToGraphSequenceIterator = _swig_new_instance_method(_snap.PTable_ToGraphSequenceIterator)
    ToVarGraphSequenceIterator = _swig_new_instance_method(_snap.PTable_ToVarGraphSequenceIterator)
    ToGraphPerGroupIterator = _swig_new_instance_method(_snap.PTable_ToGraphPerGroupIterator)
    NextGraphIterator = _swig_new_instance_method(_snap.PTable_NextGraphIterator)
    IsLastGraphOfSequence = _swig_new_instance_method(_snap.PTable_IsLastGraphOfSequence)
    GetSrcCol = _swig_new_instance_method(_snap.PTable_GetSrcCol)
    SetSrcCol = _swig_new_instance_method(_snap.PTable_SetSrcCol)
    GetDstCol = _swig_new_instance_method(_snap.PTable_GetDstCol)
    SetDstCol = _swig_new_instance_method(_snap.PTable_SetDstCol)
    AddEdgeAttr = _swig_new_instance_method(_snap.PTable_AddEdgeAttr)
    AddSrcNodeAttr = _swig_new_instance_method(_snap.PTable_AddSrcNodeAttr)
    AddDstNodeAttr = _swig_new_instance_method(_snap.PTable_AddDstNodeAttr)
    AddNodeAttr = _swig_new_instance_method(_snap.PTable_AddNodeAttr)
    SetCommonNodeAttrs = _swig_new_instance_method(_snap.PTable_SetCommonNodeAttrs)
    GetSrcNodeIntAttrV = _swig_new_instance_method(_snap.PTable_GetSrcNodeIntAttrV)
    GetDstNodeIntAttrV = _swig_new_instance_method(_snap.PTable_GetDstNodeIntAttrV)
    GetEdgeIntAttrV = _swig_new_instance_method(_snap.PTable_GetEdgeIntAttrV)
    GetSrcNodeFltAttrV = _swig_new_instance_method(_snap.PTable_GetSrcNodeFltAttrV)
    GetDstNodeFltAttrV = _swig_new_instance_method(_snap.PTable_GetDstNodeFltAttrV)
    GetEdgeFltAttrV = _swig_new_instance_method(_snap.PTable_GetEdgeFltAttrV)
    GetSrcNodeStrAttrV = _swig_new_instance_method(_snap.PTable_GetSrcNodeStrAttrV)
    GetDstNodeStrAttrV = _swig_new_instance_method(_snap.PTable_GetDstNodeStrAttrV)
    GetEdgeStrAttrV = _swig_new_instance_method(_snap.PTable_GetEdgeStrAttrV)
    GetNodeTable = _swig_new_instance_method(_snap.PTable_GetNodeTable)
    GetEdgeTable = _swig_new_instance_method(_snap.PTable_GetEdgeTable)
    GetFltNodePropertyTable = _swig_new_instance_method(_snap.PTable_GetFltNodePropertyTable)
    GetColType = _swig_new_instance_method(_snap.PTable_GetColType)
    GetNumRows = _swig_new_instance_method(_snap.PTable_GetNumRows)
    GetNumValidRows = _swig_new_instance_method(_snap.PTable_GetNumValidRows)
    GetRowIdMap = _swig_new_instance_method(_snap.PTable_GetRowIdMap)
    BegRI = _swig_new_instance_method(_snap.PTable_BegRI)
    EndRI = _swig_new_instance_method(_snap.PTable_EndRI)
    BegRIWR = _swig_new_instance_method(_snap.PTable_BegRIWR)
    EndRIWR = _swig_new_instance_method(_snap.PTable_EndRIWR)
    GetPartitionRanges = _swig_new_instance_method(_snap.PTable_GetPartitionRanges)
    Rename = _swig_new_instance_method(_snap.PTable_Rename)
    Unique = _swig_new_instance_method(_snap.PTable_Unique)
    Select = _swig_new_instance_method(_snap.PTable_Select)
    Classify = _swig_new_instance_method(_snap.PTable_Classify)
    SelectAtomic = _swig_new_instance_method(_snap.PTable_SelectAtomic)
    ClassifyAtomic = _swig_new_instance_method(_snap.PTable_ClassifyAtomic)
    SelectAtomicConst = _swig_new_instance_method(_snap.PTable_SelectAtomicConst)
    SelectAtomicIntConst = _swig_new_instance_method(_snap.PTable_SelectAtomicIntConst)
    SelectAtomicStrConst = _swig_new_instance_method(_snap.PTable_SelectAtomicStrConst)
    SelectAtomicFltConst = _swig_new_instance_method(_snap.PTable_SelectAtomicFltConst)
    Group = _swig_new_instance_method(_snap.PTable_Group)
    Count = _swig_new_instance_method(_snap.PTable_Count)
    Order = _swig_new_instance_method(_snap.PTable_Order)
    Aggregate = _swig_new_instance_method(_snap.PTable_Aggregate)
    AggregateCols = _swig_new_instance_method(_snap.PTable_AggregateCols)
    SpliceByGroup = _swig_new_instance_method(_snap.PTable_SpliceByGroup)
    Join = _swig_new_instance_method(_snap.PTable_Join)
    ThresholdJoin = _swig_new_instance_method(_snap.PTable_ThresholdJoin)
    SelfJoin = _swig_new_instance_method(_snap.PTable_SelfJoin)
    SelfSimJoin = _swig_new_instance_method(_snap.PTable_SelfSimJoin)
    SelfSimJoinPerGroup = _swig_new_instance_method(_snap.PTable_SelfSimJoinPerGroup)
    SimJoin = _swig_new_instance_method(_snap.PTable_SimJoin)
    SelectFirstNRows = _swig_new_instance_method(_snap.PTable_SelectFirstNRows)
    Defrag = _swig_new_instance_method(_snap.PTable_Defrag)
    StoreIntCol = _swig_new_instance_method(_snap.PTable_StoreIntCol)
    StoreFltCol = _swig_new_instance_method(_snap.PTable_StoreFltCol)
    StoreStrCol = _swig_new_instance_method(_snap.PTable_StoreStrCol)
    UpdateFltFromTable = _swig_new_instance_method(_snap.PTable_UpdateFltFromTable)
    Union = _swig_new_instance_method(_snap.PTable_Union)
    UnionAll = _swig_new_instance_method(_snap.PTable_UnionAll)
    UnionAllInPlace = _swig_new_instance_method(_snap.PTable_UnionAllInPlace)
    Intersection = _swig_new_instance_method(_snap.PTable_Intersection)
    Minus = _swig_new_instance_method(_snap.PTable_Minus)
    Project = _swig_new_instance_method(_snap.PTable_Project)
    ProjectInPlace = _swig_new_instance_method(_snap.PTable_ProjectInPlace)
    ColGenericOp = _swig_new_instance_method(_snap.PTable_ColGenericOp)
    ColAdd = _swig_new_instance_method(_snap.PTable_ColAdd)
    ColSub = _swig_new_instance_method(_snap.PTable_ColSub)
    ColMul = _swig_new_instance_method(_snap.PTable_ColMul)
    ColDiv = _swig_new_instance_method(_snap.PTable_ColDiv)
    ColMod = _swig_new_instance_method(_snap.PTable_ColMod)
    ColMin = _swig_new_instance_method(_snap.PTable_ColMin)
    ColMax = _swig_new_instance_method(_snap.PTable_ColMax)
    ColConcat = _swig_new_instance_method(_snap.PTable_ColConcat)
    ColConcatConst = _swig_new_instance_method(_snap.PTable_ColConcatConst)
    ReadIntCol = _swig_new_instance_method(_snap.PTable_ReadIntCol)
    ReadFltCol = _swig_new_instance_method(_snap.PTable_ReadFltCol)
    ReadStrCol = _swig_new_instance_method(_snap.PTable_ReadStrCol)
    InitIds = _swig_new_instance_method(_snap.PTable_InitIds)
    IsNextK = _swig_new_instance_method(_snap.PTable_IsNextK)
    PrintSize = _swig_new_instance_method(_snap.PTable_PrintSize)
    PrintContextSize = _swig_new_instance_method(_snap.PTable_PrintContextSize)
    GetMemUsedKB = _swig_new_instance_method(_snap.PTable_GetMemUsedKB)
    GetContextMemUsedKB = _swig_new_instance_method(_snap.PTable_GetContextMemUsedKB)

# Register PTable in _snap:
_snap.PTable_swigregister(PTable)
PTable_New = _snap.PTable_New




#
# redefine some methods to use T... class not P... class
#

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PTable.Save = Save




